<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>79博客学习笔记</title>
    <url>/79%E5%8D%9A%E5%AE%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="博客学习笔记">79博客学习笔记</h2>
<p>注：利用 <code>$\operatorname&#123;&#125;$</code> 标准函数形式表示相应牌。</p>
<h3 id="第一章-麻雀的基础">第一章 麻雀的基础</h3>
<h4 id="麻雀的基础-1麻雀是">麻雀的基础 1—麻雀是?</h4>
<ol type="1">
<li>麻将的目的：雀力日进！</li>
</ol>
<h4 id="麻雀的基础-2麻雀和概率">麻雀的基础 2—麻雀和概率</h4>
<ol type="1">
<li>现代麻将的游戏性，果然其本质不是“役”而是“形”。</li>
<li>即使是打出了最合适的一手，有时也是会失败的。这就是麻将。</li>
<li>不要因为一时成功而喜悦，也不要因为一时的失败而沮丧；要以长远的目光来进行判断。</li>
</ol>
<span id="more"></span>
<h4 id="麻雀的基础-3听牌和向听">麻雀的基础 3—听牌和向听</h4>
<ol type="1">
<li>麻将的和牌形：
<ol type="1">
<li>四面子+一雀头</li>
<li>七组不同的对子</li>
<li>国士无双</li>
</ol></li>
<li>听牌：还差一张牌就能够完成和了形的状态就叫做听牌。有役的话就能够和牌了。</li>
<li>向听数：距离听牌还需要多少手，这个最小回数就叫做“向听数”。</li>
<li>麻将中距离听牌最远的是“六向听”。（考虑七对子）</li>
</ol>
<h4 id="麻雀的基础-4面子和搭子">麻雀的基础 4—面子和搭子</h4>
<ol type="1">
<li><p>麻将中有顺子和刻子两种面子。顺子比刻子更容易凑齐，因此要以顺子为基础去做牌。</p></li>
<li><p>搭子：</p>
<table>
<colgroup>
<col style="width: 54%" />
<col style="width: 4%" />
<col style="width: 34%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>名称</th>
<th>有效牌</th>
<th>进张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span
class="math inline">\(\operatorname{12\backslash89}\)</span></td>
<td>边张</td>
<td><span
class="math inline">\(\operatorname{3\backslash7}\)</span></td>
<td><span class="math inline">\(4\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{n\!−\!1\,n\!+\!1}\
(n\in[2,8]\cap\N)\)</span></td>
<td>坎张</td>
<td><span class="math inline">\(\operatorname{n}\)</span></td>
<td><span class="math inline">\(4\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{n\,n\!+\!1}\
(n\in[2,7]\cap\N)\)</span></td>
<td>两面</td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(8\)</span></td>
</tr>
</tbody>
</table></li>
<li><p>两面比边张和嵌张的有效牌多出了一倍，是最好的形。“制作两面”是做牌基础中的基础。</p></li>
<li><p>它们价值的排序如下:
<strong>两面&gt;&gt;嵌张&gt;边张</strong></p></li>
</ol>
<h4 id="麻雀的基础-5数牌和字牌">麻雀的基础 5—数牌和字牌</h4>
<ol type="1">
<li><p>三元牌（均为役牌）的宝牌提示顺序是“<strong>白→发→中</strong>”的循环关系</p></li>
<li><p>风牌：</p>
<ol type="1">
<li>场风牌是役牌</li>
<li>自风牌是役牌</li>
<li>场风与自风牌相同则为两番的连风牌</li>
<li>其他为连风牌，不是役牌</li>
</ol></li>
<li><p>数牌：<span
class="math inline">\(\operatorname{34567}&gt;\operatorname{28}&gt;\operatorname{19}\)</span></p>
<p><a href="https://imgse.com/i/xlGcHe"><img
src="https://s1.ax1x.com/2022/10/04/xlGcHe.png"
alt="xlGcHe.png" /></a></p>
<p><a href="https://imgse.com/i/pSYg7aq"><img
src="https://s1.ax1x.com/2023/01/24/pSYg7aq.png"
alt="pSYg7aq.png" /></a></p></li>
</ol>
<h4 id="麻雀的基础-6对子一">麻雀的基础 6—对子(一)</h4>
<ol type="1">
<li><p>对子的作用有：</p>
<ol type="1">
<li>雀头</li>
<li>面子的替补</li>
<li>七对子的组成部分</li>
</ol></li>
<li><p>雀头：</p>
<ol type="1">
<li><p>雀头很容易做成，但是在晚巡 6block
无雀头情况下可以在拆搭子的同时注意雀头的候补情况。</p></li>
<li><p>利用复合型做雀头：</p>
<ul>
<li><strong>顺子摸成亚两面后得六张进张。</strong></li>
<li><strong>顺子摸成四连形后得六张进张。</strong></li>
<li><strong>暗刻摸成小螺丝后得七张进张。</strong></li>
<li><strong>暗刻摸成大螺丝后得十一张进张。</strong></li>
</ul></li>
<li><p>暗刻切掉一张，也可以形成雀头：<strong>在无雀头、暗刻+搭子的听牌形时，应该将暗刻切掉一张，形成雀头听牌。</strong></p></li>
</ol></li>
<li><p><strong>面子优先法则</strong>：比起容易形成的雀头，更加花费时间的面子要优先考虑，这是做牌通向和牌的一条近路。</p></li>
</ol>
<h4 id="麻雀的基础-7对子二">麻雀的基础 7—对子(二)</h4>
<ol type="1">
<li>对子有着<strong>“当含有两组对子的时候作为面子替补的价值会变高”</strong>的性质。</li>
<li>随着对子数量的增加，其面子替补作用会变弱，会越来越难形成面子。</li>
</ol>
<h4 id="麻雀的基础-8基本形与复合型">麻雀的基础 8—基本形与复合型</h4>
<ol type="1">
<li>手牌是由“面子”、“对子”、“搭子”、“孤张牌”所组成的。</li>
<li>由以上两种要素组成的复合型会产生基本形不具有的性质，了解复合型的各种性质是非常重要的。</li>
</ol>
<h4 id="麻雀的基础-9复合型一">麻雀的基础 9—复合型(一)</h4>
<h5 id="三张复合型">三张复合型</h5>
<ol type="1">
<li><p>对子复合型：</p>
<p>这种形比对子作用要稍微大一些。
与搭子的其中一张重叠的形，其进张数比仅仅是搭子的进张数多出了可以形成刻子的
2 张。</p>
<table>
<thead>
<tr>
<th>复合型的种类</th>
<th>进张数</th>
</tr>
</thead>
<tbody>
<tr>
<td>边张对</td>
<td><span class="math inline">\(6\)</span></td>
</tr>
<tr>
<td>坎张对</td>
<td><span class="math inline">\(6\)</span></td>
</tr>
<tr>
<td>两面对</td>
<td><span class="math inline">\(10\)</span></td>
</tr>
</tbody>
</table>
<ul>
<li><p><strong>不要过于早的拆掉对子+搭子的复合型来固定对子或者搭子使进张数尽量多是基本的打法。</strong></p></li>
<li><p><strong>要避免在一向听去固定含有不要牌的搭子而损失 4
张进张数的这种情况。</strong></p></li>
<li><p>补强牌：使搭子形成对子复合型的牌。</p></li>
<li><p>多个对子复合型的处理：</p>
<ul>
<li>两个对子的情况：一般会比较想把两个对子都留下，比较搭子的部位，<strong>拆掉较弱的搭子</strong>。</li>
<li>三个对子的情况：一般会拆掉其中一对，<strong>拆掉最强搭子的对子</strong>，把补强牌留在弱搭子上。（固定好型）</li>
</ul></li>
</ul></li>
<li><p>两坎：</p>
<p>两个连接起来的坎张就叫做两坎。</p>
<ul>
<li>五种形式：<span class="math inline">\(\operatorname{135\ 246\ 357\
468\ 579}\)</span></li>
<li>进张数：<span class="math inline">\(8\)</span></li>
<li><strong>连续的两个坎张叫做两坎，是次于两面的好形。在序盘的时候能够发挥作用，但是随着与听牌距离的减少，两坎会成为与两面相差甚远的愚形。</strong></li>
<li>面对 <span class="math inline">\(\operatorname{122346\ 233457\
344568\ 455679\ 134556\ 245667\ 356778\ 467889}\)</span>
的形状时注意可拆解为顺子+两坎。</li>
<li>特殊作用：用于引挂。</li>
<li>长两坎：<span class="math inline">\(\operatorname{134568\
245679}\)</span></li>
</ul></li>
</ol>
<h4 id="麻雀的基础-10复合型二">麻雀的基础 10—复合型(二)</h4>
<h5 id="四张复合型面子孤张牌">四张复合型（面子+孤张牌）</h5>
<p>可以鸣牌时四张复合型的价值都会有一定程度的提升。</p>
<ol type="1">
<li><p>四连形：</p>
<ul>
<li><p>六种形式：<span class="math inline">\(\operatorname{1234\ 2345\
3456\ 4567\ 5678\ 6789}\)</span></p></li>
<li><p>进张：</p>
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>边张&amp;坎张</th>
<th>两面</th>
<th>三面</th>
<th>对子</th>
<th>有效牌张数</th>
<th>好形张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{1234}\)</span></td>
<td><span class="math inline">\(\operatorname{26}\)</span></td>
<td><span class="math inline">\(\operatorname{35}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{14}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(20\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(7\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{2345}\)</span></td>
<td><span class="math inline">\(\operatorname{7}\)</span></td>
<td><span class="math inline">\(\operatorname{134}\)</span></td>
<td><span class="math inline">\(\operatorname{6}\)</span></td>
<td><span class="math inline">\(\operatorname{25}\)</span></td>
<td><span class="math inline">\(7\)</span> 种 <span
class="math inline">\(24\)</span> 张</td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{3456}\)</span></td>
<td><span class="math inline">\(\operatorname{18}\)</span></td>
<td><span class="math inline">\(\operatorname{45}\)</span></td>
<td><span class="math inline">\(\operatorname{27}\)</span></td>
<td><span class="math inline">\(\operatorname{36}\)</span></td>
<td><span class="math inline">\(8\)</span> 种 <span
class="math inline">\(28\)</span> 张</td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{4567}\)</span></td>
<td><span class="math inline">\(\operatorname{29}\)</span></td>
<td><span class="math inline">\(\operatorname{56}\)</span></td>
<td><span class="math inline">\(\operatorname{38}\)</span></td>
<td><span class="math inline">\(\operatorname{47}\)</span></td>
<td><span class="math inline">\(8\)</span> 种 <span
class="math inline">\(28\)</span> 张</td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{5678}\)</span></td>
<td><span class="math inline">\(\operatorname{3}\)</span></td>
<td><span class="math inline">\(\operatorname{679}\)</span></td>
<td><span class="math inline">\(\operatorname{4}\)</span></td>
<td><span class="math inline">\(\operatorname{58}\)</span></td>
<td><span class="math inline">\(7\)</span> 种 <span
class="math inline">\(24\)</span> 张</td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{6789}\)</span></td>
<td><span class="math inline">\(\operatorname{48}\)</span></td>
<td><span class="math inline">\(\operatorname{57}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{69}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(20\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(7\)</span> 张</td>
</tr>
</tbody>
</table>
<p><a href="https://imgse.com/i/pSYyJVP"><img
src="https://s1.ax1x.com/2023/01/24/pSYyJVP.png"
alt="pSYyJVP.png" /></a></p></li>
<li><p><strong>请记住 <span
class="math inline">\(\operatorname{3456}\)</span> 和 <span
class="math inline">\(\operatorname{4567}\)</span> 是麻将 <span
class="math inline">\(4\)</span>
张牌组合中进张数最多的。</strong>手牌中含有这种形的时候可以当作<strong>两个两面</strong>看待。</p></li>
<li><p>虽然 <span class="math inline">\(\operatorname{1234}\)</span> 和
<span class="math inline">\(\operatorname{6789}\)</span> 几乎和孤立牌的
<span class="math inline">\(\operatorname{4\ 6}\)</span>
机能一样，但是它们很容易形成雀头，所以拿到也别立马拆了。（也可以看作四连形种的<span
class="math inline">\(\operatorname{1\ 9}\)</span> 具有解放强力数牌
<span class="math inline">\(\operatorname{4\ 6}\)</span>
的能力）</p></li>
<li><p>四连形是唯一一种有两种拆成面子+单张方式的四张复合型。</p></li>
<li><p>四连形的好形率较低，就形状考虑一般不留双四连形。</p></li>
</ul></li>
<li><p>中膨形：</p>
<ul>
<li><p>七种形式：<span class="math inline">\(\operatorname{1223\ 2334\
3445\ 4556\ 5667\ 6778\ 7889}\)</span></p></li>
<li><p>进张：</p>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 15%" />
<col style="width: 25%" />
<col style="width: 14%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>边张&amp;坎张</th>
<th>两面</th>
<th>对子</th>
<th>有效牌张数</th>
<th>好形张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span
class="math inline">\(\operatorname{1223\backslash7889}\)</span></td>
<td><span
class="math inline">\(\operatorname{14\backslash69}\)</span></td>
<td><span
class="math inline">\(\operatorname{3\backslash7}\)</span></td>
<td><span
class="math inline">\(\operatorname{2\backslash8}\)</span></td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(12\)</span> 张</td>
<td><span class="math inline">\(1\)</span> 种 <span
class="math inline">\(3\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{n\!−\!1\,n\,n\,n\!+\!1}\
(n\in[3,7]\cap\N)\)</span></td>
<td></td>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!1\,n\!+\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(\operatorname{n}\)</span></td>
<td><span class="math inline">\(5\)</span> 种 <span
class="math inline">\(16\)</span> 张</td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
</tr>
</tbody>
</table>
<p><a href="https://imgse.com/i/pSYgORU"><img
src="https://s1.ax1x.com/2023/01/24/pSYgORU.png"
alt="pSYgORU.png" /></a></p></li>
<li><p><span class="math inline">\(\operatorname{1223}\)</span> 和 <span
class="math inline">\(\operatorname{7889}\)</span>
两种形进张数很狭窄，而且容易形成恶形，所以它们不是很好使用的形。但与孤立牌的
<span class="math inline">\(\operatorname{2\ 8}\)</span>
相比，它们拥有<strong>容易构成一杯口和当形成边张+嵌张时容易做成雀头的优点</strong>。</p></li>
<li><p><span class="math inline">\(\operatorname{2334\sim6778}\)</span>
也几乎可以当作<strong>两个两面</strong>看，<strong>且容易构成一杯口</strong>，它们是非常贵重的形。</p></li>
<li><p>中部中膨形的好形进张与中部四连形相同，且好形率更高，在形状重视时更易被留下。</p></li>
</ul></li>
<li><p>亚两面：</p>
<ul>
<li><p>十二种形式：<span class="math inline">\(\operatorname{1123\ 2234\
3345\ 4456\ 2344\ 5567\ 3455\ 6678\ 4566\ 5677\ 6788\
7899}\)</span></p></li>
<li><p>这种形制作两面的能力与孤立牌没有什么太大的差别。（尤其在手牌不缺对子时）</p></li>
<li><p>优点：</p>
<ol type="1">
<li>直接用来听牌：由于是复合型，解决了没有雀头的问题，能够听 <span
class="math inline">\(6\)</span> 张。</li>
<li>有转形一杯口的可能性。</li>
<li>不规则的三面形转换。（包括但不限于有双碰进张烟囱形的 <span
class="math inline">\(\operatorname{n\,n\,n\,n\!+\!1\,n\!+\!2\qquad
n\,n\,n\,n\!−\!1\,n\!−\!2}\)</span>）</li>
</ol></li>
<li><p>因为可以拆成两面+坎张，所以在可副露的情况下可以通过，吃牌将坎张做成顺子进而改良为顺子+两面。</p></li>
<li><p>进张：</p>
<p><a href="https://imgse.com/i/pStiPRx"><img
src="https://s1.ax1x.com/2023/01/24/pStiPRx.png"
alt="pStiPRx.png" /></a></p>
<p><a href="https://imgse.com/i/pStikQK"><img
src="https://s1.ax1x.com/2023/01/24/pStikQK.png"
alt="pStikQK.png" /></a></p></li>
</ul></li>
<li><p>螺丝形：</p>
<ul>
<li>大螺丝：暗刻+两面。小螺丝：暗刻+边/坎张</li>
<li>缺对子听牌时：大螺丝三面听牌，小螺丝两面听牌。</li>
<li>具有形成烟囱形等复合好形的能力。</li>
<li>但是单独从进张和好形进张数目来讲，螺丝型甚至不如没有暗刻的单张数牌，所以在不缺对子的情况下，留下暗刻是一种基本的打法。</li>
<li>坎对等对子复合型优于相应的螺丝形。</li>
</ul></li>
<li><p>跳一形：</p>
<ul>
<li><p>十种形式：<span class="math inline">\(\operatorname{1345\ 2456\
3567\ 4678\ 5789\ 1235\ 2346\ 3457\ 4568\ 5679}\)</span></p></li>
<li><p>进张：</p>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 16%" />
<col style="width: 15%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 11%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th>行</th>
<th>边张&amp;坎张</th>
<th>两面</th>
<th>三面</th>
<th>对子</th>
<th>有效牌张数</th>
<th>好形张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{1345}\)</span></td>
<td><span class="math inline">\(\operatorname{36}\)</span></td>
<td><span class="math inline">\(\operatorname{2}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{1}\)</span></td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
<td><span class="math inline">\(1\)</span> 种 <span
class="math inline">\(4\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{2456}\)</span></td>
<td><span class="math inline">\(\operatorname{147}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{3}\)</span></td>
<td><span class="math inline">\(\operatorname{2}\)</span></td>
<td><span class="math inline">\(5\)</span> 种 <span
class="math inline">\(18\)</span> 张</td>
<td><span class="math inline">\(1\)</span> 种 <span
class="math inline">\(4\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{3567}\)</span></td>
<td><span class="math inline">\(\operatorname{158}\)</span></td>
<td><span class="math inline">\(\operatorname{2}\)</span></td>
<td><span class="math inline">\(\operatorname{4}\)</span></td>
<td><span class="math inline">\(\operatorname{3}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(22\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{4678}\)</span></td>
<td><span class="math inline">\(\operatorname{269}\)</span></td>
<td><span class="math inline">\(\operatorname{3}\)</span></td>
<td><span class="math inline">\(\operatorname{5}\)</span></td>
<td><span class="math inline">\(\operatorname{4}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(22\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{5789}\)</span></td>
<td><span class="math inline">\(\operatorname{37}\)</span></td>
<td><span class="math inline">\(\operatorname{46}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{5}\)</span></td>
<td><span class="math inline">\(5\)</span> 种 <span
class="math inline">\(18\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{1235}\)</span></td>
<td><span class="math inline">\(\operatorname{37}\)</span></td>
<td><span class="math inline">\(\operatorname{46}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{5}\)</span></td>
<td><span class="math inline">\(5\)</span> 种 <span
class="math inline">\(18\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{2346}\)</span></td>
<td><span class="math inline">\(\operatorname{148}\)</span></td>
<td><span class="math inline">\(\operatorname{7}\)</span></td>
<td><span class="math inline">\(\operatorname{5}\)</span></td>
<td><span class="math inline">\(\operatorname{6}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(22\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{3457}\)</span></td>
<td><span class="math inline">\(\operatorname{259}\)</span></td>
<td><span class="math inline">\(\operatorname{8}\)</span></td>
<td><span class="math inline">\(\operatorname{6}\)</span></td>
<td><span class="math inline">\(\operatorname{7}\)</span></td>
<td><span class="math inline">\(6\)</span> 种 <span
class="math inline">\(22\)</span> 张</td>
<td><span class="math inline">\(2\)</span> 种 <span
class="math inline">\(8\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{4568}\)</span></td>
<td><span class="math inline">\(\operatorname{369}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{7}\)</span></td>
<td><span class="math inline">\(\operatorname{8}\)</span></td>
<td><span class="math inline">\(5\)</span> 种 <span
class="math inline">\(18\)</span> 张</td>
<td><span class="math inline">\(1\)</span> 种 <span
class="math inline">\(4\)</span> 张</td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{5679}\)</span></td>
<td><span class="math inline">\(\operatorname{47}\)</span></td>
<td><span class="math inline">\(\operatorname{8}\)</span></td>
<td></td>
<td><span class="math inline">\(\operatorname{9}\)</span></td>
<td><span class="math inline">\(4\)</span> 种 <span
class="math inline">\(14\)</span> 张</td>
<td><span class="math inline">\(1\)</span> 种 <span
class="math inline">\(4\)</span> 张</td>
</tr>
</tbody>
</table></li>
<li><p>让人意外的是，<span
class="math inline">\(\operatorname{1235}\)</span> 和 <span
class="math inline">\(\operatorname{5789}\)</span>
由于面子处在两端，其连续形的作用被消弱，和孤张牌的 <span
class="math inline">\(\operatorname{5}\)</span> 差不多了。
(优点是可以利用“吃”来做成两组面子，否则一定是愚形)</p></li>
<li><p>不过这个和 <span class="math inline">\(\operatorname{1\
9}\)</span> 单独一张相比还是有很大差别的。 <strong><span
class="math inline">\(\operatorname{1345}\)</span> 的 <span
class="math inline">\(\operatorname{1}\)</span> 和 <span
class="math inline">\(\operatorname{5679}\)</span> 的 <span
class="math inline">\(\operatorname{9}\)</span> 要比单独的 <span
class="math inline">\(\operatorname{2}\)</span> 和 <span
class="math inline">\(\operatorname{8}\)</span>
要更加有用</strong>。</p></li>
<li><p>强化坎张：拆普通坎张优于拆 <span
class="math inline">\(\operatorname{13456}\)</span> 中的 <span
class="math inline">\(\operatorname{1}\)</span>，因为强化坎张维持了改良的可能性。打单张
<span class="math inline">\(\operatorname{28}\)</span> 优于拆 <span
class="math inline">\(\operatorname{1345}\)</span> 中的 <span
class="math inline">\(\operatorname{1}\)</span>，因为强化坎张维持了改良的可能性。</p></li>
<li><p><span
class="math inline">\(\operatorname{2}&lt;\operatorname{2456}\)</span>
的 <span
class="math inline">\(\operatorname{2}&lt;\operatorname{3}\)</span></p></li>
<li><p><span
class="math inline">\(\operatorname{4}&lt;\operatorname{4678}\leqslant\operatorname{3567}\)</span></p></li>
<li><p><span class="math inline">\(\operatorname{3567\ 3457&gt;4678\
2346&gt;5789\ 1235\geqslant5_{(3\sim7)}&gt;2456\ 4568&gt;1345\
5679&gt;2\ 8}\)</span></p></li>
<li><p>进张：</p>
<p><a href="https://imgse.com/i/pSNdT39"><img
src="https://s1.ax1x.com/2023/01/26/pSNdT39.png"
alt="pSNdT39.png" /></a></p>
<p><a href="https://imgse.com/i/pSNd7cR"><img
src="https://s1.ax1x.com/2023/01/26/pSNd7cR.png"
alt="pSNd7cR.png" /></a></p>
<p><a href="https://imgse.com/i/pSNdHj1"><img
src="https://s1.ax1x.com/2023/01/26/pSNdHj1.png"
alt="pSNdHj1.png" /></a></p>
<p><a href="https://imgse.com/i/pSNdLB6"><img
src="https://s1.ax1x.com/2023/01/26/pSNdLB6.png"
alt="pSNdLB6.png" /></a></p>
<p><a href="https://imgse.com/i/pSNdqnx"><img
src="https://s1.ax1x.com/2023/01/26/pSNdqnx.png"
alt="pSNdqnx.png" /></a></p></li>
</ul></li>
</ol>
<h4 id="麻雀的基础-11麻将的听牌型一">麻雀的基础 11—麻将的听牌型(一)</h4>
<ol type="1">
<li><p>基本的听牌型：</p>
<table>
<colgroup>
<col style="width: 53%" />
<col style="width: 8%" />
<col style="width: 34%" />
<col style="width: 4%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>名称</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{n}\)</span></td>
<td>单骑听牌</td>
<td><span class="math inline">\(\operatorname{n}\)</span></td>
<td><span class="math inline">\(3\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{12\backslash89}\)</span></td>
<td>边张听牌</td>
<td><span
class="math inline">\(\operatorname{3\backslash7}\)</span></td>
<td><span class="math inline">\(4\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{n\!−\!1\,n\!+\!1}\
(n\in[2,8]\cap\N)\)</span></td>
<td>坎张听牌</td>
<td><span class="math inline">\(\operatorname{n}\)</span></td>
<td><span class="math inline">\(4\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{nn\,mm}\)</span></td>
<td>双碰听牌</td>
<td><span class="math inline">\(\operatorname{n\,m}\)</span></td>
<td><span class="math inline">\(4\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{n\,n\!+\!1}\
(n\in[2,7]\cap\N)\)</span></td>
<td>两面听牌</td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(8\)</span></td>
</tr>
</tbody>
</table>
<ul>
<li>两面听牌的优势是非常明显的。</li>
<li>单骑听牌一眼看上去虽然糟糕，但是由于其变化多，而且要是听场上已经舍掉的一张字牌的话，和牌率是非常高的。有时候比听牌数多的听牌更加有效果。</li>
</ul></li>
<li><p>四连形和亚两面形：</p>
<table>
<colgroup>
<col style="width: 48%" />
<col style="width: 4%" />
<col style="width: 43%" />
<col style="width: 3%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>名称</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span
class="math inline">\(\operatorname{n\,n\!+\!1\,n\!+\!2\,n\!+\!3}\
(n\in[1,6]\cap\N)\)</span></td>
<td>四连形</td>
<td><span class="math inline">\(\operatorname{n\,n\!+\!3}\)</span></td>
<td><span class="math inline">\(6\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\,n\!+\!1\,n\!+\!2\,n\!+\!2\backslash
n\,n\,n\!+\!1\,n\!+\!2\ (n\in[1,7]\cap\N)}\)</span></td>
<td>亚两面</td>
<td><span class="math inline">\(\operatorname{n\!−\!1\,n\!+\!2\backslash
n\,n\!+\!3}\)</span></td>
<td><span class="math inline">\(6\)</span></td>
</tr>
</tbody>
</table>
<ul>
<li>四连形可以看作是两个单骑听牌。</li>
<li>亚两面形一部分与雀头一体化，比纯粹的两面听牌要少 2 张听牌数。</li>
</ul></li>
<li><p>暗刻复合型：</p>
<table>
<colgroup>
<col style="width: 45%" />
<col style="width: 6%" />
<col style="width: 45%" />
<col style="width: 3%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>名称</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{1112\backslash
1222\backslash 8889\backslash 8999}\)</span></td>
<td>边张单骑</td>
<td><span
class="math inline">\(\operatorname{23\backslash13\backslash79\backslash78}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\,n\!+\!2\,n\!+\!2\,n\!+\!2\backslash
n\,n\,n\,n\!+\!2}\ (n\in[1,7]\cap\N)\)</span></td>
<td>坎张单骑</td>
<td><span class="math inline">\(\operatorname{n\,n\!+\!1\backslash
n\!+\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\,n\!+\!1\,n\!+\!1\,n\!+\!1\backslash
n\,n\,n\,n\!+\!1}\ (n\in[2,7]\cap\N)\)</span></td>
<td>两面单骑</td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!2\backslash
n\!−\!1\,n\!+\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(11\)</span></td>
</tr>
</tbody>
</table>
<ul>
<li>这是以暗刻为轴的不规则听牌，使用频率是相当高的。</li>
</ul></li>
<li><p>基本三面张：</p>
<table>
<thead>
<tr>
<th>形</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{23456}\)</span></td>
<td><span class="math inline">\(\operatorname{147}\)</span></td>
<td><span class="math inline">\(11\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{34567}\)</span></td>
<td><span class="math inline">\(\operatorname{258}\)</span></td>
<td><span class="math inline">\(11\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{45678}\)</span></td>
<td><span class="math inline">\(\operatorname{369}\)</span></td>
<td><span class="math inline">\(11\)</span></td>
</tr>
</tbody>
</table>
<p>含单骑形式： | 形 | 所听牌 | 张数 | |
--------------------------------------------- | -------------------- |
---- | | <span class="math inline">\(\operatorname{23456+147}\)</span>
筋三选二（可重复） | <span
class="math inline">\(\operatorname{147}\)</span> | <span
class="math inline">\(9\)</span> | | <span
class="math inline">\(\operatorname{34567+258}\)</span>
筋三选二（可重复） | <span
class="math inline">\(\operatorname{258}\)</span> | <span
class="math inline">\(9\)</span> | | <span
class="math inline">\(\operatorname{45678+369}\)</span>
筋三选二（可重复） | <span
class="math inline">\(\operatorname{369}\)</span> | <span
class="math inline">\(9\)</span> |</p>
<ul>
<li><strong><span
class="math inline">\(e.g.\operatorname{234455566}\)</span> 切 <span
class="math inline">\(5\)</span>（<span
class="math inline">\(\operatorname{345566677}\)</span> 切 <span
class="math inline">\(6\)</span>  <span
class="math inline">\(\operatorname{456677788}\)</span> 切 <span
class="math inline">\(7\)</span>  <span
class="math inline">\(223334456\)</span> 切 <span
class="math inline">\(3\)</span>  <span
class="math inline">\(334445567\)</span> 切 <span
class="math inline">\(4\)</span>  <span
class="math inline">\(445556678\)</span> 切 <span
class="math inline">\(5\)</span>），形成三面好形听牌，这个形还可以形成一杯口，而且和牌的效率也更高。</strong></li>
</ul></li>
</ol>
<h4 id="麻雀的基础-12麻将的听牌形二">麻雀的基础 12—麻将的听牌形(二)</h4>
<p><strong>不管是多么复杂的形，应付多面张听牌的基本就是“3
张一样的牌可以看作暗刻，也可以看
作雀头+一个单张“。这样基本就可以搞定所有的多面听牌了。</strong></p>
<ol type="1">
<li><p>不规则两面听牌：</p>
<table>
<thead>
<tr>
<th>形</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="math inline">\(\operatorname{1345666}\)</span></td>
<td><span class="math inline">\(\operatorname{12}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{2456777}\)</span></td>
<td><span class="math inline">\(\operatorname{23}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{35678888}\)</span></td>
<td><span class="math inline">\(\operatorname{34}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{4678999}\)</span></td>
<td><span class="math inline">\(\operatorname{45}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{1112346}\)</span></td>
<td><span class="math inline">\(\operatorname{56}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{2223457}\)</span></td>
<td><span class="math inline">\(\operatorname{67}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{3334568}\)</span></td>
<td><span class="math inline">\(\operatorname{78}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span class="math inline">\(\operatorname{4445679}\)</span></td>
<td><span class="math inline">\(\operatorname{89}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
</tbody>
</table></li>
<li><p>不规则三面听牌：</p>
<table>
<colgroup>
<col style="width: 56%" />
<col style="width: 39%" />
<col style="width: 3%" />
</colgroup>
<thead>
<tr>
<th>形</th>
<th>所听牌</th>
<th>张数</th>
</tr>
</thead>
<tbody>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\!−\!1\,n\,n\,n\!+\!1\,n\!+\!1}\
(n\in[2,8]\cap\N)+\operatorname{n\!−\!1\,n\,n\!+\!1}\)</span>
三选一</td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!1}\)</span></td>
<td><span class="math inline">\(5\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\,n\,n\!+\!1\,n\!+\!1\,n\!+\!2\,n\!+\!2\,n\!+\!3\,n\!+\!3}\
(n\in[1,6]\cap\N)+\operatorname{mm}\)</span></td>
<td><span
class="math inline">\(\operatorname{n\,n\!+\!3\,m}\)</span></td>
<td><span class="math inline">\(6\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\!−\!1\,n\!−\!1\,n\,n\!+\!1}\
(n\in[2,7]\cap\N)\backslash\operatorname{n\,n\!+\!1\,n\!+\!1\,n\!+\!2\,n\!+\!2\,n\!+\!2}\
(n\in[1,6]\cap\N)+\operatorname{mm}\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\!+\!2\,m}\)</span></td>
<td><span class="math inline">\(7\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!2\,n\!−\!2\,n\!−\!1\,n\!−\!1\,n\,n\!+\!1}\
(n\in[3,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(9\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!1\,n\!+\!1\,n\!+\!2\,n\!+\!2\,n\!+\!2}\
(n\in[3,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\,n\!+\!1}\)</span></td>
<td><span class="math inline">\(9\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!2\,n\!−\!2\,n\!−\!1\,n\,n\,n\!+\!1}\
(n\in[3,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(9\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\,n\!+\!1\,n\!+\!2\,n\!+\!2\,n\!+\!2}\
(n\in[3,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\,n\!+\!1}\)</span></td>
<td><span class="math inline">\(9\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!3\,n\!−\!3\,n\!−\!3\,n\!−\!1\,n\,n\!+\!1\,n\!+\!2}\
(n\in[4,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(10\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!1\,n\,n\!+\!1\,n\!+\!3\,n\!+\!3\,n\!+\!3}\
(n\in[3,6]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!+\!1\,n\!+\!2}\)</span></td>
<td><span class="math inline">\(10\)</span></td>
</tr>
<tr>
<td><span
class="math inline">\(\operatorname{n\!−\!2\,n\!−\!2\,n\!−\!2\,n\,n\!+\!2\,n\!+\!2\,n\!+\!2}\
(n\in[3,7]\cap\N)\)</span></td>
<td><span
class="math inline">\(\operatorname{n\!−\!1\,n\,n\!+\!1}\)</span></td>
<td><span class="math inline">\(11\)</span></td>
</tr>
</tbody>
</table></li>
<li><p>四面以上的听牌型：略</p></li>
</ol>
<h3 id="第二章牌效率">第二章:牌效率</h3>
<h4 id="牌效率-1根据牌理打牌">牌效率 1—根据牌理打牌</h4>
<ol type="1">
<li>根据牌理打牌：牌理指的就是为了有效率地完成 4
面子+一组雀头的理论。</li>
<li>以一局作为单位来说的话，麻将就是比赛“对局 4 人中谁能够最快的组成 4
面子+一组雀头”的游戏。</li>
<li>麻将手牌有<strong>“速度”、“打点”、“防御力”</strong>三个要素，其中“速度”是最重要的。其中的原因是“速度”能够给予“打点”和“防御力”以掩护。尽早和牌可以阻止对手可能和出的牌，实际的收益也可以看作“和了的点数”+“各种未知的收益”。</li>
<li>被手役迷惑双眼而不去和牌是非常不可取的行为。</li>
</ol>
<h4 id="牌效率-2有效牌和张数">牌效率 2—有效牌和张数</h4>
<p><strong>有效牌=进张+改良</strong></p>
<ol type="1">
<li>张数和概率：
<ul>
<li>“张数越多就越有利”，这是麻将中的一个基本定理。</li>
<li>麻将不是比第六感的游戏，而是比“得失感觉的敏锐性”的游戏。</li>
</ul></li>
<li>进张数：
<ul>
<li>进张：所有能使手牌向听数前进的牌叫做手牌的进张。</li>
<li>我们可以通过数出手牌的进张数来评价一副手牌的好坏。</li>
</ul></li>
<li>改良：
<ul>
<li>改良：所有能使手牌的进张数增加的牌叫做手牌的改良。</li>
<li>可以在进张数相同时比较两副牌的改良，但是相比改良而言，进张数的优势有更高的价值。也就是说进张数应该比改良要优先考虑。</li>
</ul></li>
</ol>
<h4 id="牌效率-3浮牌理论">牌效率 3—浮牌理论</h4>
<ol type="1">
<li>基本牌理：
<ul>
<li>对子-&gt;刻子：更加容易鸣牌(容易打出)的字牌和靠近两端的牌比较有利。</li>
<li>形成面子的能力：<span
class="math inline">\(\operatorname{3\sim7}&gt;\operatorname{2\&amp;8}&gt;\operatorname{1\&amp;9}&gt;\)</span>
字牌</li>
<li>字牌：连风牌&gt;自风牌（非连风牌）&gt;普通役牌&gt;场风牌（非连风牌）&gt;客风牌。但是场上切出一张之后，其价值就会大大减弱。要是切出两张的话，就几乎派不上什么用场了。这个时候拿着的话，几乎都是用作安全牌了吧。</li>
</ul></li>
<li>牌的相互作用：
<ul>
<li>筋牌廉价定理：<strong>同时拿着筋牌，会导致其一张牌的价值下降。</strong></li>
<li>拿着筋牌会由于进张牌重复导致进张牌的张数减少。特别是 <span
class="math inline">\(\operatorname{14}\)</span> 的 <span
class="math inline">\(\operatorname{1}\)</span> 和 <span
class="math inline">\(\operatorname{69}\)</span> 的 <span
class="math inline">\(\operatorname{9}\)</span>
几乎没有作为面子替补的机能，应该尽早切掉。</li>
</ul></li>
<li>间四有形成两坎好形的可能。</li>
</ol>
<h4 id="牌效率-4搭子理论一">牌效率 4—搭子理论(一)</h4>
<ol type="1">
<li><p>基本牌理：</p>
<ul>
<li><p>一个搭子的评价要点有以下 <span class="math inline">\(5\)</span>
个：</p>
<ol type="1">
<li>进张数（能够完成面子的牌的数量）</li>
<li>改良（变换为两面，三面，两嵌等）</li>
<li>打点</li>
<li>听牌时是否容易和牌</li>
<li>山存量</li>
</ol></li>
<li><p><strong>两面&gt;两嵌&gt;嵌张&gt;边张</strong></p></li>
</ul></li>
<li><p>实际的比较：</p>
<ul>
<li>要拆掉嵌张搭子的时候，多数情况都是从外到内的顺序切。但是考虑的牌的危险程度，从内往外切也是可以的。</li>
<li>当进张数相同时，应当先比较改良。</li>
<li>一般情况下，避免 二度受 的效率更高。</li>
</ul></li>
</ol>
<h4 id="牌效率-5搭子理论二">牌效率 5—搭子理论(二)</h4>
<h5 id="关于两坎">关于两坎</h5>
<p>虽然它的进张数有 <span class="math inline">\(8\)</span>
张，但是需要使用 <span class="math inline">\(3\)</span>
张手牌并且最终成为听牌形时只能够是嵌张。
两嵌的机能性还是远远不及两面。</p>
<ol type="1">
<li>两坎和双碰的比较：
<ul>
<li>当有雀头可以形成两面的中张牌时，
一般情况下选择“嵌张+双碰”比两嵌的改良要有利一些。</li>
<li>在具有很好改良的情况下一般双碰更优。</li>
<li>已经鸣牌的手牌。双碰进张会比较有利。</li>
<li>但是依旧有一些情况选择两坎的改良会更优。（平和形重视）</li>
<li>选择两嵌还是双碰需要比较各自的改良张数。<strong>一般情况下，双碰的更加有利的情况多一些</strong>。</li>
</ul></li>
</ol>
<h4 id="牌效率-6搭子理论三">牌效率 6—搭子理论(三)</h4>
<h5 id="复合搭子的处理方法">复合搭子的处理方法</h5>
<ol type="1">
<li>两面+嵌张形</li>
<li>其他的复合型</li>
</ol>
<h4 id="牌效率-7切牌选择的思考方法">牌效率 7—切牌选择的思考方法</h4>
<p>思考方法：</p>
<ol type="1">
<li>把手牌模式化，掌握了手牌进张数最广的一种切牌方法。</li>
<li>学会更加优越的比较方法</li>
</ol>
<p>牌理概论：</p>
<ol type="1">
<li><p>初期（三向听以下）基本牌理：</p>
<p>对于初期阶段的手牌，最好是去比较“<strong>切这个牌会有什么样的损失</strong>”。没有去拘泥于“降低向听数”的必要。应该考虑留下一些手役的可能和将来的防御问题。</p></li>
<li><p>两向听基本牌理：</p>
<p>一向听集中理论：“一向听”到“听牌”的过程是麻将中最困难的一个阶段，所以在两向听的阶段宁愿牺牲一点进张数，让一向听的阶段进张数更多。</p></li>
<li><p>一向听基本牌理：</p>
<p>这个时候进入听牌的进张数就是最重要的评价指标了。当进张数没有差别的时候，比较改良的张数是较为有效的对应方法。</p></li>
<li><p>听牌基本牌理：</p>
<p>能够和牌的张数无疑是最重要的。但是对于荣和来讲，也不是张数越多就越容易和牌。如果听的是比较容易被打出来的牌，可以说是一个好的听牌。当张数没有差别的时候，考虑手牌的变化张数是很重要的。尤其是单骑听牌，手牌变化是很丰富的。</p></li>
</ol>
<h4 id="牌效率-8初期牌理一">牌效率 8—初期牌理(一)</h4>
<ol type="1">
<li><p>序盘时切牌的顺序：</p>
<p>未现的客风牌（内部比较里宝率） 早于 已现的<span
class="math inline">\(\operatorname{14\backslash69}\)</span> 的 <span
class="math inline">\(\operatorname{1\backslash9}\)</span>
早于（比较张数和防守）已现的客风牌（内部比较里宝率） 早于
已现的非连风场风牌 早于 已现的三元牌 早于 已现的自风牌 早于 未现的<span
class="math inline">\(\operatorname{14\backslash69}\)</span> 的 <span
class="math inline">\(\operatorname{1\backslash9}\)</span> 早于 单张
<span class="math inline">\(\operatorname{1\backslash9}\)</span> 早于
未现的非连风场风牌 早于 未现的三元牌（内部比较里宝率） 早于 未现的自风牌
早于 单张<span
class="math inline">\(\operatorname{2\backslash8}\)</span>
早于未现的自风连风牌 早于 边张搭子</p>
<p><a href="https://imgse.com/i/ppiW3M8"><img
src="https://s1.ax1x.com/2023/03/01/ppiW3M8.png"
alt="ppiW3M8.png" /></a></p></li>
<li><p>由于孤立的字牌是最难形成面子的部分，所以切掉没有役的风牌绝对是正确的。但是，有明显不需要的数牌的时候，考虑到将来的防守，可以先从数牌开始切。</p></li>
<li><p>从牌理上看，孤立的老头牌比任何一种对子和搭子的价值都要低。</p></li>
</ol>
<h4 id="牌效率-9初期牌理二">牌效率 9—初期牌理(二)</h4>
<ol type="1">
<li><p>六搭子一雀头形：单纯比较搭子即可</p>
<p>六搭子形应该把损失最小的那个搭子拆掉，把手牌中唯一一组雀头拆掉是绝对不可以的。</p></li>
<li><p>五搭子+浮牌：基本的方法就是比较留下的孤立牌即可</p>
<p>五搭子形基本上只要把价值最低的那张浮牌切掉就可以了。有二度进张的边张搭子等不好的搭子的时候，把搭子拆掉留下浮牌会比较有利。</p></li>
</ol>
<h4 id="牌效率-10两向听的牌理一">牌效率 10—两向听的牌理(一)</h4>
<h5 id="三搭子一面子一雀头形">三搭子一面子一雀头形：</h5>
<ul>
<li>比较浮牌是基本。</li>
<li>三对子形可以损双碰进张去要改良。（根据手牌不同，把 <span
class="math inline">\(3\)</span> 张一组的搭子变成 <span
class="math inline">\(2\)</span>
张一组的单独搭子，去留下浮牌会比较有利。这种情况几乎都是把 <span
class="math inline">\(3\)</span> 对子形中的其中一个对子变成两面。）</li>
<li>两面搭子齐的情况下侧重于留安。</li>
</ul>
<h4 id="牌效率-11两向听的牌理二">牌效率 11—两向听的牌理(二)</h4>
<h5 id="四搭子一面子一雀头无浮牌形">四搭子一面子一雀头无浮牌形：</h5>
<ul>
<li>拆掉机能最差的一组搭子是基本。（另一种方法是把多张的搭子变为单独的搭子，维持
<span class="math inline">\(4\)</span> 搭子。）</li>
<li>在很难判断的情况下(没有明显机能弱小的搭子)，可以先把手牌中的两面搭子先进行固定来扩大自己判断空间。</li>
</ul>
<h4 id="牌效率-12两向听的牌理三">牌效率 12—两向听的牌理(三)</h4>
<ol type="1">
<li><p>四搭子一雀头有浮牌形：</p>
<p>判断留不留下浮牌是关键。</p></li>
<li><p>无雀头形：</p>
<p>以面子优先，同时注重一向听集中。</p></li>
<li><p>七对子相关：</p>
<ul>
<li>面子手来说是三向听，七对子是两向听：一般情况下是留下对子和面子的复合型，圆滑地向面子手前进。</li>
<li>面子手和七对子都是两向听：无特殊手役时，无平和确则留下七对子的可能性比较好；全两面搭子自己向平和形前进。</li>
</ul></li>
</ol>
<h4 id="牌效率-13一向听的牌理一">牌效率 13—一向听的牌理(一)</h4>
<ol type="1">
<li><p>基本的思考方法：</p>
<p><a href="https://imgse.com/i/pSIvk0f"><img
src="https://s1.ax1x.com/2023/02/13/pSIvk0f.png"
alt="pSIvk0f.png" /></a></p></li>
<li><p>基本情况：</p>
<p>十分形的标准：进张数 <span
class="math inline">\(&gt;16\)</span>。</p>
<p>首先比较进张和形状，其次从手役和防守等角度考虑。</p></li>
<li><p>非十分形：综合考虑</p></li>
</ol>
<h4 id="牌效率-14一向听的牌理二">牌效率 14—一向听的牌理(二)</h4>
<h5 id="搭子超载">搭子超载</h5>
<ul>
<li><p>在比较坎张时，注意拆二度受和保留三张复合型。</p></li>
<li><p>在比较两面等时，注意“一面子+两坎”的组合。</p></li>
</ul>
<h4 id="牌效率-15一向听的牌理三">牌效率 15—一向听的牌理(三)</h4>
<h5 id="两搭子一向听">两搭子一向听</h5>
<ul>
<li><p>两面两面一向听的话应该留下双碰进张听牌的可能。如果双碰进张已经很薄的话，用安全牌进行替换会比较好。</p></li>
<li><p>保留好形留下双碰和弱搭子进张会更广。</p></li>
<li><p>只有 <span class="math inline">\(1\sim2\)</span>
张进张数差别的时候，应该优先考虑改良和听牌时的听牌形。</p></li>
<li><p>“双碰+两面”和“嵌张+两面”的比较要注意考虑手役和改良。</p></li>
</ul>
<h4 id="牌效率-16一向听的牌理四">牌效率 16—一向听的牌理(四)</h4>
<h5
id="找头一向听两搭子面对亚两面的雀头取舍">找头一向听两搭子面对亚两面的雀头取舍：</h5>
<ul>
<li>不固定雀头，保持“搭子+搭子”的形是进张最广的。</li>
<li>有暗刻的无雀头形+两搭子的向听，把雀头固定下来是绝对不可取的。</li>
<li>当搭子是复合两面的时候，不确定雀头才是更加有利的。</li>
<li>无暗刻有一个搭子是愚形的情况，拆掉愚形搭子是有力的一手。</li>
<li>无暗刻有两个搭子是愚形的情况，为了速度还是全牌效吧。</li>
</ul>
<h4 id="牌效率-17一向听的牌理五">牌效率 17—一向听的牌理(五)</h4>
<p>找头一向听一搭子：</p>
<ul>
<li>改良很重要。</li>
<li>面对多面进张的复合型要敢于拆愚形搭子。</li>
<li>比较进张数是基本，当进张数几乎没什么差别的时候，“听牌形”和“改良”就有考虑的必要了。</li>
</ul>
<h4 id="牌效率-18一向听的牌理六">牌效率 18—一向听的牌理(六)</h4>
<h5 id="靠张一向听">靠张一向听</h5>
<ul>
<li>进张数非常广。</li>
<li>很容易形成愚形听牌。</li>
<li>数字相同的数牌，形成了连续形的靠张比单独的靠张总体要更强。（好形率更高）</li>
<li>由于靠张一向听的进张数非常的广，所以能形成良形听牌的进张数是最应该重视的要素。</li>
<li>听牌太差也有拒听的考量。</li>
</ul>
<h4 id="牌效率-19听牌时的牌理">牌效率 19—听牌时的牌理</h4>
<p>听牌时没有选择的情况比较多，但是在有所选择的时候，选择最容易和牌的情况是基本。</p>
<ol type="1">
<li>听牌的张数：别忘记三面，但多种张数少依旧不优。</li>
<li>变化的比较：坎张与双碰的比较改良。</li>
</ol>
<h4 id="牌效率-20向听倒退">牌效率 20—向听倒退</h4>
<ul>
<li><p>向听倒退最终能让牌形成快速和牌的形的情况是不多的。</p></li>
<li><p>做手役鸣牌。</p></li>
<li><p>听牌几乎没有。</p></li>
<li><p>向听倒退就是为了提升打点的技术</p></li>
</ul>
<ol type="1">
<li>不选择听牌：过于愚形的听牌不如看眼断平。</li>
<li>两向听倒退：进向听机会很少并且进向之后听牌很差，不如退向听看眼断平。</li>
<li>序盘向听倒退：最常见的就是染手。</li>
</ol>
<h3 id="第三章手役">第三章:手役</h3>
<h4 id="手役-1手役的考虑方法一">手役 1—手役的考虑方法(一)</h4>
<p><a href="https://imgse.com/i/pSL3wdJ"><img
src="https://s1.ax1x.com/2023/02/18/pSL3wdJ.png"
alt="pSL3wdJ.png" /></a></p>
<p>手役的难度和点数并不一定是平衡的，没有必要一味的追求难度高的役种。</p>
<h4 id="手役-2手役的考虑方法二">手役 2—手役的考虑方法(二)</h4>
<ol type="1">
<li><p>手役是形成的：</p>
<p>配合自己的摸牌来作手役是一个准则，<strong>“定打”是绝对禁止的。（<code>定打</code><span
class="math inline">\(\not=\)</span><code>最终形</code>）</strong></p></li>
<li><p>手役的优点：</p>
<p><strong>提升打点，获得副露权（提升速度）。</strong></p></li>
<li><p>手役的缺点：</p>
<ul>
<li>使进张数减少（速度减慢）。</li>
<li>能够使用的牌被限定了。</li>
<li>手役有时候会拉速度和防守的后腿。</li>
</ul></li>
</ol>
<h4 id="手役-3役牌">手役 3—役牌</h4>
<ol type="1">
<li>留下役牌。</li>
<li>役牌还是断幺？
<ul>
<li><strong>一般情况下还是断幺更有利，准备鸣牌的话，还是断幺更加容易一些。而且也更容易与平和等其他役复合。</strong></li>
<li>打点相同的时候，确定的手役比不确定的手役更有利。</li>
</ul></li>
<li>关于鸣牌：
<ul>
<li>一般情况下，第一次鸣牌也没关系。</li>
<li>需要第二次鸣牌的情况要么是手牌太好，要么就是手牌太差。</li>
<li>不碰的情况：
<ol type="1">
<li>后期的大 top，牌不快不大的不碰。</li>
<li>AL 不放铳优先的局面，不快点不碰。</li>
<li>平场的早巡好牌有望立直的不碰。</li>
<li>全好形役牌雀头不碰。</li>
<li>搭子没几个全是垃圾的不碰。</li>
</ol></li>
</ul></li>
</ol>
<h4 id="手役-4平和">手役 4—平和</h4>
<p>平和是最容易作成的役之一。只要效率把握的好，手牌自然能够形成平和。</p>
<ol type="1">
<li>两面的变化：两面改良重视。</li>
<li>两坎：平和形重视时，留下两坎放弃双碰。</li>
<li>拆对子：
<ul>
<li>有条件的情况下，拆掉包括但不限于役牌的对子，兼顾断幺平和，以门断平为目标。</li>
<li>不仅一个对子的情况下，注意复合型的情况，根据牌效和防守拆掉最合适的对子。</li>
</ul></li>
</ol>
<h4 id="手役-5断幺">手役 5—断幺</h4>
<p>断幺最大的好处就是鸣牌之后也能和牌，这个我们应该尽量利用。</p>
<ol type="1">
<li>向着断幺打牌</li>
<li>确定断幺：
<ul>
<li>搭子超载的情况下拆掉靠边的搭子。</li>
<li>有雀头 <span class="math inline">\(\operatorname{6899}\)</span>
的情况切 <span class="math inline">\(\operatorname{9}\)</span>
狂看断幺。</li>
</ul></li>
<li>考虑鸣牌：牺牲一定的进张争取迅速副露断幺。</li>
</ol>
<h4 id="手役-6染手一">手役 6—染手(一)</h4>
<h5 id="从手牌来看是否要去做">从手牌来看是否要去做</h5>
<ul>
<li><p><span class="math inline">\(10+\)</span>
同色牌比较整齐且其他牌比较零散一般情况下可以做染手。</p></li>
<li><p>不用染手的牌不要强行去染手，<strong>为染手去拆已经形成的面子是禁止的</strong>。</p></li>
<li><p>特殊情况比如同色的牌非常整齐，其他的牌有且仅有一个面子，为了能够让打点大幅上升，还是可以拆面子染手的。</p></li>
<li><p>有两个役牌对子的话，尽可能的染手作满贯。同时应该从比较不起眼的牌开始切，降低他人的警戒心。</p></li>
<li><p>边打边弃的牌，当混一色相当遥远有可能中途弃和的时候，
从中间的牌开始切让对手提高警惕从而巩固自己的防守也是一种打法。</p></li>
<li><p>很痛苦的混一色要重视防守，没有见到和牌希望之前不要轻易鸣牌。</p></li>
</ul>
<h4 id="手役-7染手二">手役 7—染手(二)</h4>
<h5 id="混一色的手筋">混一色的手筋</h5>
<ol type="1">
<li>过渡打牌</li>
<li>先打：迷彩战术</li>
<li>让形变强：多记一记多面听的牌形，可以用门清狂等程序训练。</li>
</ol>
<h4 id="手役-8三色">手役 8—三色</h4>
<ol type="1">
<li>滑动：以四连形为滑动窗口滑动到三色情况。</li>
<li>两天秤：在有两种色的对称的两面/四连形时有机会牺牲部分进张数保留相邻的两种三色的可能性的方法
。</li>
<li>剩余牌的利用：在搭子超载时灵活地选择可以利用上剩余牌的形式拆搭子，灵活运用剩余牌去做手役。</li>
</ol>
<h4 id="手役-9对子手一">手役 9—对子手(一)</h4>
<h5 id="七对子-or-对对和">七对子 or 对对和</h5>
<ol type="1">
<li>六组对子：七对子已经听牌的话，不要乱去碰。</li>
<li>五组对子：
<ul>
<li><strong>这个时候根据手牌情况，向听倒退，选择对对有很多好处</strong>。</li>
<li>幺九牌比较容易鸣牌，数牌 <span
class="math inline">\(\operatorname{3\sim7}\)</span> 不容易鸣牌。</li>
<li>有容易鸣牌的对子，有 <span class="math inline">\(3900\)</span>
点以上的收入，巡目尚早。满足以上条件，从七对子一向听转对对才是正确的。</li>
<li>形状比较好的情况下，有役牌或断幺
chance，也不一定要固定七对子和对对和。</li>
</ul></li>
<li>四组对子+一组暗刻：
<ul>
<li>选择四暗刻的两向听是符合理论的打法。</li>
<li>从向听数的比较来看，对对的听牌难易度比七对子有着压倒性的优势。而且还有三暗刻、四暗刻的可能性，应该保留对对。</li>
<li>做成一个暗刻的话，那就是七对子和对对的天枰，碰牌出来的话就碰！</li>
<li>但是，要是有场上已经切了两张牌的对子（已经不可能形成刻子的对子）的话，应当选择七对子。</li>
</ul></li>
</ol>
<h4 id="手役-10对子手二">手役 10—对子手(二)</h4>
<ol type="1">
<li><p>七对子和面子手的分歧点：</p>
<ul>
<li>一般情况下，七对子和面子手的向听数一样的时候，面子手进张数更多，听牌更加容易。</li>
<li>当面子手的向听数比七对子更低的时候，就向着面子手前进就好。</li>
<li>面子手不好的时候要留下七对子的可能性。</li>
</ul></li>
<li><p>七对子的听牌：</p>
<p>单骑听牌要根据其和牌程度有意图地进行选择：</p>
<p><a href="https://imgse.com/i/pSx8prt"><img
src="https://s1.ax1x.com/2023/02/23/pSx8prt.png"
alt="pSx8prt.png" /></a></p></li>
</ol>
<h3 id="第四章宝牌和赤牌">第四章:宝牌和赤牌</h3>
<h4 id="宝牌和赤牌-1宝牌的对策一">宝牌和赤牌 1—宝牌的对策(一)</h4>
<p>要考虑宝牌进张去打牌。打点和进张都不好的时候，不要放弃宝牌的进张。</p>
<h4 id="宝牌和赤牌-2宝牌的对策二">宝牌和赤牌 2—宝牌的对策(二)</h4>
<ol type="1">
<li>含有宝牌 <span class="math inline">\(\operatorname{a}\)</span> 的
<span
class="math inline">\(\operatorname{aa\!+\!1a\!+\!1\,a\!−\!1a\!−\!1a}\)</span>
应该作为比一般两面坎张更好的牌应该先拆。</li>
<li><strong>心里要怀着让宝牌牌上用场的想法打牌，固定宝牌和让未来的宝牌尽量留下的打法一般是更优的。</strong></li>
</ol>
<h4 id="宝牌与赤牌-3宝牌-2-以上的情况">宝牌与赤牌 3—宝牌 2
以上的情况</h4>
<ol type="1">
<li>别太贪心：
<ul>
<li>正因为是大牌，所以才应该追求和牌的容易度。</li>
<li>有多张宝牌，听的牌多就算让手牌价值下降一点也没关系。</li>
<li>鸣牌也能够满贯，没有错过的理由啊。</li>
</ul></li>
<li>鸣牌前提的准备：
<ul>
<li>留役牌等重叠。</li>
<li>切幺九牌尽快食断。</li>
</ul></li>
</ol>
<h4 id="宝牌与赤牌-4切宝牌的时机">宝牌与赤牌 4—切宝牌的时机</h4>
<ol type="1">
<li>役牌和宝牌的情况：
<ul>
<li>役牌的宝牌：第一打或者听牌时。</li>
<li>不要牌要比宝牌先切出去。</li>
<li>综合场况，亲子关系，有无鸣牌，是否有现等情况判断切宝牌的时机。</li>
</ul></li>
<li>其他的情况：大多数情况下进张广度优先于宝牌考虑。</li>
</ol>
<h4 id="宝牌与赤牌-5宝牌和手役的选择">宝牌与赤牌 5—宝牌和手役的选择</h4>
<ol type="1">
<li>听牌时的选择：基本的就是选择听牌最多的。</li>
<li>一向听的时候：
<ul>
<li>确定的一番一般情况下比不确定的两番有利。</li>
<li>宝牌和手役的选择，按照进张是否广来进行判断是很少失败的。</li>
</ul></li>
<li>序盘的选择：序盘的话，留下宝牌和手役两方的可能性很多时候能形成好型。</li>
</ol>
<h4 id="宝牌与赤牌-6赤牌麻将的基本">宝牌与赤牌 6—赤牌麻将的基本</h4>
<ol type="1">
<li>比起手役，应该更加重视进张的宽度。</li>
<li>不要拘泥于门前清。</li>
<li>全带是不利的。</li>
<li>考虑赤牌的进张。</li>
</ol>
<h3 id="第五章鸣牌">第五章:鸣牌</h3>
<h4 id="鸣牌-1鸣牌的优点与缺点">鸣牌 1—鸣牌的优点与缺点</h4>
<p>优点：<strong>速度上升</strong></p>
<ol type="1">
<li>加速听牌</li>
<li>能够做成门清难以做成的役</li>
<li>消除边张、嵌张等急需进张的地方</li>
<li>能够做成新的面子改变所听的牌</li>
<li>鸣牌还有破掉其他人的一发，隔掉他家的摸牌等等作用。</li>
</ol>
<p>缺点：<strong>打点下降，防御力下降</strong></p>
<ol type="1">
<li>降低打点</li>
<li>手牌容易被看破</li>
<li>防御力减弱</li>
<li>固定了手牌，限定了手役的可能性</li>
</ol>
<h4 id="鸣牌-2副露判断的基本">鸣牌 2—副露判断的基本</h4>
<p>应该以鸣牌时优点与缺点那边更大作为判断的标准。应该以鸣牌时优点与缺点那边更大作为判断的标准。</p>
<h4 id="鸣牌-3碰与吃一">鸣牌 3—碰与吃(一)</h4>
<ul>
<li><p><strong>碰是 <span class="math inline">\(4\)</span> 倍速，吃是
<span class="math inline">\(2\)</span> 倍速。</strong></p></li>
<li><p>用碰消除一发的风险是很大的，消除一发还是用吃更加安全。</p></li>
<li><p>能够吃的进张有着门清限定 <span class="math inline">\(2\)</span>
倍的价值， 能够碰的进张有着门清限定 <span
class="math inline">\(4\)</span> 倍的价值。</p></li>
</ul>
<h4 id="鸣牌-4碰与吃二">鸣牌 4—碰与吃(二)</h4>
<ol type="1">
<li>碰材的优劣</li>
<li>要考虑吃的副露方式：
<ul>
<li>考虑吃了之后剩余的顺子 slide 的可能性。</li>
<li>考虑吃了之后形成多面听的可能性。</li>
<li>吃牌的时候一定要养成确认“鸣牌的方式对剩下的形是否有差别”的习惯。</li>
</ul></li>
</ol>
<h4 id="鸣牌-5杠一">鸣牌 5—杠(一)</h4>
<ol type="1">
<li>杠的优点：
<ol type="1">
<li>使符数增高。</li>
<li>宝牌增加。</li>
<li>增加自己的摸牌。</li>
<li>岭上开花。</li>
<li>能够让特定的牌不能使用（限暗杠）。</li>
</ol></li>
<li>杠的缺点：
<ol type="1">
<li>有增加他家宝牌的可能性。</li>
<li>容易暴露自己的手牌点数和手役。</li>
<li>会使进张减少。</li>
</ol></li>
</ol>
<h4 id="鸣牌-6杠二">鸣牌 6—杠(二)</h4>
<h5 id="不开杠的选择">不开杠的选择</h5>
<ol type="1">
<li>手牌烂的一批</li>
<li>使自己听牌变差的时候</li>
<li>使手牌进张减少的时候</li>
<li>有人立直的时候</li>
<li>自己遥遥领先的时候</li>
<li>门清的大明杠</li>
</ol>
<h4 id="鸣牌-7鸣牌与向听数">鸣牌 7—鸣牌与向听数</h4>
<ol type="1">
<li>不改变向听数的鸣牌：不改变向听数的鸣牌是禁止的，能改良或提高和率/打点的情况除外。</li>
<li>副露数与向听数：
<ul>
<li>三副露：听牌、要是一向听的话也要有满贯的手牌（比如清一色）</li>
<li>两副露：一向听以上，两向听要是给力的好形，打点要有 <span
class="math inline">\(3900\)</span> 点。</li>
</ul></li>
</ol>
<h4 id="鸣牌-8食断">鸣牌 8—食断</h4>
<ol type="1">
<li>即使断幺，好不容易有一手好牌，鸣牌的话太浪费了。</li>
<li>宝牌或赤牌有 2 张以上。</li>
<li>和牌就 OK 的情况。</li>
<li>门清来不及的时候。</li>
<li>牌型很烂，打点又不高的牌是不能鸣牌的，尤其是食断这种防御力低而且容易放铳的手牌。</li>
</ol>
<h4 id="鸣牌-9对对">鸣牌 9—对对</h4>
<ol type="1">
<li>只有 <span class="math inline">\(4\)</span>
组对子就去做对对有点欠缺考虑。</li>
<li>刻子和对子加起来要有 <span class="math inline">\(5\)</span>
组这样的手牌就可以去做对对了。</li>
<li>四暗刻的一向听该怎么办?不去听自摸就能够满贯的牌，我觉得有点优柔寡断了。</li>
<li>做牌过度是要禁止的：有两面听牌没必要要单骑对对。</li>
</ol>
<h4 id="鸣牌-10混一色">鸣牌 10—混一色</h4>
<ol type="1">
<li>不应鸣牌的手牌：
<ul>
<li>只要是门清混一色的好形一向听都有门清听牌的价值。</li>
<li>手牌的形状太次了。</li>
</ul></li>
<li>应该鸣的牌，应该放过的牌：
<ul>
<li>不鸣给自己制造愚形的牌。</li>
<li>不鸣鸣完听牌很差的牌。</li>
</ul></li>
</ol>
<h4 id="鸣牌-11后付1">鸣牌 11—后付(1)</h4>
<ol type="1">
<li>以防御力优先的鸣牌。</li>
<li>赤牌的速度麻将中的后付也是很常见的。</li>
<li>尽量防止暴露役牌对子为 dora 的后付。</li>
</ol>
<h4 id="鸣牌-12后付2">鸣牌 12—后付(2)</h4>
<ol type="1">
<li>急需的牌出现的时候：待牌比较少时的消除愚形。</li>
<li>二手准备的后付：仅靠役牌的手牌是不好鸣牌的，但要是有三色或者一气的话会更加有效果。</li>
<li>无论如何都想和牌的胜负关键。</li>
</ol>
<h4 id="鸣牌-13鸣牌的技巧1">鸣牌 13—鸣牌的技巧(1)</h4>
<ol type="1">
<li>食延：通过吃来让面子增加。（混一色、断幺……）</li>
<li>双重面子的处理：可以通过鸣牌消除二度受的时候，应该尽可能的鸣牌。</li>
<li><strong>但是，也要注意一下理牌</strong>：就要事先想好要鸣的牌，然后对手牌进行适当的理牌或者在吃之前早点把要副露的两张牌放到自己右边。</li>
</ol>
<h4 id="鸣牌-14鸣牌的技巧2">鸣牌 14—鸣牌的技巧(2)</h4>
<p>关于食断要多考虑</p>
<h4 id="鸣牌-15鸣牌的技巧3">鸣牌 15—鸣牌的技巧(3)</h4>
<ol type="1">
<li>破一发</li>
<li>干涉碰</li>
<li>转移海底、消除海底</li>
<li>不以和牌为目标的杠</li>
</ol>
<h3 id="第六章立直">第六章:立直</h3>
<h4 id="立直-1立直的优点与缺点">立直 1—立直的优点与缺点</h4>
<ol type="1">
<li>立直的优点：
<ul>
<li>很容易就能成役。</li>
<li>有一发和里宝牌的可能性。</li>
<li>让对手不能自由地打牌。（四暗刻通过立直延长巡目）</li>
<li>让对手知道你听牌，而去追求荣和。</li>
</ul></li>
<li>立直的缺点：
<ul>
<li>必须拿出 <span class="math inline">\(1000\)</span> 点点棒。</li>
<li>让他家知道自己已经听牌，荣和的期望不高。</li>
<li>立直后除了所听的牌以及能够暗杠的牌，所有的牌都只能摸切。</li>
<li>不能改变手牌。</li>
</ul></li>
</ol>
<h4 id="立直-2立直还是默听1">立直 2—立直?还是默听?(1)</h4>
<h5 id="平场情况看手牌">平场情况看手牌</h5>
<ol type="1">
<li>像役满一样的高打点手牌立直也没有打点的提升，Dama。（四暗刻除外）</li>
<li>默听能有跳满的手牌，听牌又是两面的话还是不立直会更有利。</li>
<li>好型+早巡的时候，立直更有利是现在的标准。</li>
<li>这样有役且有 <span class="math inline">\(8000\)</span>
打点的愚型，Dama。</li>
<li>跳满以上的牌，大多默听。满贯确定的愚形听牌基本上都是默听，不过序盘的好型听牌立直也不错。</li>
</ol>
<h4 id="立直-3立直还是默听2">立直 3—立直?还是默听?(2)</h4>
<h5 id="听牌十分形看场况">听牌十分形看场况</h5>
<ol type="1">
<li>那么，两面等不错的听牌，得点在 <span
class="math inline">\(5200\)</span> 以下的，
从结论上讲，“平场是全部应该立直的”。</li>
<li>即使是平和 nomi 也要立直。</li>
<li>立直一般优于手牌的手役变化。</li>
</ol>
<h4 id="立直-4立直还是默听3">立直 4—立直?还是默听?(3)</h4>
<h5 id="牌的形状不太好的情况">牌的形状不太好的情况</h5>
<ol type="1">
<li>无役听牌：
<ul>
<li>有
Dora，改良少偏向于立直。无役有宝牌和赤牌的愚形听牌立直是上等选择。</li>
<li>改良比较丰富的手牌，默听也是考虑范围之一。</li>
<li>没有
Dora，立直的得点提高效率不太高。先默听，有人立直的话还能有弃和的选择。</li>
<li>早巡形状太差了也要考虑拒听。</li>
</ul></li>
<li>有役听牌：
<ul>
<li>改良很少（Dora 较少）的情况还是要去立直的。</li>
<li>对于手役，默听有 <span class="math inline">\(5200\)</span>
就默听，<span class="math inline">\(2600\)</span> 的话就立直。</li>
</ul></li>
</ol>
<h4 id="立直-5立直理论1">立直 5—立直理论(1)</h4>
<ol type="1">
<li>即立直是基本：
<ul>
<li>听牌时立直和默听的判断：要立直就马上立直；默听的话，只要场上形式没变就保持默听。</li>
<li>立直越迟，一发的几率就越小。</li>
</ul></li>
<li>自摸的基准：
<ul>
<li>不要怕“这种听牌是不会被打出来的”。</li>
</ul></li>
</ol>
<h4 id="立直-6立直理论2">立直 6—立直理论(2)</h4>
<ol type="1">
<li>引挂在内，延展在外</li>
<li>暗刻优先：无平和形时增加符数。</li>
<li>情报要少</li>
</ol>
<h4 id="立直-7立直的听牌取向1">立直 7—立直的听牌取向(1)</h4>
<ol type="1">
<li><p>张数</p></li>
<li><p>点数听牌张数没有差别，那就选择得点更高的。</p></li>
<li><p>所听牌被打出的容易程度</p>
<p><a href="https://imgse.com/i/pp2kT3V"><img
src="https://s1.ax1x.com/2023/03/30/pp2kT3V.png"
alt="pp2kT3V.png" /></a></p></li>
</ol>
<h4 id="立直-8立直的听牌取向2">立直 8—立直的听牌取向(2)</h4>
<h5
id="张数少的高打点张数多的低打点">张数少的高打点，张数多的低打点</h5>
<ol type="1">
<li>打点有微差：更侧重于张数。</li>
<li>1 翻的差距：张数有一倍的差距的话，打点只有一倍提升也不要选择。</li>
<li>2 翻的差距：
<ul>
<li>无 dora：选择手役。</li>
<li>dora 1：根据场况判断。</li>
<li>dora 2：两面立直/愚形默听</li>
<li>dora 3：好形立直。</li>
</ul></li>
<li>3 翻以上的差距：几乎都是高打点。</li>
</ol>
<h3 id="第七章防守">第七章:防守</h3>
<h4 id="防守-1防守的基本">防守 1—防守的基本</h4>
<ul>
<li><p>防守的基本：立直的处理&amp;弃和</p></li>
<li><p>防守与进攻的战略：</p>
<p><a href="https://imgse.com/i/ppwyaAx"><img
src="https://s1.ax1x.com/2023/03/23/ppwyaAx.png"
alt="ppwyaAx.png" /></a></p>
<ol type="1">
<li>弃和：放弃自己和牌，彻底地进入防守状态。</li>
<li>兜牌：一边避免放铳，一边向着听牌或者和牌前进的打法。</li>
<li>防守需要重视</li>
</ol></li>
</ul>
<h4 id="防守-2安全牌">防守 2—安全牌</h4>
<p>安全牌：三家现物；上家同巡切牌；无国士无双听牌时，第四张字牌；完全的
no chance。</p>
<h4 id="防守-3筋1">防守 3—筋(1)</h4>
<ul>
<li><strong>大体的数据显示，所有的立直中三分之二的立直都是两面听牌。</strong>为了不铳两面听牌的理论就叫做“筋”。</li>
<li>6 个基本筋、3 条筋</li>
</ul>
<h4 id="防守-4筋2">防守 4—筋(2)</h4>
<ul>
<li><p>远筋（半筋）</p>
<p><a href="https://imgse.com/i/ppwcJT1"><img
src="https://s1.ax1x.com/2023/03/23/ppwcJT1.png"
alt="ppwcJT1.png" /></a></p></li>
<li><p>相对安全的筋：</p>
<ul>
<li>老头牌没听边张和嵌张听牌型，所以要比其他的筋更安全。</li>
<li>宝牌周边的牌，即使是筋牌也是危险的。筋牌引挂的立直还是比较多的。</li>
</ul></li>
</ul>
<h4 id="防守-5壁">防守 5—壁</h4>
<ol type="1">
<li><p>No Chance：</p>
<p><a href="https://imgse.com/i/ppwggb9"><img
src="https://s1.ax1x.com/2023/03/23/ppwggb9.png"
alt="ppwggb9.png" /></a></p></li>
<li><p>One Chance：one chance
在早巡是可信的，但在终盘千万不要信。</p></li>
<li><p>双重 one chance：<strong>no chance &gt; 双重 one chance &gt;&gt;
one chance</strong></p></li>
</ol>
<h4 id="防守-6弃和的切牌顺序1">防守 6—弃和的切牌顺序(1)</h4>
<ol type="1">
<li>弃和的基本思路：从安全度高地牌开始切。</li>
<li>现物的优先度：将来可能有危险的牌先切，有多张现物的时候，应该保留共同的安全牌。</li>
</ol>
<h4 id="防守-7弃和的切牌顺序2">防守 7—弃和的切牌顺序(2)</h4>
<ol type="1">
<li>地狱单骑。</li>
<li>只有双碰和单骑才能和的牌：
<ul>
<li>字牌，有筋的老头牌，以及 no chance 都是这样的牌。</li>
<li>要是场上已经切除一张的话，双碰的可能性就比较小了，还是比较安全的。</li>
<li>双碰役牌能够有一翻，因此要尽量晚切。</li>
</ul></li>
<li>两面听牌不可能和的牌：筋牌、或者是有壁的 <span
class="math inline">\(\operatorname{2\sim8}\)</span>
尽可能的选择切掉双碰可能性不大的听牌。</li>
<li>棘手的情况：
<ul>
<li>切貌似能通过的牌：早外、one chance 等。</li>
<li>切即使铳了点数也不高的牌：幺九牌不点断幺，不切 dora 及其周边。</li>
<li>拆对子、拆暗刻：打一过二和打一过三。</li>
</ul></li>
</ol>
<h4 id="防守-8弃和的切牌顺序3">防守 8—弃和的切牌顺序(3)</h4>
<p>距离立直宣言牌越远的那张数牌的外筋是安全的。</p>
<h4 id="防守-9兜牌">防守 9—兜牌</h4>
<p>兜牌即一边扣住危险牌，一边向着和牌或者是听牌前进的打法。</p>
<p>一般情况下，对手立直之后：</p>
<ol type="1">
<li>自己没有听牌也要向着听牌或者和牌前进。</li>
<li>如果对日对自己不利的话。即使自己听牌也会拆掉手牌。</li>
</ol>
<p>具体方法：</p>
<ol type="1">
<li>拆对子</li>
<li>拆搭子</li>
<li>拆暗刻</li>
<li>七对子</li>
</ol>
<p>兜牌需要注意的地方：要能“兜”，不忘记防守的基本是“弃和”。</p>
<h4 id="防守-10副露的防守">防守 10—副露的防守</h4>
<ol type="1">
<li>首先是读听牌：
<ul>
<li><strong>三副露可以视作听牌</strong></li>
<li><strong>所染手的牌出现溢出多半已听牌</strong></li>
<li>所切牌看起来很恐怖的话多半已经听牌</li>
<li>反复的毫不犹豫地摸切也是听牌的迹象</li>
</ul></li>
<li>推测打点高还是低</li>
<li>危险牌是哪些？注意特殊役种以及后付的概率。</li>
</ol>
<h4 id="防守-11扣牌1">防守 11—扣牌(1)</h4>
<ol type="1">
<li>扣牌的意义：通过扣牌，可以防止对手听牌，进而防止对手和牌。</li>
<li>扣牌的缺点：拿着与自己手牌无关的牌，会导致自己听牌速度减慢。</li>
<li>应该扣牌的情况：
<ul>
<li>对手已经鸣牌</li>
<li>对手的点数对你构成威胁</li>
<li>确定是对手的危险牌，不要在序盘就开始扣牌</li>
<li>自己是扣牌对象的上家的时候</li>
</ul></li>
</ol>
<h4 id="防守-12扣牌2">防守 12—扣牌(2)</h4>
<h5 id="具体情况">具体情况</h5>
<ol type="1">
<li>下家染手</li>
<li>后付的字牌</li>
<li>攻守兼备的扣牌</li>
</ol>
<h4 id="防守-13不放铳的打法">防守 13—不放铳的打法</h4>
<ol type="1">
<li>留下安全牌（留安）</li>
<li>选择安全的牌切</li>
<li>穴熊战术（配牌弃和）</li>
</ol>
<h4 id="防守-14立直的读牌一">防守 14—立直的读牌(一)</h4>
<p>读牌读“牌的危险度”和“牌的安全度”。对于有一定舍牌特征的立直，能够把握“危险的牌”和“相当安全的牌”才是真正的读牌。</p>
<p>几个“危险度比较高的牌”的例子：</p>
<ul>
<li><p>五的里筋：<strong>正是因为早巡切了利用价值很高的数牌 <span
class="math inline">\(\operatorname{5}\)</span>，
所以不难想象，他手牌里有 <span
class="math inline">\(\operatorname{23}\)</span> 或者 <span
class="math inline">\(\operatorname{78}\)</span>
的搭子。</strong></p></li>
<li><p>间四间：</p>
<p><a href="https://imgse.com/i/ppwzsxO"><img
src="https://s1.ax1x.com/2023/03/23/ppwzsxO.png"
alt="ppwzsxO.png" /></a></p>
<p>“<strong>早巡切掉</strong>”是关键词。</p></li>
<li><p>被拆掉的两面搭子的里筋：拆掉两面搭子的立直，要小心其二度进张。</p></li>
<li><p>拆掉嵌张搭子的立直的跨筋。</p></li>
</ul>
<h4 id="防守-15立直的读牌2">防守 15—立直的读牌(2)</h4>
<ol type="1">
<li>安全牌前的跨筋：切掉安全牌的立直，是由两个固定的两面搭子来的，几乎不会有双碰进张。</li>
<li>逆切的跨筋：拆掉嵌张搭子的立直，逆切的筋牌安全度较高。</li>
<li>双碰、嵌张的否定</li>
</ol>
<h3 id="第八章状况判断">第八章:状况判断</h3>
<h4 id="状况判断-1状况判断的基本">状况判断 1—状况判断的基本</h4>
<ol type="1">
<li>两个状况：场况、点棒状况。</li>
<li>状况和战略</li>
</ol>
<h4 id="状况判断-2要有顺位意识">状况判断 2—要有顺位意识</h4>
<h4 id="状况判断-3状况与做牌1">状况判断 3—状况与做牌(1)</h4>
<h5 id="考虑巡目">考虑巡目</h5>
<ol type="1">
<li>以舍牌排数分类：
<ul>
<li>序盘（<span class="math inline">\(1\)</span>～<span
class="math inline">\(6\)</span>）</li>
<li>中盘（<span class="math inline">\(7\)</span>～<span
class="math inline">\(12\)</span>）</li>
<li>终盘（<span class="math inline">\(13\)</span>～<span
class="math inline">\(18\)</span>）</li>
</ul></li>
<li>基本想法：
<ul>
<li>序盘追求手役的可能性，追求好形。</li>
<li>中盘首先考虑听牌，根据自己的手牌同时为他家的进攻做准备。</li>
<li>到了终盘自己的手牌没有战斗力就要重视防守了。</li>
</ul></li>
</ol>
<h4 id="状况判断-4状况与做牌2">状况判断 4—状况与做牌(2)</h4>
<h5 id="考虑场况">考虑场况</h5>
<ol type="1">
<li>对比较薄的牌的对应</li>
<li>对较强的花色要有意识</li>
<li>副露的对应</li>
</ol>
<h4 id="状况判断-5状况与做牌3">状况判断 5—状况与做牌(3)</h4>
<h5 id="考虑点棒">考虑点棒</h5>
<p>原点以下注重打点，原点以上注重速度。</p>
<ol type="1">
<li>提高打点：
<ul>
<li>门清立直</li>
<li>dora</li>
<li>染手</li>
<li>自己的目标是亲家时，以打点为重是基础。</li>
</ul></li>
<li>提高速度：
<ul>
<li>提高副露断幺的意识。</li>
</ul></li>
</ol>
<h4 id="状况判断-6状况与立直判断">状况判断 6—状况与立直判断</h4>
<ol type="1">
<li>应该立直的牌默听：
<ul>
<li>山越的宝字牌单骑</li>
<li>立直家的现物</li>
</ul></li>
<li>南场的立直判断。</li>
</ol>
<h4 id="状况判断-7all-last-的战术一">状况判断 7—ALL LAST 的战术(一)</h4>
<ol type="1">
<li><p>自摸缩小的点差：</p>
<p><a href="https://imgse.com/i/ppcdTc8"><img
src="https://s1.ax1x.com/2023/03/29/ppcdTc8.png"
alt="ppcdTc8.png" /></a></p>
<ul>
<li><p>1300/2600 比较常见。</p></li>
<li><p><strong>要注意“满贯自摸的逆转圈内”迎来
AL，或者在“满贯自摸的逆转圈 外”迎来 AL。</strong></p></li>
</ul></li>
<li><p>逆转的做牌：</p>
<ul>
<li>处于下位（4&amp;部分3）追求速度很难逆转有机会可以去做大牌。</li>
<li>处于上位（部分3&amp;2）尽量追求速度能逆转就行。</li>
</ul></li>
<li><p>鸣牌判断：和牌就能够 TOP
的情况，只要重视速度就好了。后附，食断都可以。</p></li>
</ol>
<h4 id="状况判断-8all-last-的战术二">状况判断 8—ALL LAST 的战术(二)</h4>
<h5 id="al-的立直判断">AL 的立直判断</h5>
<ol type="1">
<li>AL 自己 TOP
有役听牌应该默听。如果别人的牌只是没什么翻盘机会的食断的话，有时候有役也可以立，铳了也没关系。不过这样的话就要有被第二位满贯直击也无法逆转的点差。</li>
<li>一发中里宝或者自摸中1里宝就能够逆转的状况的话，即立是正确的。 特别是
3900点 以内的点差，默听是损失非常大的打法。</li>
<li>太过于期待苛刻的条件也是需要禁止的。</li>
</ol>
<h4 id="状况判断-9all-last-的战术三">状况判断 9—ALL LAST 的战术(三)</h4>
<ol type="1">
<li>难以逆转可以考虑拒听防守。</li>
<li>自摸或直击即逆转的情况下旁击可以考虑见逃。</li>
<li>电报</li>
</ol>
<h3 id="第九章攻守判断">第九章:攻守判断</h3>
<h4 id="攻守判断-1攻守判断的原则">攻守判断 1—攻守判断的原则</h4>
<ol type="1">
<li>不要以结果判断好坏：<strong>对结果论说不！</strong></li>
<li>要有目的意识。</li>
<li>设定自己的标准。</li>
</ol>
<h4 id="攻守判断-2判断材料">攻守判断 2—判断材料</h4>
<ol type="1">
<li>自己和牌的容易度：有机会和出的牌就进攻，这是攻守判断基本中的基本。</li>
<li>打点</li>
<li>牌的危险度</li>
<li>推测对手的打点：由于副露的打点容易被看透，所估计出来的打点也要成为攻守判断的材料。立直的不确定因素太多，除了有杠等特殊情况之外，主要还是看对手是亲家，还是子家。</li>
<li>弃和的成功率</li>
</ol>
<h4 id="攻守判断-3攻守判断的标准">攻守判断 3—攻守判断的标准</h4>
<p><span style="font-size: 2em; font-weight: bold;">Reference</span></p>
<ol type="1">
<li>79博客-目录书签跳转版.pdf</li>
<li>Seventh9先生の麻雀教室(改二).pdf</li>
<li>部分图片来自于B站UP主 星野Poteto：<a
href="https://space.bilibili.com/303003611/lists/622694">合集·(大概)很好懂的牌效率</a></li>
</ol>
]]></content>
      <categories>
        <category>日本麻将</category>
      </categories>
      <tags>
        <tag>日本麻将</tag>
        <tag>立直麻将</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown标记语言入门</title>
    <url>/Markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="markdown标记语言入门">Markdown标记语言入门</h2>
<h3 id="一什么是-markdown">一、什么是 Markdown：</h3>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
是一种轻量级标记语言，由约翰·格鲁伯（John Gruber）于 <span
class="math inline">\(2004\)</span> 年创立。<span
class="math inline">\(2017\)</span> 年，GitHub 发布了基于 CommonMark 的
Github Flavored Markdown（<a
href="https://github.github.com/gfm/">GFM</a>）的正式规范。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>约翰·格鲁伯对于
Markdown 的定义是：</p>
<blockquote>
<p><a href="https://daringfireball.net/projects/markdown/">Markdown is a
text-to-HTML conversion tool for web writers. Markdown allows you to
write using an easy-to-read, easy-to-write plain text format, then
convert it to structurally valid XHTML (or HTML).</a></p>
<p>Markdown 是面向 Web作家 的文本到 HTML 转换工具。Markdown
允许您使用易于阅读，易于编写的纯文本格式进行编写，然后将其转换为结构上有效的
XHTML（或HTML）。</p>
</blockquote>
<span id="more"></span>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
的目标是实现「易读易写」，能够通过简单的标记语法，使普通的文本内容具有一定的格式。<strong>标记语法</strong>即通过一系列的控制字符，使得<strong>写作本身</strong>与<strong>排版的细节</strong>相分离。因此
Markdown
能够让你双手不离开键盘的情况下（只是使用键盘，而不用鼠标或触屏），实现给文本<strong>加粗</strong>，区别各级标题，引用格式，插入图片、链接、表格、数学公式等等功能。例如：<strong>加粗</strong>、<em>倾斜</em>、<del>删除线</del></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>分离写作和排版还会带来一个意想不到的好处：你可以轻松地、迅速地把文档转换成另一个主题，或者
<em>另一个样式</em>。</p>
<h3 id="二markdown-能干什么">二、Markdown 能干什么：</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>作为一种为写作而生的语言，它在日常写作方面几乎可以代替
MS Word。你可以用 Markdown：</p>
<ul>
<li>写文章</li>
<li>记笔记</li>
<li>写 Blog</li>
<li>写书</li>
<li>甚至……写论文</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>由于 Markdown
也是一种适用于网络的书写语言，很多知名的网站都支持用 Markdown 写作：</p>
<ul>
<li>简书</li>
<li>洛谷，国内著名 OJ</li>
<li>马克飞象，印象笔记的一款工具</li>
<li>GitHub，全球最大的<del>同性</del>程序员交友网站</li>
<li>Reddit，知名的娱乐、社交及新闻网站</li>
<li>Gitbook，写作网站</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>同时，本文就用 Markown
写作。</p>
<h3 id="三markdown-的优缺点">三、Markdown 的优缺点：</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>任何事物都具有两面性，虽然
Markdown 的优点不少，但是它还是具有一定的缺陷。</p>
<h4 id="一优点">（一）、优点：</h4>
<ol type="1">
<li><p><strong>标准化</strong>：我们都有这种体验，一份 Word
文档，在自己电脑上看还好好的，但是发给他人就乱码了，这多半是由于两个软件平台编码格式不一致导致的。而
Markdown
不存在这样的问题，使用正式规范的编码对文本进行的格式化，在任何支持
Markdown 的平台，都能正常显示。</p>
<blockquote>
<p>由于平台显示形态可能不一样，比如标题的颜色、引用线粗细等会不太一样，因此要忠实重现文本，最好用
PDF 版本进行文件的传阅。</p>
</blockquote></li>
<li><p><strong>轻量化</strong>：纯文本的 Markdown
文档像记事本一样的快速，简洁，不用因为想写一个小文档，打开了笨重达 <span
class="math inline">\(2GB\)</span> 的 MS
Word。并且易于学习，新手学习没有门槛，入门简单、熟练快速。</p></li>
<li><p><strong>易于排版</strong>：可以快速实现文字的排版。只通过键盘输入即可实现排版，不用另外操作排版，可以让作者摆脱排版的困扰，专心写作。不用像用
MS Word 一样一边写一边（凭感觉）排版, 甚至打乱了你写作的节奏。</p></li>
<li><p><strong>一次编辑多次多平台使用</strong>：因为是纯文本，只要支持
Markdown
的地方都能获得相同的排版效果，不需要重复排版。同时它可在多种平台上获得支持，不像在很多地方并不支持
.doc 和 .docx 格式， 或者支持较弱。 比如 Linux、Mac OS、
笔记应用，以及绝大部分网站。并且很多 MarkDown
编辑器都支持直接将文本转换为 PDF、Word、HTML 等格式。</p></li>
</ol>
<h4 id="二缺点">（二）、缺点：</h4>
<ol type="1">
<li><strong>需要记一些语法</strong>。</li>
<li><strong>难以进行高级排版</strong>：由于很多复杂的排版无法实现，只适用于普通排版要求的文档。</li>
<li><strong>可能令人分心</strong>：由于严格的标准化，在书写 Markdown
文档的时候通常会非常注意格式排版，比如：中英文标点符号，空格，列表的插入与退出等。</li>
</ol>
<h3 id="四markdown-的语法">四、Markdown 的语法：</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>看完前面的介绍，大家有没有跃跃欲试的感觉呢？那么接下来我们就来学习一下
Markdown 的基本语法！</p>
<h4 id="一段落与换行">（一）、段落与换行：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>一个 Markdown
段落是由一个或多个连续的文本行组成，它的前后要有一个以上的<strong>空行</strong>。普通的
Markdown
段落不可以用空格或制表符来缩进。（所以这个段落前的空白怎么做到的呢？那就是
<span class="math inline">\(\LaTeX\)</span>
的妙用喽！详细请参照下面<strong>内联公式</strong>部分。）</p>
<blockquote>
<p>空行：一行之内只包含回车换行、空格、制表符。</p>
</blockquote>
<h4 id="二标题">（二）、标题：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
的标题是在行首插入 <span class="math inline">\(1\)</span> 到 <span
class="math inline">\(6\)</span> 个 #，#
和标题文字之间使用一个或多个空格，对应到标题 <span
class="math inline">\(1\)</span> 到 <span
class="math inline">\(6\)</span>
级。第一级和第二级的标题后自带分割线。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是 H1</span></span><br><span class="line"><span class="section">## 这是 H2</span></span><br><span class="line"><span class="section">### 这是 H3</span></span><br><span class="line"><span class="section">#### 这是 H4</span></span><br><span class="line"><span class="section">##### 这是 H5</span></span><br><span class="line"><span class="section">###### 这是 H6</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<p><a href="https://imgchr.com/i/ye1QL8"><img
src="https://s3.ax1x.com/2021/02/01/ye1QL8.png"
alt="ye1QL8.png" /></a></p>
<h4 id="三文字的修饰">（三）、文字的修饰：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown 使用星号（ *
）和底线（ _ ）作为修饰字词的符号，被 * 或 _ 包围的字词会被转成用
<code>&lt;em&gt;</code> 标签包围（即<em>斜体</em>），用两个 * 或 _
包起来的话，则会被转成
<code>&lt;strong&gt;</code>（即<strong>粗体</strong>）。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*单星号斜体*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_单下划线斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**双引号加粗**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__双下划线加粗__</span></span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<p><em>单星号斜体</em></p>
<p><em>单下划线斜体</em></p>
<p><strong>双星号加粗</strong></p>
<p><strong>双下划线加粗</strong></p>
<p><del>删除线</del></p>
<p><span class="math inline">\(\qquad\!\!\)</span>但是如果你的 * 和 _
两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（）（参见下面的<strong>反斜杠</strong>部分）。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用反斜线开头的\<span class="emphasis">*被当做是普通的字符\*</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<p>使用反斜线开头的*被当做是普通的字符*</p>
<h4 id="四代码块">（四）、代码块：</h4>
<ol type="1">
<li><h5 id="小块代码">小块代码：</h5>
<p><span
class="math inline">\(\qquad\!\!\)</span>需要引用代码时，如果引用的语句只有一段，不分行，可以用
` 将语句包起来。</p>
<blockquote>
<p>如果你真的要打这个字符的话，可以仿照和 * 这个字符一样的处理方式，在 `
前加一个反斜杠。</p>
</blockquote>
<p><strong>例如</strong>：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`#include&lt;iostream&gt;`</span></span><br></pre></td></tr></table></figure></p>
<p><strong>效果</strong>：</p>
<p><code>#include&lt;iostream&gt;</code></p></li>
<li><h5 id="大块代码">大块代码：</h5>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
建立代码块的方法：将 ``` 置于这段代码的首行和末行，独立成一行。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>第一行的 ```
后面可以加上语言名称，例如 cpp、java、c、pascal 等（不要写成 c++
）。</p>
<p><strong>例如</strong>：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```cpp</span></span><br><span class="line"><span class="code">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="code">int a,b;</span></span><br><span class="line"><span class="code">int main()</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">	std::cin&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line"><span class="code">	std::cout&lt;&lt;a+b&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="code">	return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure></p>
<p><strong>效果</strong>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	std::cout&lt;&lt;a+b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<h4 id="五区块引用">（五）、区块引用：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
标记区块引用的方法是在行的最前面加 &gt;
，也可以只在整个段落的第一行最前面加上
&gt;，区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;
即可，引用的区块内也可以使用其他的 Markdown
语法，包括标题、列表、代码区块等。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Markdown 标记区块引用的方法是在行的最前面加&gt;</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 也可以只在整个段落的第一行最前面加上 &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; 区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可.</span></span><br><span class="line"><span class="quote">&gt; &gt; </span></span><br><span class="line"><span class="quote">&gt; &gt; <span class="emphasis">*我是内部嵌套区块，我可以使用其他 Markdown 语法哦*</span></span></span><br><span class="line"><span class="quote">&gt; &gt; </span></span><br><span class="line"><span class="quote">&gt; &gt; ### 我是引用区块内使用标题3语法</span></span><br><span class="line"><span class="quote">&gt; &gt; ```java</span></span><br><span class="line"><span class="quote">&gt; &gt;       //在引用区块内可以加入代码块</span></span><br><span class="line"><span class="quote">&gt; &gt;       import java.net.URL;</span></span><br><span class="line"><span class="quote">&gt; &gt;       import java.util.Arrays;</span></span><br><span class="line"><span class="quote">&gt; &gt;       import java.util.Date;</span></span><br><span class="line"><span class="quote">&gt; &gt;       import java.util.Set;</span></span><br><span class="line"><span class="quote">&gt; &gt; ```</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<blockquote>
<p>Markdown 标记区块引用的方法是在行的最前面加&gt;</p>
<p>也可以只在整个段落的第一行最前面加上 &gt; &gt;
区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可. &gt; &gt;
<em>我是内部嵌套区块，我可以使用其他 Markdown 语法哦</em> &gt; &gt; ###
我是引用区块内使用标题3语法 &gt; <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在引用区块内可以加入代码块</span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="六列表">（六）、列表：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
支持有序列表和无序列表，无序列表使用星号、加号或是减号作为列表标记，有序列表则使用数字接着一个英文句点。两种列表方式格式都是：列表标记+空格+列表项，即列表项目标记通常是放在最左边，也可以缩进最多
<span class="math inline">\(3\)</span>
个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>列表能够支持通过换行自动延续、列表内嵌套列表、列表内使用其它
Markdown 语法等功能。</p>
<ol type="1">
<li><h5 id="无序列表">无序列表：</h5>
<p><span
class="math inline">\(\qquad\!\!\)</span>星号、加号或是减号三种列表方式效果等同。</p>
<p><strong>例如</strong>：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span>   Red</span><br><span class="line"><span class="bullet">+</span>   Green</span><br><span class="line"><span class="bullet">+</span>   Blue</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span>   Red</span><br><span class="line"><span class="bullet">-</span>   Green</span><br><span class="line"><span class="bullet">-</span>   Blue</span><br></pre></td></tr></table></figure></p>
<p><strong>效果均为</strong>：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul></li>
<li><h5
id="有序列表其实现在就在一个有序列表当中">有序列表：（其实现在就在一个有序列表当中……）</h5>
<p><span
class="math inline">\(\qquad\!\!\)</span>有序列表则使用数字接着一个英文句点。</p>
<p><strong>例如</strong>：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>  Red</span><br><span class="line"><span class="bullet">2.</span>  Green</span><br><span class="line"><span class="bullet">3.</span>  Blue</span><br></pre></td></tr></table></figure></p>
<p><strong>效果</strong>：</p>
<ol type="1">
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ol></li>
</ol>
<h4 id="七行内链接">（七）、行内链接：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的
title 文字，只要在网址后面，用双引号把 title 文字包起来即可。</p>
<p><strong>形如</strong>：<code>[an example](http://example.com/ "title")</code></p>
<ul>
<li><p><code>an example</code> 是想显示出的文字</p></li>
<li><p><code>http://example.com/</code> 是网站链接,
也可以是本机路径</p></li>
<li><p><code>"title"</code> 是把鼠标放在这个链接上时显示的文本</p>
<ul>
<li>相信你也发现了这个东西似乎没什么用。所以, 这部分是可选的</li>
<li>对于印刷品，这并没有什么用</li>
</ul></li>
</ul>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 [<span class="string">百度</span>](<span class="link">http://www.baidu.com/</span>) 内联方式。</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<p>这是 <a href="http://www.baidu.com/">百度</a> 内联方式。</p>
<h4 id="八图片">（八）、图片：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
使用一种和链接很相似的语法来标记图片，一个惊叹号
!，接着一个方括号，里面放上图片的替代文字（这些文字将在图片加载失败的时候显示），接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的
title 文字。</p>
<p><strong>形如</strong>：<code>![lable](picture path "title")</code></p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">YuYl5V.jpg</span>](<span class="link">https://s1.ax1x.com/2020/05/08/YuYl5V.jpg</span>)</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<figure>
<img src="https://s1.ax1x.com/2020/05/08/YuYl5V.jpg" alt="YuYl5V.jpg" />
<figcaption aria-hidden="true">YuYl5V.jpg</figcaption>
</figure>
<center>
我的电脑桌面啦
</center>
<h4 id="九自动链接">（九）、自动链接：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来，
Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<p><a href="https://www.baidu.com"
class="uri">https://www.baidu.com</a></p>
<h4 id="十表格">（十）、表格：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>表格是 GFM 对 Markdown
原规范的扩展，但几乎所有的编辑器都支持这一语法。表格由两部分组成：表头和内容。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| Items          | Price      | Description               |</span><br><span class="line">| -              | :--:       | -:                        |</span><br><span class="line">| T-Shirt        | £9.15      | Suggested in the NCEE     |</span><br><span class="line">| Uniform in H3Z | about ¥100 | design beyond description |</span><br><span class="line">| left aligned   | centered   | right aligned             |</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<table>
<thead>
<tr>
<th>Items</th>
<th style="text-align: center;">Price</th>
<th style="text-align: right;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>T-Shirt</td>
<td style="text-align: center;">£9.15</td>
<td style="text-align: right;">Suggested in the NCEE</td>
</tr>
<tr>
<td>Uniform in H3Z</td>
<td style="text-align: center;">about ¥100</td>
<td style="text-align: right;">design beyond description</td>
</tr>
<tr>
<td>left aligned</td>
<td style="text-align: center;">centered</td>
<td style="text-align: right;">right aligned</td>
</tr>
</tbody>
</table>
<p><span class="math inline">\(\qquad\!\!\)</span>上面的分隔符是 |，
也就是 Backspace 和 Enter 中间的键。</p>
<ul>
<li>表头（也就是第一行）是必选的</li>
<li>第二行声明了表格。每格中 - 至少一个， 不过也可以是连续的多个，
没有影响
<ul>
<li>每格中两边的 : 代表对齐方式
<ol type="1">
<li>:- 或者 - 左对齐</li>
<li>:-: 居中对齐</li>
<li>-: 右对齐</li>
</ol></li>
</ul></li>
<li>之后的每一行就是表格的具体内容</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>美观起见，你可以在每一格的文字两边加入若干空格，但没有影响。每一格的文字都可以为空（包括表头），只需有两边的
| 即可，这时表格中的这一格也会为空。</p>
<h4 id="十一分隔线">（十一）、分隔线：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他内容。也可以在星号或是减号中间插入空格。</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> * *</span><br><span class="line"></span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- - -</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---------------------------------------</span></span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<hr />
<hr />
<hr />
<hr />
<hr />
<h4 id="十二反斜杠">（十二）、反斜杠：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用<code>&lt;em&gt;</code>标签倾斜），你可以在星号的前面加上反斜杠。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>Markdown
支持以下这些符号前面加上反斜杠来帮助插入普通的符号。加上反斜杠后，这些符号都会以原来的方式显示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*</span>   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+</span>   加号</span><br><span class="line"><span class="bullet">-</span>   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>
<h4 id="十三嵌入-html">（十三）、嵌入 HTML：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>根据 Markdown
的定义或者说原理可知：Markdown 渲染就是把它翻译成 HTML。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>那么, 我们可不可以在
Markdown 中直接使用 HTML 呢? 答案是肯定的。有能力的同学, 可以在写的
Markdown 文档中加入 HTML 代码，来实现一些 Markdown
本身无法实现的功能。</p>
<p><strong>例如</strong>：上文图片下面的那句居中的话：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> 我的电脑桌面啦 <span class="language-xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<center>
我的电脑桌面啦
</center>
<blockquote>
<p>不过，必须用 HTML 的地方其实很少。而且很多都可以用内联的 <span
class="math inline">\(\LaTeX\)</span> 代替。</p>
</blockquote>
<p><span
class="math inline">\(\qquad\!\!\)</span>比如，在表格中实现换行：</p>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//HTML 实现换行：</span><br><span class="line">| Header1 | Header2                          |</span><br><span class="line">|---------|----------------------------------|</span><br><span class="line">| item 1  | 1. one<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>2. two<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>3. three |</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：</p>
<table>
<thead>
<tr>
<th>Header1</th>
<th>Header2</th>
</tr>
</thead>
<tbody>
<tr>
<td>item 1</td>
<td>1. one<br />2. two<br />3. three</td>
</tr>
</tbody>
</table>
<p><strong>例如</strong>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//LaTeX 实现换行：</span><br><span class="line">| Header1 | Header2                          |</span><br><span class="line">|---------|----------------------------------|</span><br><span class="line">| item 1  | $ 1. one \\ 2. two \\ 3. three $ |</span><br></pre></td></tr></table></figure>
<p><strong>效果</strong>：（大家有没有觉得用 <span
class="math inline">\(\LaTeX\)</span>
不仅仅能够换行，而且渲染出来的数字和英文更美观了呢？）</p>
<table>
<thead>
<tr>
<th>Header1</th>
<th>Header2</th>
</tr>
</thead>
<tbody>
<tr>
<td>item 1</td>
<td>$ 1. one \ 2. two \ 3. three $</td>
</tr>
</tbody>
</table>
<h3 id="五latex-公式">五、<span class="math inline">\(\LaTeX\)</span>
公式：</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>前文中多次提到了一个词：<span
class="math inline">\(\LaTeX\)</span>，相信大家一定对它已经有所好奇，那么它究竟是什么呢？应该如何使用呢？</p>
<h4 id="一latex-简介">（一）、<span
class="math inline">\(\LaTeX\)</span> 简介：</h4>
<p><span class="math inline">\(\qquad\!\!\TeX\)</span>
是一个由美国计算机教授高德纳编写的功能强大的排版软件，而为了让使用者可以更为方便的使用
<span
class="math inline">\(\TeX\)</span>的强大功能，美国计算机科学家莱斯利·兰伯特在
<span class="math inline">\(20\)</span> 世纪 <span
class="math inline">\(80\)</span> 年代初期开发了一种基于 <span
class="math inline">\(\TeX\)</span> 的排版系统—— <span
class="math inline">\(\LaTeX\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span> <span
class="math inline">\(\LaTeX\)</span> 是当今世界上最流行和使用最为广泛的
<span class="math inline">\(\TeX\)</span> 宏集。使用 <span
class="math inline">\(\LaTeX\)</span>
基本上不需要使用者自己设计命令和宏等，因为 <span
class="math inline">\(\LaTeX\)</span>
已经替你做好了。因此，即使使用者并不是很了解 <span
class="math inline">\(\TeX\)</span>，也可以在短短的时间内生成高质量的文档。<strong>而对于生成复杂的数学公式，<span
class="math inline">\(\LaTeX\)</span> 表现的更为出色</strong>。</p>
<p><span
class="math inline">\(\qquad\!\LaTeX\)</span>作为一门能<strong>生成媲美书籍的质量的文章</strong>的语言，和
Markdown
一样可以用来写作，但是这里和这篇文章无关，就不再过多介绍了。不过有兴趣的同学可以参考
Reference 中的 <span class="math inline">\({}^5\)</span> 自行学习。</p>
<h4 id="二内联公式">（二）、内联公式：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>虽然 <span
class="math inline">\(\LaTeX\)</span>
作为一门独立的排版系统，但是它的行内数学公式却可以在 Markdown
中作为内联公式所存在。就我个人而言，如此喜欢使用
Markdown，与能够生成复杂、漂亮的数学公式的内联公式密不可分。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>在 Markdown
文档中，将数学公式写在两个 $ 之间，便代表插入了行内数学公式。</p>
<h4 id="三部分语法">（三）、部分语法：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>由于 <span
class="math inline">\(\LaTeX\)</span>
的功能十分强大，支持的公式类型也极其之多，在这里仅仅介绍一部分我个人认为比较常用的语法，其它更多可参考
Reference 中的 <span class="math inline">\({}^6\)</span> 自行学习。</p>
<ol type="1">
<li><p>上标下标：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$a^2 a<span class="emphasis">_2 a^&#123;2+2&#125; a_</span>&#123;i,j&#125; a^2<span class="emphasis">_2 &#123;&#125;^2_</span>1\!X^3<span class="emphasis">_4$</span></span><br><span class="line"><span class="emphasis">// \!的作用在下面空格一栏有讲述。</span></span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(a^2 \ \ a_2 \ \ a^{2+2} \ \ a_{i,j} \ \
a^2_2 \ \ {}^2_1\!X^3_4\)</span></p></li>
<li><p>根号：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\surd \sqrt&#123;2&#125; \sqrt[n]&#123;&#125; \sqrt[n]&#123;x&#125;$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\surd \ \ \sqrt{2} \ \ \sqrt[n]{} \ \
\sqrt[n]{x}\)</span></p></li>
<li><p>运算符、巨运算符：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$+ - \pm \mp \times \div$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(+ \ \ - \ \ \pm \ \ \mp \ \ \times \ \
\div\)</span></p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\sum<span class="emphasis">_&#123;i=1&#125;^na_</span>i \sum\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i$</span><br><span class="line">// 求 a<span class="emphasis">_1+……+a_</span>n</span><br><span class="line">$\prod<span class="emphasis">_&#123;i=1&#125;^na_</span>i \prod\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i$</span><br><span class="line">// 求 a<span class="emphasis">_1*……*a_</span>n</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\sum_{i=1}^na_i \ \
\sum\limits_{i=1}^na_i \ \ \prod_{i=1}^na_i \ \
\prod\limits_{i=1}^na_i\)</span></p></li>
<li><p>分数、百分数：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\frac&#123;1&#125;&#123;2&#125;=0.5 \tfrac&#123;1&#125;&#123;2&#125;=0.5 \dfrac&#123;1&#125;&#123;2&#125;=0.5$</span><br><span class="line">$\dfrac&#123;1&#125;&#123;x+\dfrac&#123;3&#125;&#123;y+\dfrac&#123;1&#125;&#123;5&#125;&#125;&#125;$</span><br><span class="line">// 从美观的角度来看，我通常使用 \dfrac&#123;&#125;&#123;&#125; 作为分数</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\frac{1}{2}=0.5 \ \ \tfrac{1}{2}=0.5 \ \
\dfrac{1}{2}=0.5 \ \
\dfrac{1}{x+\dfrac{3}{y+\dfrac{1}{5}}}\)</span></p></li>
<li><p>标准函数：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\sin a \cos b \tan c \left\vert a \right\vert$</span><br><span class="line">$\min(x,y) \max(x,y) \gcd(m,n) \operatorname&#123;lcm&#125;(m,n)$</span><br><span class="line"> //未预先定义的标准函数，均可用 \operatorname&#123;&#125;() 的格式定义</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\sin a \ \ \cos b \ \ \tan c \ \
\left\vert a \right\vert \ \ \min(x,y) \ \ \max(x,y) \ \ \gcd(m,n) \ \
\operatorname{lcm}(m,n)\)</span></p></li>
<li><p>集合符号：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\&#123; \&#125; \emptyset \varnothing $</span><br></pre></td></tr></table></figure></p>
<p>${ }     $</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\in \notin \not\in \ni \not\ni$</span><br><span class="line">// \not 是在下一个字符上画斜杠。</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\in \ \ \notin \ \ \not\in \ \ \ni \ \
\not\ni\)</span></p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\cap \cup \complement<span class="emphasis">_U A$</span></span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\cap \ \ \cup \ \ \complement_U
A\)</span></p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\subset \supset \subseteqq \subsetneqq \supseteqq \supsetneqq$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\subset \ \ \supset \ \ \subseteqq \ \
\subsetneqq \ \ \supseteqq \ \ \supsetneqq\)</span></p></li>
<li><p>关系符号：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$= \ne \neq \equiv \not\equiv \approx$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(= \ \ \ne \ \ \neq \ \ \equiv \ \
\not\equiv \ \ \approx\)</span></p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$&lt; &gt; \leqslant \geqslant$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(&lt; \ \ &gt; \ \ \leqslant \ \
\geqslant\)</span></p></li>
<li><p>几何符号：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\parallel \perp \angle \sphericalangle \measuredangle 45^\circ$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\parallel \ \ \perp \ \ \angle \ \
\sphericalangle \ \ \measuredangle \ \ 45^\circ\)</span></p></li>
<li><p>逻辑符号：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\forall \exists \nexists \therefore \because \And \&amp;$</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\forall \ \ \exists \ \ \nexists \ \
\therefore \ \ \because \ \ \And \ \ \&amp;\)</span></p></li>
<li><p>希腊字母：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\alpha \beta \gamma \eta \theta \mu \pi \rho \omega \phi$</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\alpha \beta \gamma \eta \theta \mu \pi
\rho \omega \phi\)</span></p></li>
<li><p>空格和换行：</p>
<p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$x\!y \\ xy \\ x\,y \\ x\:y \\ x\;y \\ x\ y \\ x\quad y \\ x\qquad y$</span><br></pre></td></tr></table></figure></p>
<p><span class="math display">\[
\begin{align*}
x\!y &amp;宽度为-\dfrac{m}{6}\\ xy &amp;宽度为0\\ x\,y
&amp;宽度为\dfrac{m}{6}\\ x\:y &amp;宽度为\dfrac{2m}{9}\\ x\;y
&amp;宽度为\dfrac{5m}{18}\\ x\ y &amp;宽度为\dfrac{m}{3}\\ x\quad y
&amp;宽度为m\\ x\qquad y&amp;宽度为2m
\end{align*}
\]</span></p>
<blockquote>
<p>在文档中，段落前空两格大概是 <span
class="math inline">\(\dfrac{5m}{3}\)</span> 的宽度，所以在段首键入
<code>$\qquad\!\!$</code> 即可做到。</p>
</blockquote></li>
<li><p>其它：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\TeX \LaTeX$</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\TeX \ \ \LaTeX\)</span></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// 二项式系数</span><br><span class="line">$\dbinom&#123;n&#125;&#123;m&#125;=\dbinom&#123;n&#125;&#123;n-m&#125;=C<span class="emphasis">_n^m=C_</span>n^&#123;n-m&#125;$</span><br></pre></td></tr></table></figure>
<p><span
class="math inline">\(\dbinom{n}{m}=\dbinom{n}{n-m}=C_n^m=C_n^{n-m}\)</span></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// 方程组</span><br><span class="line">$\begin&#123;cases&#125;2x+9y-5z=10\\4x+20y+z=24\\x-\dfrac&#123;1&#125;&#123;2&#125;y+3z=8\end&#123;cases&#125;$</span><br></pre></td></tr></table></figure>
<p><span
class="math inline">\(\begin{cases}2x+9y-5z=10\\4x+20y+z=24\\x-\dfrac{1}{2}y+3z=8\end{cases}\)</span></p></li>
</ol>
<p><span
class="math inline">\(\qquad\!\!\)</span>虽然看起来挺多，但是其实还有颜色、字体更多的公式和符号的语法没有介绍，更多可参考
Reference 中的 <span class="math inline">\({}^6\)</span> 自行学习。</p>
<h3 id="六markdown-编辑器-typora">六、Markdown 编辑器 Typora：</h3>
<p><span class="math inline">\(\qquad\!\!\)</span>学会了 Markdown
的语法后，大家就可以在很多网站上进行相应的编辑。但是如果想在本地进行利用
Markdown 书写，并且导出为各种格式的文档，就需要一款 Markdown
编辑器。在众多的 Markdown 编辑器中，在这里推荐给大家一款相当好用的
Markdown 编辑器：Typora.</p>
<h4 id="一什么是-typora">（一）、什么是 Typora?</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Typora
是一款轻便、简洁、<strong>免费</strong>、轻量级的 Markdown
编辑器，它是一款跨平台的 Markdown 写作软件，具备写作 Markdown
的绝大部分功能，你可以在 Windows,Mac OS，甚至各大 Linux
发行版上使用它。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>作为一款
<strong>富文本的编辑模式 +</strong> <strong>Markdown 源格式</strong>
的编辑器，Typora
支持<strong>即时渲染</strong>技术，即<strong>“所见即所得”</strong>。我们可以像编辑
Word 文档一样流畅地编辑 Markdown 文档。这是 Typora 与其它各种 Markdown
编辑器最大的区别，不用像其它编辑器一样拥有繁重的工具栏以及必须分为左右两列：++
源码 ++|++ 显示 ++，十分便捷。</p>
<h4 id="二外观">（二）、外观：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>图标样式：</p>
<p><a
href="https://imgchr.com/i/yu4Oat"><img src="https://s3.ax1x.com/2021/02/02/yu4Oat.png" alt="yu4Oat.png" style="zoom:50%;" /></a></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>光是图标是不是就已经感觉非常简洁了呢？还有更加简洁的就是，其它的
Markdown 编辑器一般都有一个工具栏并且一半是编辑窗口，一半是预览窗口：<a
href="https://imgchr.com/i/yu50eA"><img
src="https://s3.ax1x.com/2021/02/02/yu50eA.png"
alt="yu50eA.png" /></a></p>
<p><span class="math inline">\(\qquad\!\!\)</span>但是 Typora 的窗口：<a
href="https://imgchr.com/i/yu5jm9"><img
src="https://s3.ax1x.com/2021/02/02/yu5jm9.png"
alt="yu5jm9.png" /></a></p>
<p>既不存在工具栏也仅仅为单独一个界面。</p>
<h4 id="三主题">（三）、主题：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>细心的同学们一定能注意到上面
Typora
页面顶部有一个<strong>主题</strong>菜单，选择后发现其中有五个不同的主题选项：Github,Newsprint,Night,Pixyll,Whitey.</p>
<p><a href="https://imgchr.com/i/yuIJ7n"><img
src="https://s3.ax1x.com/2021/02/02/yuIJ7n.png"
alt="yuIJ7n.png" /></a></p>
<p><span class="math inline">\(\qquad\!\!\)</span>这里放一张来自 Typora
官网的图片，从左到右依次为 Github,Newsprint,Night,Whitey
主题的页面。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>看到了这么几个主题，有没有想都体验一遍的冲动？不用着急，Typora
不仅仅支持这五个自带的主题，更支持定制化主题，开发者可以开发主题。如果你对
CSS 有所涉及，便能做出专属于自己的主题。</p>
<h4 id="四对于-markdown-的支持">（四）、对于 Markdown 的支持：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>除了仅仅支持普通的
Markdown 语法外，Typora 还有更加便捷的 Markdown 使用方式。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>首先是一些有关的设置：</p>
<blockquote>
<p>文件 <span class="math inline">\(\rightarrow\)</span> 偏好设置 <span
class="math inline">\(\rightarrow\)</span> Markdown</p>
</blockquote>
<p><a href="https://imgchr.com/i/yuor28"><img
src="https://s3.ax1x.com/2021/02/02/yuor28.png"
alt="yuor28.png" /></a></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>这些设置还是蛮重要的，否则内联公式
<span class="math inline">\(\LaTeX\)</span>、==高亮==
等扩展性的语法均无法使用。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>再者，以 Typora
较为突出的 表格、代码块、公式块 三个方面进行一下简单的介绍：</p>
<ol type="1">
<li><p>表格：</p>
<blockquote>
<p>ctrl+t / 鼠标右键 <span class="math inline">\(\rightarrow\)</span>
insert / 段落 <span class="math inline">\(\rightarrow\)</span> 表格</p>
</blockquote>
<p>然后它会出现让我们选择<strong>行列数</strong>的窗口，这样的话就不用十分麻烦地去敲
Markdown 中表格的语法了。</p>
<p><a href="https://imgchr.com/i/yuTSxO"><img
src="https://s3.ax1x.com/2021/02/02/yuTSxO.png"
alt="yuTSxO.png" /></a></p>
<p><span class="math inline">\(4\times4\)</span> 的表格：</p>
<p><a href="https://imgchr.com/i/yuozRK"><img
src="https://s3.ax1x.com/2021/02/02/yuozRK.png"
alt="yuozRK.png" /></a></p>
<p>但是这样就无法去编辑其格式无法控制对齐了啊？没事的，通过左上角的<strong>调整表格</strong>，轻松可以做到。</p></li>
<li><p>代码块：</p>
<blockquote>
<p>ctrl+shift+k / 鼠标右键 <span
class="math inline">\(\rightarrow\)</span> insert / 段落 <span
class="math inline">\(\rightarrow\)</span> 代码块</p>
</blockquote>
<p>Typora
可以通过你指定的语言来高亮代码，并且支持上百种语言，足够一般的用途。</p>
<p><a href="https://imgchr.com/i/yuT5TA"><img
src="https://s3.ax1x.com/2021/02/02/yuT5TA.png"
alt="yuT5TA.png" /></a></p></li>
<li><p>公式块：</p>
<blockquote>
<p>ctrl+shift+m / 鼠标右键 <span
class="math inline">\(\rightarrow\)</span> insert / 段落 <span
class="math inline">\(\rightarrow\)</span> 公式块</p>
</blockquote>
<p>Typora 不仅仅支持行内式，也支持行外的公式块。由于相当于处于 $$ 与 $$
之间，所以会被强制居中。这种十分大气的行外式特别适合巨运算符的书写：</p>
<p><a href="https://imgchr.com/i/yuHCEd"><img
src="https://s3.ax1x.com/2021/02/02/yuHCEd.png"
alt="yuHCEd.png" /></a></p></li>
</ol>
<blockquote>
<p>这三点不仅仅可以利用 Typora 自身的属性操作，别忘了也可以直接用
Markdown 的语法进行操作哦！</p>
</blockquote>
<h4 id="五专注模式与打字机模式">（五）、专注模式与打字机模式：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>Typora
同时支持两种写作模式：专注模式与打字机模式。</p>
<ol type="1">
<li><p>专注模式（Focus Mode）：</p>
<blockquote>
<p>F8 / 视图 <span class="math inline">\(\rightarrow\)</span>
专注模式</p>
</blockquote>
<p>在这个模式下，当你在编辑某一行文字的时候其他行会变成灰色。</p>
<p><a href="https://imgchr.com/i/yuvkdO"><img
src="https://s3.ax1x.com/2021/02/03/yuvkdO.png"
alt="yuvkdO.png" /></a></p>
<p>专注模式比较适合与全屏同时开启，连工具栏都不存在，自然简洁到超级舒服。</p></li>
<li><p>打字机模式：</p>
<blockquote>
<p>F9 / 视图 <span class="math inline">\(\rightarrow\)</span>
打字机模式</p>
</blockquote>
<p>在这个模式下，你的光标会始终处于屏幕中间，我们的眼光就能始终正对屏幕中央。就我个人来讲非常喜欢使用这个模式，不仅仅是因为不用动眼睛，更因为光标的自动换行能够更加便于仅键盘进行操作。</p>
<p><a href="https://imgchr.com/i/yuvskF"><img
src="https://s3.ax1x.com/2021/02/03/yuvskF.png"
alt="yuvskF.png" /></a></p>
<p>相信大家能够捕捉到光标的位置。</p></li>
</ol>
<blockquote>
<p>这两种模式并不相斥，更是能够同时使用的哦！</p>
</blockquote>
<h4
id="六字数统计拼写检查与源代码模式">（六）、字数统计、拼写检查与源代码模式：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>相信大家一定对前面图片上页面底部的几个图标产生了好奇，下面就来简单地介绍一下：</p>
<ol type="1">
<li><p>字数统计：</p>
<p>和 Word 文档一样，Typora
也支持实时统计文档的字数，位于页面的右下角：</p>
<p><a href="https://imgchr.com/i/yuxEn0"><img
src="https://s3.ax1x.com/2021/02/03/yuxEn0.png"
alt="yuxEn0.png" /></a></p>
<p><em>哇！这篇文章也已经六千多词了欸！</em></p></li>
<li><p>拼写检查：</p>
<p>和 Word 文档一样，Typora 也支持实时的拼写检查，位于字数统计旁边：</p>
<p><a
href="https://imgchr.com/i/yuxM9J"><img src="https://s3.ax1x.com/2021/02/03/yuxM9J.png" alt="yuxM9J.png" style="zoom:50%;" /></a></p>
<p><em>虽然在打中文的时候从来没见过它报错……</em></p></li>
<li><p>源代码模式：</p>
<p>即显示文档的 Markdown 源码的一种模式，开关位于页面左下角旁：<a
href="https://imgchr.com/i/yuxNND"><img
src="https://s3.ax1x.com/2021/02/03/yuxNND.png"
alt="yuxNND.png" /></a></p>
<p>开启后就能够以纯文本的格式显示文档的 Markdown 源码：</p>
<p><a href="https://imgchr.com/i/yuxw3d"><img
src="https://s3.ax1x.com/2021/02/03/yuxw3d.png"
alt="yuxw3d.png" /></a></p>
<p><em>说实话我还真没开着源代码模式打过文档。</em></p></li>
</ol>
<h4 id="七侧边栏与自生成目录">（七）、侧边栏与自生成目录：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>还差页面最右下角的一个图标没有介绍了。没错！你没猜错！就是<strong>侧边栏</strong>。</p>
<ol type="1">
<li><p>侧边栏：</p>
<p>在显示侧边栏后，会发现上面有两个子目录：文件与大纲。</p>
<p>文件就是显示该文档所在的目录结构以及该文档所在的目录里其它可被导入
Typora 的文档：</p>
<p><a
href="https://imgchr.com/i/yuzkPe"><img src="https://s3.ax1x.com/2021/02/03/yuzkPe.png" alt="yuzkPe.png" style="zoom:50%;" /></a></p>
<p>大纲即由现在编辑的文档的标题组成的目录结构：</p>
<p><a
href="https://imgchr.com/i/yuz3GQ"><img src="https://s3.ax1x.com/2021/02/03/yuz3GQ.png" alt="yuz3GQ.png" style="zoom:50%;" /></a></p></li>
<li><p>自生成目录：</p>
<p>在文章开始写入 <code>[TOC]</code> 将自动在文章生成目录：</p>
<p><a href="https://imgchr.com/i/yuztrq"><img
src="https://s3.ax1x.com/2021/02/03/yuztrq.md.png"
alt="yuztrq.md.png" /></a></p>
<p><em>并且能够支持文档内部的超链接哦！</em></p></li>
</ol>
<h4 id="八文本导出">（八）、文本导出：</h4>
<p><span class="math inline">\(\qquad\!\!\)</span>文本导出也能够算是
Typora 非常方便的一大特性，Typora 本身能够支持导出 PDF 文档、两种样式的
HTML 文档以及图像！</p>
<p><span class="math inline">\(\qquad\!\!\)</span>同时也可以导出
Word,Epub,LaTeX 等其它多种文件格式，不过需要安装 pandoc
进行辅助。不过无须多虑的是，在并未安装 pandoc 时，点击 Word
文档等即可进入 Typora 对于 pandoc 的安装引导，十分方便地安装完甚至不用学
pandoc 的各种文件转换命令即可在 Typora 中直接使用。</p>
<h4 id="九下载方式">（九）、下载方式：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>讲了这么多，相信大家已经对用
Typora 编写 Markdown 跃跃欲试了！那么在哪里能够下载呢？</p>
<p><span class="math inline">\(\qquad\!\!\)</span>进入 Typora 官网 <a
href="https://www.typora.io/" class="uri">https://www.typora.io/</a>
即可！</p>
<p><a href="https://imgchr.com/i/yKSkwV"><img
src="https://s3.ax1x.com/2021/02/03/yKSkwV.png"
alt="yKSkwV.png" /></a></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>下滑到底部后，即可选择下载哪种
Typora ，下载完安装后即可使用！</p>
<h3 id="七结语">七、结语：</h3>
<p><span class="math inline">\(\qquad\!\!\)</span>完稿于 2021/2/3
凌晨。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>写了一段时间的班刊终于完美收官了！相信大家看完之后一定会有所收获。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>文章的内容和标题<strong>相照应</strong>，仅仅是一篇<del>自我感觉良好的</del>
Markdown 入门教程。无论是 Markdown 的扩展，还是 <span
class="math inline">\(\LaTeX\)</span> 五花八门的公式，还是 Typora
的部分功能，我都有没介绍到的地方。而且我接触 Markdown
的时间也不算长，文章如有疏漏不当之处，请各位读者海涵。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>关于本文，文章同步发布于 <a
href="https://lhrg.github.io/Markdown标记语言入门"
class="uri">https://lhrg.github.io/Markdown标记语言入门</a>，本文的
Markdown源码 同步发布于 <a
href="https://lhrg.github.io/Markdown标记语言入门源码"
class="uri">https://lhrg.github.io/Markdown标记语言入门源码</a>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>如果你看完这篇文章后不想尝试
Markdown 的写作，那就权当是增加了知识；如果你看完这篇文章后对用 Markdown
写作充满了期待，那就现在就用 Markdown
写一篇文章吧！相信你也会体验到这个有数百万人使用的语言的优美之处！</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>最后，由衷地感谢班主任老师及同学们组织的这次班刊编写活动，给了我写这篇文章的一个机会；感谢我参考的文章的作者，让我有了这篇文章的素材；也要感谢帮助我审稿校验的朋友们，是你们给予了我投稿的支持；更要感谢每一位读完这篇文章的读者，衷心地希望这篇文章能够使大家有所受益！</p>
<hr />
<p>Reference:</p>
<ol type="1">
<li><a href="https://www.cnblogs.com/ubospica/p/11065405.html">Markdown
标记语言指北</a> <em>学长的文章哦！</em></li>
<li><a
href="https://zhuanlan.zhihu.com/p/112327926">Markdown标记语法，从入门到熟练</a></li>
<li><a
href="https://www.luogu.com.cn/blog/luogu/how-to-use-markdown">洛谷
Markdown 格式手册</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/68293222">也许 Markdown
并不是一个好选择</a></li>
<li><a
href="https://www.luogu.com.cn/blog/IowaBattleship/latex-ru-men">LaTeX入门</a></li>
<li><a
href="https://www.luogu.com.cn/blog/IowaBattleship/latex-gong-shi-tai-quan">LaTeX数学公式大全</a></li>
<li><a href="https://www.cnblogs.com/-guz/p/10258557.html">Typora
---一款简洁的Markdown编辑器</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/44998516">Typora -
不要太棒的Markdown编辑器</a></li>
</ol>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>LHRG李 的模板整理目录</title>
    <url>/LHRG%E6%9D%8E-%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="lhrg李-的模板整理目录">LHRG李 的模板整理目录：</h2>
<span id="more"></span>
<hr />
<h3 id="一起手式">一、<a
href="https://www.luogu.com.cn/blog/226623/qi-shou-shi">起手式</a>：</h3>
<ul>
<li>1、起手式</li>
<li>2、卡常起手式</li>
<li>3、图论起手式</li>
<li>4、树论起手式</li>
<li>5、头文件大全</li>
<li>6、随机数据生成器</li>
<li>7、对拍</li>
</ul>
<hr />
<h3 id="二基础算法">二、<a
href="https://lhrg.github.io/基础算法/">基础算法</a>：</h3>
<ul>
<li>1、递推</li>
<li>2、递归</li>
<li>3、排序：
<ul>
<li>①、选择排序</li>
<li>②、冒泡排序</li>
<li>③、插入排序</li>
<li>④、快速排序</li>
<li>⑤、归并排序</li>
<li>⑥、堆排序</li>
<li>⑦、桶排序</li>
</ul></li>
<li>4、二分：
<ul>
<li>①、二分答案</li>
<li>②、三分答案</li>
</ul></li>
<li>5、贪心</li>
<li>6、搜索：
<ul>
<li>①、深度优先搜索</li>
<li>②、广度优先搜索</li>
<li>③、记忆化搜索</li>
<li>④、搜索剪枝</li>
</ul></li>
</ul>
<hr />
<h3 id="三动态规划">三、<a
href="https://lhrg.github.io/动态规划/">动态规划</a>:</h3>
<ul>
<li><p>1、<a
href="https://lhrg.github.io/基础动态规划/">基础动态规划</a>：</p>
<ul>
<li>①、线性dp</li>
<li>②、多维dp</li>
<li>③、背包dp：
<ul>
<li>(1)、01背包</li>
<li>(2)、完全背包</li>
<li>(3)、01背包前 <span class="math inline">\(k\)</span> 优解</li>
<li>(4)、分组背包</li>
<li>(5)、多重背包
<ul>
<li>1)、二进制分组</li>
<li>2)、单调队列优化</li>
</ul></li>
<li>(6)、混合背包</li>
<li>(7)、二维费用</li>
</ul></li>
</ul></li>
<li><p>2、<a
href="https://lhrg.github.io/进阶动态规划/">进阶动态规划</a>：</p>
<ul>
<li>①、<a href="https://lhrg.github.io/树形dp/">树形dp</a>：
<ul>
<li>(1)、基础树形dp</li>
<li>(2)、递归前转移树形dp</li>
<li>(3)、递归后转移树形dp</li>
<li>(4)、树上01背包</li>
<li>(5)、树上分组背包</li>
<li>(6)、基础换根dp</li>
<li>(7)、<a
href="https://lhrg.github.io/进阶换根dp/">进阶换根dp</a></li>
<li>(8)、基环树之树形dp+环形dp</li>
<li>(9)、基环树之开环直接树形dp</li>
</ul></li>
<li>②、DAG上的dp（拓扑排序）</li>
<li>③、环形dp</li>
<li>④、区间dp</li>
<li>⑤、状压dp</li>
<li>⑥、数位dp</li>
<li>⑦、期望dp</li>
<li>⑧、<a
href="https://lhrg.github.io/题解-U534157-【矩阵革命】/">dp计数</a></li>
<li>⑨、dp优化：
<ul>
<li>(1).斜率优化</li>
<li>(2).四边形不等式优化</li>
<li>(3).数据结构优化：
<ul>
<li>①.单调栈/单调队列优化</li>
<li>②.树状数组优化</li>
<li>③.线段树优化</li>
<li>④.矩阵快速幂优化</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h3 id="四字符串">四、<a
href="https://lhrg.github.io/字符串/">字符串</a>：</h3>
<ul>
<li>1、字符串哈希</li>
<li>2、KMP字符串匹配</li>
<li>3、manacher算法</li>
<li>4、字典树</li>
<li>5、最小表示法</li>
</ul>
<h3 id="五数学">五、<a
href="https://lhrg.github.io/数学/">数学</a>：</h3>
<ul>
<li>1、快速幂</li>
<li>2、慢速乘</li>
<li>3、高精度计算</li>
<li>4、<a href="https://lhrg.github.io/数论/">数论</a></li>
<li>5、<a href="https://lhrg.github.io/筛法/">筛法</a></li>
<li>6、<a href="https://lhrg.github.io/线性代数/">线性代数</a></li>
<li>7、<a href="https://lhrg.github.io/组合数学/">组合数学</a></li>
</ul>
<h3 id="六博弈论">六、<a
href="https://lhrg.github.io/博弈论/">博弈论</a></h3>
<ul>
<li>1、巴什博弈（Bash Game）</li>
<li>2、威佐夫博弈（Wythoff Game）</li>
<li>3、尼姆博弈（Nimm Game）</li>
<li>4、斐波那契博弈（Fibonacci Game）</li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>Atomic Physics Chapter 5: The LS coupling scheme</title>
    <url>/Atomic-Physics-Chapter-5-The-LS-coupling-scheme/</url>
    <content><![CDATA[<p>如果此项目未自动打开，您可以 <a
href="/files/Atomic_Physics_Chapter_5__The_LS_coupling_scheme.pdf">在此处打开
Atomic Physics Chapter 5: The LS-coupling scheme</a></p>
<div class="pdf-container" data-target="/files/Atomic_Physics_Chapter_5__The_LS_coupling_scheme.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>学习&amp;科研</category>
      </categories>
      <tags>
        <tag>physics</tag>
        <tag>物理学</tag>
        <tag>atomic physics</tag>
        <tag>原子物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>十二时辰</title>
    <url>/%E5%8D%81%E4%BA%8C%E6%97%B6%E8%BE%B0/</url>
    <content><![CDATA[<center>
<h3>
十二时辰
<h4>
音阙诗汀
</center>
<p>音阙诗汀“十二时辰”系列歌曲在未统一为一个专辑时分别的专辑文案，见猎心喜，整理如下。</p>
<p><em>文案版权归 音阙诗汀 所有，如有侵权请联系删除。</em></p>
<span id="more"></span>
<h5 id="子时">子时</h5>
<p>这江湖啊，有些人把命拴在酒葫芦上，有些人把命悬在刀尖上，有些人要柴米油盐酱醋茶，有些人要腥风血雨走天涯。他不巧，全占了。这人世间唯命运不可捉摸，他当年把全部家当都换了一把剑。满心以为这辈子就要和这冷东西相依为命，却做梦也没想到自己还有亲手把它卖了的一天。</p>
<p>那是个梨花沾雨的清晨，小姑娘穿了一身喜庆的红裙子，抬头冲树上睡觉的他大声喊：“哥！我要成亲了！”</p>
<p>他好悬没一头从树上栽下去。</p>
<p>天要下雨，娘要嫁人。姑娘大了，留不住了。</p>
<p>但是嫁人得有嫁妆啊！他那些买命钱哪能脏了姑娘的喜绸？</p>
<p>思来想去，浑身上下也就只有这把剑值几个钱。</p>
<p>他又想起那个天天来他摊子上赊瓜吃的小白脸，说是什么当铺的老板。
成了，这嫁妆有了！</p>
<p>虽称不上十里红妆，但也是体体面面地送了姑娘出嫁。</p>
<p>姑娘出阁的时候，大哭大叫要他背着出门。他又想拿剑柄敲她脑袋，却抬手摸了个空。</p>
<p>他只说：“嫁妆都是我出的，你以后不能叫我哥了，改口吧，叫爹。”</p>
<p>然后他就被姑娘一脚踹了出去，差点连喜酒都没喝上。</p>
<p>弯月当空，他抬头看了。</p>
<p>是下弦。</p>
<p>街头巷尾串过几只老鼠，他从老茶摊旁边顺了块板砖。</p>
<p>“放下屠刀，立地成佛。”</p>
<p>普度众生的口号太适合这个大喜的日子了。</p>
<p>月光透进巷尾一个小楼的窗子，俊秀的青年神情郑重地把一把长剑收进匣子。剑锋上洗不掉的血印随着光渐次暗去。青年把匣子束之高阁之前，需要记下典当之人的信息。可想了半天没想起那人的名字，于是便写下：</p>
<p>“凶剑无名，天下第一刺客。”</p>
<p>“死当。”</p>
<hr />
<h5 id="丑时">丑时</h5>
<p>十年前盛名在外的如意楼倒了，倒之前，楼主放出了风声，代为保管的江湖密钥被侠盗所窃，与此同时，失窃的还有与偌大宝藏相关的一幅画。</p>
<p>此后，江湖掀起一阵狂热的寻人潮来，那为百姓做了无数好事的侠盗，成了油锅里的蚱蜢，再无安生可言。</p>
<p>被江湖人士踏遍的如意楼成了废弃之地，废墟中，老人颤颤巍巍的把断了的剑收回怀中，叹了口气：这江湖啊，要不太平了。</p>
<p>月光白惨惨的打下，传闻里的侠盗抱着个姑娘，明明是冷峻的容颜，却因眉尾的一道伤显得格外狰狞了起来，他低着头，回想起她替他挡的一刀，怀里的金簪愈发的滚烫了起来。</p>
<p>“你一定会好的。”</p>
<p>巷尾的拐角处，他一瘸一拐的向外走去。</p>
<p>又一年四月，新坟上，落魄青年提着酒，下意识的摸了摸怀里，温热的，却空无一物，他笑了笑，没能出声，又往地上倒去。</p>
<p>寂静的小楼上，青年看了看匣子里的金簪，做工精致，簪上的蝴蝶展翅欲飞，簪尾却有不少摩挲的痕迹，他郑重其事的将匣子放回原处，便走出了小楼。</p>
<p>月光下，黄纸隐隐闪烁着几个字：“金簪隔阴阳，天下第一侠盗”</p>
<p>“死当”</p>
<hr />
<h5 id="寅时">寅时</h5>
<p>“我托人送信给您，完全是抱着一种试一试也无妨的心态，却没有想到，您真的会屈尊找我。”少女努力撑起身子，倚靠在床榻边，面色苍白，气若游丝，薄薄的嘴唇却努力勾勒出上扬弧度。</p>
<p>青年随便找了张椅子坐下，看了眼床边的火盆，打出一把折扇，微微扇开充塞在屋子里的苦涩药味。</p>
<p>“你在信中说，自己生来体弱，从未出过大门。那你是如何得知天机阁的？”青年问道。</p>
<p>“书里写着啊。”少女的眸子亮晶晶的：“我终日缠绵病榻，于养病无聊之际，便看书打发时间。你不晓得，古往今来，天下之事，书里面全都写着。”</p>
<p>青年挑了挑眉毛，道：“那你打算用什么典当？又准备典当什么？天机阁接待普通人，也是要收些代价的。”</p>
<p>少女垂下眼睫，脸上掠过一丝红晕：“说来好笑。书看多了，心里便忍不住生出妄想。我想和窗外的鸟儿一样自由。我想健康起来，然后亲眼去看一看外面的天地，用双足丈量每一寸河山。我不想永远做一只井底之蛙，被困在方寸的天空里，枉废一生。至于典当物……我看过的所有书籍，行吗？”</p>
<p>青年听着少女天真的发言，有些好笑地摇头道：“我不缺书。”</p>
<p>“可我再没有什么宝物了。”少女略显失望。</p>
<p>青年起身走到病床边，收起折扇敲了敲窗前装满泥土的花盆：“你喜欢种花？”</p>
<p>少女摇头道：“喜欢算不上。这是我去年种下的。我有个傻念头，觉得这盆花和我有某种联系。比如，当它发芽时，我的身体便会好起来。虽然一直都没有动静，但我觉得它只是在破土之前，要花更多的时间，在泥土深处酝酿生命。也许是明年，也许是后年，总有一天，它一定会抽出新芽的。”</p>
<p>青年拿起花盆，在手中端详一阵，道：“这个，我收下了。”</p>
<p>少女错愕地睁圆了眼睛，望着青年离去的背影，耳边只落下两个字：</p>
<p>“死当。”</p>
<hr />
<h5 id="卯时">卯时</h5>
<p>清晨的雾还没散，栅栏里的母鸡在公鸡响亮的打鸣声里下了两个蛋。耳朵上还别着一根稻草的少年翘着腿躺在草垛上学公鸡打鸣。</p>
<p>樵夫上山之前和少年打了个招呼，少年估摸着时间差不多了，就又跑到庙街去蹲点。</p>
<p>那些有钱人家的夫人们就喜欢在这破晓时分驾着锦帷彩带的马车去敬香礼佛，图个清净。</p>
<p>往日少年总蹲在庙门口支个简陋的摊子卖他的“长寿丹”。正品山楂丸，活血化痰，健脾开胃，延年益寿没毛病。</p>
<p>只不过今日他不是来等这些阔气的夫人们的，而是在等一个能掐会算的“神仙”。</p>
<p>神仙打着哈欠走到庙门口的时候就被不知道从哪儿窜出来的少年一把抱住了腿。</p>
<p>他低头看了一眼两眼放光的少年，伸出两指在他眉间点了一下，说了句：
“还不到时候。”</p>
<p>少年蔫巴巴地垂下了头，他知道今日神仙也不会让他交换。能和神仙做交换的都是些大人物，都是些他只能在话本里见到的大人物。他第一次见神仙的时候，神仙就是这句话——</p>
<p>还不到时候。</p>
<p>到底什么时候才到啊？少年叹着气和神仙讲着自己的宏图大志。他要游遍天下河山，无所不知，无所不至，要让天下人都知道自己的名字！</p>
<p>神仙不知道有没有听进去，只是看起来对他的长寿丹很感兴趣。</p>
<p>少年等不及了，人生匆匆不过几载春秋，他要踏上他梦寐以求的江湖路了。</p>
<p>临行前，他又去庙街堵了神仙，把自己从山上采的一串新鲜山楂强塞到了人家怀里，然后就头也不回的走了。</p>
<p>他不知神仙高兴地拎着那串山楂回到了自己的小楼，拿出了一个已陈封条的宝匣。小心翼翼地取下封条，那匣子里是一串枯萎的残枝，已经辨认不出品类。他把枯枝取了出来，又把少年给的山楂放了进去，才满意地把封条贴上。那封条上的字迹有些陈旧了，写着：</p>
<p>“昔日长寿丹，江湖百晓生”</p>
<p>他想了想又提笔在黄纸上添了几个字：</p>
<p>“旧友惠赠”</p>
<hr />
<h5 id="辰时">辰时</h5>
<p>日头正盛，炎热的气息顺着树荫直愣愣的向下传递，却在一座凉亭边戛然而止，无端透露出些惧怕来。</p>
<p>镜头拉近，两位青年于石桌上对坐着，一双俊秀的手把弄着白玉棋盘，身着白衣的公子轻声开口：“这日子过于无趣了些”，他歪了歪头，对另一边的青年说道：“阁主，打个赌吧。”青年懒散的打了个哈欠，说道：“赌什么？”</p>
<p>公子抿了抿唇，道“赌我这十年同袍，理当迷途知返。”</p>
<p>轶夜，杀机四伏，玲珑府上，臃肿的中年男子狞笑着，将嗷嗷哭嚎的孩童摔在地上，剑光闪过，他抹了脖子，最后一句话甩出：“我败了，但尔等告诉公子，我死，这府上其他人也别想独活。”蒙了面的黑衣人看着他摔死了自己的老来子，瞠目结舌。下一刻，火光四起。</p>
<p>白昼渐起，消磨了夜色带来的血腥气，黑衣人跪在公子下侧，“公子，属下无能。”公子略微有些晃神，叹道“罢了，是某看走眼了。”</p>
<p>小楼上，青年吹了吹口哨，将白玉棋盘收入囊中，哼着小曲轻笑：“你这神机妙算，也有高估了人性的一天？”</p>
<hr />
<h5 id="巳时">巳时</h5>
<p>“您看我浑身上下什么值钱，您开口。”这人大马金刀地坐在青年面前，一副什么都不在乎，什么都能割舍的表情。</p>
<p>青年也算是见了不少人了，第一次见这么混不吝的。来当东西空手来，那气势却像是带了一身的金银珠宝。</p>
<p>呵，这辈子论起摆架子，他还真就没怕过谁。</p>
<p>“天机阁，不接俗客。”</p>
<p>“我不是俗客，我很有名。”他正襟危坐，神情庄重。</p>
<p>青年竖起耳朵，等他报个响亮的名头。</p>
<p>“我爹是锦衣侯。”</p>
<p>“完了？那你呢？”</p>
<p>“锦衣侯他儿子。”</p>
<p>“慢走不送。”</p>
<p>青年直接把桌上的茶杯一收。</p>
<p>“哎等等！等等！”那人非常没有风度地整个扑在了桌子上，“魔刀匠侯！”</p>
<p>他咬着牙报出了这个让他羞耻的名号。</p>
<p>青年停了一瞬，似乎从这个名字里窥见了一个江湖血雨中的背影。</p>
<p>恩仇难休，浮华如梦。</p>
<p>“你想换什么？”</p>
<p>他听到这问话，傲气的眉头低下。“换几年寿命，能换几年换几年。”</p>
<p>“好啊。”青年答应了，“我要你用它换，十年寿命。换不换？”</p>
<p>青年指了指他腰间一根短玉笛。这人如今穿着落魄，须发凌乱，只有腰间</p>
<p>那短笛仔细地套了个软绸，精心地挂在腰间。</p>
<p>“您可真会挑。”他苦笑，但还是解下笛子递了过去。</p>
<p>他离开时的背影和青年记忆中的背影重叠，只不过一个走向了尸山血海的</p>
<p>风雨江湖，一个走向了草长莺飞的归乡之路。</p>
<p>他欣然地将短笛收入匣，仍旧郑重地写下封条：</p>
<p>“乡音玉笛，魔刀匠侯”</p>
<p>“死当”</p>
<hr />
<h5 id="午时">午时</h5>
<p>太阳刚下山，闹市也安静了下去，稀稀落落的人群散去，一个留着络腮胡的大汉躲在角落，一边咬牙切齿的梗着脖子杀鸡，一边抖着手默念着什么，血溅出的瞬间，他眼皮倏的一跳，侧开脸。</p>
<p>“啊！他！一个！晕血的人！为什么！要去！报名！刽子手！”</p>
<p>他用力的擦掉溅在额头的血迹，大半年了，他终于从抖抖索索不敢下手做到了放血干净利落，这艰辛不提，单单是死在他手下的鸡鸭冤魂，就一大摞了，那死相之惨，让人无法直视。</p>
<p>十字路口的人渐渐聚集，茶馆里看热闹的有叹息的亦有，“老天无眼，竟要收了青天大老爷的命去！”</p>
<p>午门外，说时迟那时快，监斩官一声令下：</p>
<p>“午时到！来人！斩首！”</p>
<p>而蒙着面的大汉提着刀，盼了又盼，终于盼到了他有用武之地的一天。</p>
<p>收工后，一位头发花白的男子颤颤巍巍地向他行着礼：“多谢壮士救命之恩”，满脸络腮胡的他难得的红了脸，“小事小事，莫要言谢了。”</p>
<p>鸟儿叽叽喳喳的晃得树枝咿呀的响，天机阁楼上，叼着笔的青年支着头，看着水镜里的画面，露出兴味的笑，又想起那天大汉磕磕巴巴找他求一具偷天换日假傀儡的事。</p>
<p>“这傀儡，你拿什么来换”</p>
<p>大汉咬咬牙，“阁主，有什么能看的上的，某皆愿来换。”</p>
<p>“既然你晕血，便把那蒙眼巾予我罢了。”</p>
<p>这大汉与那官，分明是毫无关系的陌生人，却又偏偏为他求到他这里来，也算是，缘分一场吧。</p>
<p>磊落故事曾说罢，问尽赤诚不如人。</p>
<hr />
<h5 id="未时">未时</h5>
<p>“明天城门外，他真的会经过吗”她吃着早春的梅花糕，含含糊糊地问道，“这事关我一生的幸福，你可莫诓我。”</p>
<p>青年摸了摸少女的脑袋，含笑道，“既然与我做了公平交换，那大可不必忧心。”</p>
<p>少女一口气咽下梅花糕，似是有些噎着，噤了会儿，叹了口气“希望到时候哥哥不要怪我呀。”</p>
<p>未时，城门外，某处似是惊了马，所过之处净是混乱一片，弯弯曲曲的路上，少女伫立在中间，望着飞驰而来的马儿，似乎有些躲闪不及。</p>
<p>说时迟那时快，冷峻的将军从侧边而来，一拉缰绳，下一刻便将少女拥入怀中，而少女发丝长长地坠落下来，露出个惊喜的笑容：“哥哥，你不躲我啦。”她咬着唇，一头撞入他的胸口。将军板着脸未说话，微红的耳垂却泄露了些什么。</p>
<p>时间线拉长，兜兜转转的心事被戳穿，又是窗外红烛，少女红着脸吻上小将军的脸颊，那爱意旖旎而纯粹。</p>
<p>而小楼里的阁主道完贺，便起身告辞了。小姑娘嘿嘿一笑，心里想着“一张手帕换个相公，不亏不亏。”</p>
<hr />
<h5 id="申时">申时</h5>
<p>青年站在石桥旁的树下，午后的碎光隔了树荫打在他脸上。他眯着眼睛看着街坊邻居张灯结彩地布置着一年一度的七夕灯会。</p>
<p>看了眼天色，尚早。他要等的人也还没来。索性伸了个懒腰，在树下打个盹。</p>
<p>恍惚做了个梦。</p>
<p>黄粱一梦，一梦黄粱。人间如梦如流光，岁月转瞬，不知今夕何夕。</p>
<p>那对痴情人先后找上了门，明明都是要赴死，表情却都很快活。问世间情为何物？他这种老怪物不是很懂年轻人的想法。</p>
<p>飞蛾扑火，彼此奔赴，九死无生却百死不悔。</p>
<p>痴人啊，痴人。</p>
<p>这万劫不复的死路都叫这对人虔诚地叩出了生门。他往来多少岁月，终究还是做了一笔亏本买卖。哦不对，是两笔。</p>
<p>睁开眼的时候已经是灯火连城，人声鼎沸。</p>
<p>一片花团锦簇的人海里，一对羞涩的小情侣向他这边走过来。</p>
<p>“先生，”少年冲他腼腆一笑，施了一礼。白衣纶巾，文质彬彬。</p>
<p>他瞧着稀奇，魔头这是被菩萨点化了？</p>
<p>正想着，菩萨也朝他笑了笑，还把手里的花灯塞给了他，她头上的海棠步摇随着她的动作摇了几圈。</p>
<p>像极了梦中那满天纷飞的花雨。</p>
<p>他看着这前尘尽忘的一对人，也没想叙旧。直接把当年他们留在他这的东西递了过去。</p>
<p>一对鸳鸯相思袋。</p>
<p>一句“愿你们永结同心，百年好合。”竟然把这对人弄了个大红脸。青年是做梦也没想到这两个煞神也能有今天。</p>
<p>与二人别后，他拎着那盏花灯隐入人海。指缝里漏出几片撕碎的黄纸，飞散之前，隐隐看到不知多少年岁的字迹。极力辨认，也只能看到什么仙啊魔啊的。怕是不知哪个话本里的神异故事，也终究随风化作点点荧光散入灯火。</p>
<p>人潮之中，少年紧紧拉着姑娘的手走向一片繁花处。</p>
<p>一见如故，白首倾盖，岂知不是故人来？</p>
<hr />
<h5 id="酉时">酉时</h5>
<p>夕阳渐落，京城戏馆门前人头攒动，围堵得水泄不通。当年名角的关门弟子今晚初次亮相，一票难求。</p>
<p>灯火昏黄，戏馆后台妆镜前，他提笔蘸墨，将眼角斜勾入鬓，口中喃喃着刻进骨子里的戏词。</p>
<p>数年前，他挤在戏台外围，险些被人群推倒踩烂，一双目光却痴痴锁在台上名角一颦一笑之间。</p>
<p>戏幕落，他跪在后台堂下，瘦弱的身子甚至撑不起一袭素褂，语气却意外地坚定：“我要学戏。”</p>
<p>十年苦功，坐念唱打，他连血带泪咽在肚子里，从未想过放弃。年少时惊鸿一瞥，是他无数黑暗日子里唯一的光。</p>
<p>他想成角。他要成角。</p>
<p>青年冷眼打量着他。天机阁从不缺野心勃勃的客人。</p>
<p>“我认了当年的名角做师父。他没等到我今晚亮相便因病离世。当年初登舞台时，他便是拿着这把泥金扇一曲成名。”</p>
<p>青年没有伸手去接那把扇子，似乎还在犹豫。</p>
<p>他略笑了笑，同样冷眼看着阁主道：“你不肯收，我也不会求你。我原就有一曲成名的把握。来这里，不过求个心安稳妥。便万一遇上人力不可控之意外，将来，我还是要成角的。”说着，欲将扇子回收。</p>
<p>“慢着。”青年按住他手上动作：“你师父的戏，值得发扬，我一向喜欢。他的遗物，值得珍藏，我会好生保管。”</p>
<p>“多谢。”</p>
<p>“何愁梨园无尽苦，一朝凤鸣天下知。”</p>
<p>他，该成角。</p>
<hr />
<h5 id="戌时">戌时</h5>
<p>“你来干什么？”阁楼上，青年悠悠开口，“我没办法救回已经不在地府的人。”</p>
<p>“我想再见她一面”双眼通红胡子渣拉的男子艰难地开口“我知道，是我害了她，我愿意用我余生去偿还，可是我...可是我还没来得及...没来得及...”一滴眼泪从他眼角滑落，大抵最坚强的人，崩溃也只在一瞬间。</p>
<p>回忆一闪而过，他和她青梅竹马，相识于微末，成长于烽火之中，年少的意气与抱负，缠成丝丝环绕的线，在故事的一半中，便笃定了不太美好的结局。</p>
<p>他为一个梦从塞北到闽南，算不上救了苍生，但确确实实累积了大半的仇家。直到那一日，战事爆发，他看见放在桌案上的纸条，看见底下万千将士殷红而充满朝气的脸，又恍惚中看见她晏晏的笑容，交换啊...怎么交换...爱和忠义，从来，做不到两全。</p>
<p>他双手颤抖着，强行终止了回忆。他甚至还记得那场战事结束后她回来的场景，甚至于她眼角的泪痣都历历在目，后来，后来他才知道，她用来生换来了这短短几个月...</p>
<p>“她，还能再...”男子抬着头，泣不成声地问，青年摇了摇头，“人鬼殊途，</p>
<p>你既有此执念，我只能做到让你们再见一面，但转世，别想了。”</p>
<p>一刹寂静。</p>
<p>青年回过头，“另外，等价交换，她留给你的那封信，留在这里。”</p>
<hr />
<h5 id="亥时">亥时</h5>
<p>他是个短命鬼，还没及冠就一命呜呼了。但他长得太好，还没走上奈何桥就被鬼差带回了人间。说是不忍看此人间绝色香消玉殒，要许他一个好差事。</p>
<p>打更。</p>
<p>不过打的不是一般的更，阴阳两界总有那么些不开眼的走错了路。他得负责把阳间的送回阳间去，阴间的带到阴间来。</p>
<p>好处是能继续像人一样活着。像人，但不是人。半鬼之身，能通阴阳。鬼差走的时候送了他一个破锣，说是出差的路上捡的，让他将就着用。他也不挑，每晚准时敲着他的破锣，拉着像唱戏一样的长调子唱更。</p>
<p>人间烟火气总在万家灯火升起时。他喜欢这样的日子，也喜欢夜市的吃食。但是夜路走多了，总会遇到讨厌鬼。</p>
<p>“这位姑娘，您见过青衣么？”</p>
<p>“您长眼了么？我是男的。”</p>
<p>他用锣锤把讨厌鬼隔开。三个月了，这个不知道打哪儿来的讨厌鬼天天准时准点地出现。脑子也不太清醒，就坐在他阴阳关的门口，往前一步是新开始，往后一步是旧日子。可他偏是死坐在那儿一动不动。</p>
<p>只是每到亥时见到他，就拉着他的衣角问这么一句。</p>
<p>他拿他没办法，拖也拖不走，打又打不得。只能认命地帮他找青衣。戏楼的姑娘，画舫的歌姬，他挨个打听了个遍，也没找到那个青衣。</p>
<p>焦头烂额的他找上了鬼差，让他帮忙找找。鬼差比他干脆，直接把那赖在阴阳关前不走的家伙丢给了孟婆。一碗汤灌下去，直接丢回了人间。</p>
<p>“学会了么？”</p>
<p>他大为敬佩，不愧是前辈。</p>
<p>备受敬仰的前辈挥挥手走了，去了常去的那家小楼。那长得像书生一样的老板今儿正在打扫藏宝阁。还有闲心铺开纸写诗，他好奇地凑过去，见纸上笔走龙蛇的写：</p>
<p>“生的看不透，</p>
<p>死的看不够。</p>
<p>人间走三步，</p>
<p>一步一回头。”</p>
<p>歪诗一首。</p>
<p>他顺着笔墨的方向正好看到他拿来当镇纸的宝匣，那陈黄的封条上竟然有了涂改的痕迹：</p>
<p>“天下艳名，名角（更夫）青衣”</p>
<p>“死当”</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>music</tag>
        <tag>音阙诗汀</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown标记语言入门源码</title>
    <url>/Markdown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h2 id="markdown标记语言入门源码">Markdown标记语言入门源码</h2>
<span id="more"></span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## Markdown标记语言入门</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 一、什么是 Markdown：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 是一种轻量级标记语言，由约翰·格鲁伯（John Gruber）于 $2004$ 年创立。$2017$ 年，GitHub 发布了基于 CommonMark 的 Github Flavored Markdown（[<span class="string">GFM</span>](<span class="link">https://github.github.com/gfm/</span>)）的正式规范。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$约翰·格鲁伯对于 Markdown 的定义是：</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; [<span class="string">Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</span>](<span class="link">https://daringfireball.net/projects/markdown/</span>) </span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Markdown 是面向 Web作家 的文本到 HTML 转换工具。Markdown 允许您使用易于阅读，易于编写的纯文本格式进行编写，然后将其转换为结构上有效的 XHTML（或HTML）。</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 的目标是实现「易读易写」，能够通过简单的标记语法，使普通的文本内容具有一定的格式。<span class="strong">**标记语法**</span>即通过一系列的控制字符，使得<span class="strong">**写作本身**</span>与<span class="strong">**排版的细节**</span>相分离。因此 Markdown 能够让你双手不离开键盘的情况下（只是使用键盘，而不用鼠标或触屏），实现给文本<span class="strong">**加粗**</span>，区别各级标题，引用格式，插入图片、链接、表格、数学公式等等功能。例如：<span class="strong">**加粗**</span>、<span class="emphasis">_倾斜_</span>、~~删除线~~</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$分离写作和排版还会带来一个意想不到的好处：你可以轻松地、迅速地把文档转换成另一个主题，或者 <span class="emphasis">_另一个样式_</span>。</span><br><span class="line"></span><br><span class="line"><span class="section">### 二、Markdown 能干什么：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$作为一种为写作而生的语言，它在日常写作方面几乎可以代替 MS Word。你可以用 Markdown：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 写文章</span><br><span class="line"><span class="bullet">-</span> 记笔记</span><br><span class="line"><span class="bullet">-</span> 写 Blog</span><br><span class="line"><span class="bullet">-</span> 写书</span><br><span class="line"><span class="bullet">-</span> 甚至……写论文</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$由于 Markdown 也是一种适用于网络的书写语言，很多知名的网站都支持用 Markdown 写作：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 简书</span><br><span class="line"><span class="bullet">-</span> 洛谷，国内著名 OJ</span><br><span class="line"><span class="bullet">-</span> 马克飞象，印象笔记的一款工具</span><br><span class="line"><span class="bullet">-</span> GitHub，全球最大的~~同性~~程序员交友网站</span><br><span class="line"><span class="bullet">-</span> Reddit，知名的娱乐、社交及新闻网站</span><br><span class="line"><span class="bullet">-</span> Gitbook，写作网站</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$同时，本文就用 Markown 写作。</span><br><span class="line"></span><br><span class="line"><span class="section">### 三、Markdown 的优缺点：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$任何事物都具有两面性，虽然 Markdown 的优点不少，但是它还是具有一定的缺陷。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （一）、优点：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**标准化**</span>：我们都有这种体验，一份 Word 文档，在自己电脑上看还好好的，但是发给他人就乱码了，这多半是由于两个软件平台编码格式不一致导致的。而 Markdown 不存在这样的问题，使用正式规范的编码对文本进行的格式化，在任何支持 Markdown 的平台，都能正常显示。</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt; 由于平台显示形态可能不一样，比如标题的颜色、引用线粗细等会不太一样，因此要忠实重现文本，最好用 PDF 版本进行文件的传阅。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**轻量化**</span>：纯文本的 Markdown 文档像记事本一样的快速，简洁，不用因为想写一个小文档，打开了笨重达 $2GB$ 的 MS Word。并且易于学习，新手学习没有门槛，入门简单、熟练快速。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**易于排版**</span>：可以快速实现文字的排版。只通过键盘输入即可实现排版，不用另外操作排版，可以让作者摆脱排版的困扰，专心写作。不用像用 MS Word 一样一边写一边（凭感觉）排版, 甚至打乱了你写作的节奏。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> <span class="strong">**一次编辑多次多平台使用**</span>：因为是纯文本，只要支持 Markdown 的地方都能获得相同的排版效果，不需要重复排版。同时它可在多种平台上获得支持，不像在很多地方并不支持 .doc 和 .docx 格式， 或者支持较弱。 比如 Linux、Mac OS、 笔记应用，以及绝大部分网站。并且很多 MarkDown 编辑器都支持直接将文本转换为 PDF、Word、HTML 等格式。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （二）、缺点：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**需要记一些语法**</span>。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**难以进行高级排版**</span>：由于很多复杂的排版无法实现，只适用于普通排版要求的文档。</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**可能令人分心**</span>：由于严格的标准化，在书写 Markdown 文档的时候通常会非常注意格式排版，比如：中英文标点符号，空格，列表的插入与退出等。</span><br><span class="line"></span><br><span class="line"><span class="section">### 四、Markdown 的语法：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$看完前面的介绍，大家有没有跃跃欲试的感觉呢？那么接下来我们就来学习一下 Markdown 的基本语法！</span><br><span class="line"></span><br><span class="line"><span class="section">#### （一）、段落与换行：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的<span class="strong">**空行**</span>。普通的 Markdown 段落不可以用空格或制表符来缩进。（所以这个段落前的空白怎么做到的呢？那就是 $\LaTeX$ 的妙用喽！详细请参照下面<span class="strong">**内联公式**</span>部分。）</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 空行：一行之内只包含回车换行、空格、制表符。</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （二）、标题：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 的标题是在行首插入 $1$ 到 $6$ 个 #，# 和标题文字之间使用一个或多个空格，对应到标题 $1$ 到 $6$ 级。第一级和第二级的标题后自带分割线。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code"># 这是 H1</span></span><br><span class="line"><span class="code">## 这是 H2</span></span><br><span class="line"><span class="code">### 这是 H3</span></span><br><span class="line"><span class="code">#### 这是 H4</span></span><br><span class="line"><span class="code">##### 这是 H5</span></span><br><span class="line"><span class="code">###### 这是 H6</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line">[<span class="string">![ye1QL8.png</span>](<span class="link">https://s3.ax1x.com/2021/02/01/ye1QL8.png</span>)](<span class="link">https://imgchr.com/i/ye1QL8</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">#### （三）、文字的修饰：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 使用星号（ * ）和底线（ _ ）作为修饰字词的符号，被 * 或 _ 包围的字词会被转成用 <span class="code">`&lt;em&gt;`</span> 标签包围（即<span class="emphasis">*斜体*</span>），用两个 * 或 _ 包起来的话，则会被转成 <span class="code">`&lt;strong&gt;`</span>（即<span class="strong">**粗体**</span>）。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">*单星号斜体*</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">_单下划线斜体_</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">**双引号加粗**</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">__双下划线加粗__</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">~~删除线~~</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*单星号斜体*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_单下划线斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**双星号加粗**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__双下划线加粗__</span></span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（\）（参见下面的<span class="strong">**反斜杠**</span>部分）。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">使用反斜线开头的\*被当做是普通的字符\*</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line">使用反斜线开头的\<span class="emphasis">*被当做是普通的字符\*</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （四）、代码块：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> ##### 小块代码：</span><br><span class="line"></span><br><span class="line"><span class="code">    $\qquad\!\!$需要引用代码时，如果引用的语句只有一段，不分行，可以用 \` 将语句包起来。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &gt; 如果你真的要打这个字符的话，可以仿照和 \* 这个字符一样的处理方式，在 \` 前加一个反斜杠。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **例如**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ```markdown</span></span><br><span class="line"><span class="code">    `#include&lt;iostream&gt;`</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **效果**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    `#include&lt;iostream&gt;`</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> ##### 大块代码：</span><br><span class="line"></span><br><span class="line"><span class="code">    $\qquad\!\!$Markdown 建立代码块的方法：将 ``` 置于这段代码的首行和末行，独立成一行。 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    $\qquad\!\!$第一行的 ``` 后面可以加上语言名称，例如 cpp、java、c、pascal 等（不要写成 c++ ）。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **例如**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ````markdown</span></span><br><span class="line"><span class="code">    ```cpp</span></span><br><span class="line"><span class="code">    #include&lt;iostream&gt;</span></span><br><span class="line"><span class="code">    int a,b;</span></span><br><span class="line"><span class="code">    int main()</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">    	std::cin&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line"><span class="code">    	std::cout&lt;&lt;a+b&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="code">    	return 0;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code">    ````</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **效果**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ```cpp</span></span><br><span class="line"><span class="code">    #include&lt;iostream&gt;</span></span><br><span class="line"><span class="code">    int a,b;</span></span><br><span class="line"><span class="code">    int main()</span></span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">    	std::cin&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line"><span class="code">    	std::cout&lt;&lt;a+b&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="code">    	return 0;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#### （五）、区块引用：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 标记区块引用的方法是在行的最前面加 \&gt; ，也可以只在整个段落的第一行最前面加上 \&gt;，区块引用内部可以嵌套，只要根据层次加上不同数量的 \&gt; 即可，引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。</span><br><span class="line"></span><br><span class="line"><span class="code">````markdown</span></span><br><span class="line"><span class="code">&gt; Markdown 标记区块引用的方法是在行的最前面加&gt;</span></span><br><span class="line"><span class="code">&gt; </span></span><br><span class="line"><span class="code">&gt; 也可以只在整个段落的第一行最前面加上 &gt;</span></span><br><span class="line"><span class="code">&gt; &gt; 区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可.</span></span><br><span class="line"><span class="code">&gt; &gt; </span></span><br><span class="line"><span class="code">&gt; &gt; *我是内部嵌套区块，我可以使用其他 Markdown 语法哦*</span></span><br><span class="line"><span class="code">&gt; &gt; </span></span><br><span class="line"><span class="code">&gt; &gt; ### 我是引用区块内使用标题3语法</span></span><br><span class="line"><span class="code">&gt; &gt; ```java</span></span><br><span class="line"><span class="code">&gt; &gt;       //在引用区块内可以加入代码块</span></span><br><span class="line"><span class="code">&gt; &gt;       import java.net.URL;</span></span><br><span class="line"><span class="code">&gt; &gt;       import java.util.Arrays;</span></span><br><span class="line"><span class="code">&gt; &gt;       import java.util.Date;</span></span><br><span class="line"><span class="code">&gt; &gt;       import java.util.Set;</span></span><br><span class="line"><span class="code">&gt; &gt; ```</span></span><br><span class="line"><span class="code">````</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Markdown 标记区块引用的方法是在行的最前面加&gt;</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 也可以只在整个段落的第一行最前面加上 &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; 区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可.</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; <span class="emphasis">*我是内部嵌套区块，我可以使用其他 Markdown 语法哦*</span></span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; ### 我是引用区块内使用标题3语法</span></span><br><span class="line"><span class="quote">&gt; &gt; ```java</span></span><br><span class="line"><span class="quote">&gt; &gt; //在引用区块内可以加入代码块</span></span><br><span class="line"><span class="quote">&gt; &gt; import java.net.URL;</span></span><br><span class="line"><span class="quote">&gt; &gt; import java.util.Arrays;</span></span><br><span class="line"><span class="quote">&gt; &gt; import java.util.Date;</span></span><br><span class="line"><span class="quote">&gt; &gt; import java.util.Set;</span></span><br><span class="line"><span class="quote">&gt; &gt; ```</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （六）、列表：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 支持有序列表和无序列表，无序列表使用星号、加号或是减号作为列表标记，有序列表则使用数字接着一个英文句点。两种列表方式格式都是：列表标记+空格+列表项，即列表项目标记通常是放在最左边，也可以缩进最多 $3$ 个空格，项目标记后面则一定要接着至少一个空格或制表符。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$列表能够支持通过换行自动延续、列表内嵌套列表、列表内使用其它 Markdown 语法等功能。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> ##### 无序列表：</span><br><span class="line"></span><br><span class="line"><span class="code">    $\qquad\!\!$星号、加号或是减号三种列表方式效果等同。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **例如**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ```markdown</span></span><br><span class="line"><span class="code">    *   Red</span></span><br><span class="line"><span class="code">    *   Green</span></span><br><span class="line"><span class="code">    *   Blue</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    +   Red</span></span><br><span class="line"><span class="code">    +   Green</span></span><br><span class="line"><span class="code">    +   Blue</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    -   Red</span></span><br><span class="line"><span class="code">    -   Green</span></span><br><span class="line"><span class="code">    -   Blue</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **效果均为**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">    *</span>   Red</span><br><span class="line"><span class="bullet">    *</span>   Green</span><br><span class="line"><span class="bullet">    *</span>   Blue</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> ##### 有序列表：（其实现在就在一个有序列表当中……）</span><br><span class="line"></span><br><span class="line"><span class="code">    $\qquad\!\!$有序列表则使用数字接着一个英文句点。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **例如**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    ```markdown</span></span><br><span class="line"><span class="code">    1.  Red</span></span><br><span class="line"><span class="code">    2.  Green</span></span><br><span class="line"><span class="code">    3.  Blue</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    **效果**：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">    1.</span>  Red</span><br><span class="line"><span class="bullet">    2.</span>  Green</span><br><span class="line"><span class="bullet">    3.</span>  Blue</span><br><span class="line"></span><br><span class="line"><span class="section">#### （七）、行内链接：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。</span><br><span class="line"></span><br><span class="line"><span class="strong">**形如**</span>：<span class="code">`[an example](http://example.com/ &quot;title&quot;)`</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`an example`</span> 是想显示出的文字</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`http://example.com/`</span> 是网站链接, 也可以是本机路径</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`&quot;title&quot;`</span> 是把鼠标放在这个链接上时显示的文本</span><br><span class="line"><span class="bullet">    -</span> 相信你也发现了这个东西似乎没什么用。所以, 这部分是可选的</span><br><span class="line"><span class="bullet">    -</span> 对于印刷品，这并没有什么用</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">这是 [百度](http://www.baidu.com/) 内联方式。</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line">这是 [<span class="string">百度</span>](<span class="link">http://www.baidu.com/</span>) 内联方式。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （八）、图片：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 使用一种和链接很相似的语法来标记图片，一个惊叹号 \!，接着一个方括号，里面放上图片的替代文字（这些文字将在图片加载失败的时候显示），接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 title 文字。</span><br><span class="line"></span><br><span class="line"><span class="strong">**形如**</span>：<span class="code">`![lable](picture path &quot;title&quot;)`</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">![YuYl5V.jpg](https://s1.ax1x.com/2020/05/08/YuYl5V.jpg)</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line">![<span class="string">YuYl5V.jpg</span>](<span class="link">https://s1.ax1x.com/2020/05/08/YuYl5V.jpg</span>)</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> 我的电脑桌面啦 <span class="language-xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="section">#### （九）、自动链接：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">&lt;https://www.baidu.com&gt;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;https://www.baidu.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （十）、表格：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$表格是 GFM 对 Markdown 原规范的扩展，但几乎所有的编辑器都支持这一语法。表格由两部分组成：表头和内容。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">| Items          | Price      | Description               |</span></span><br><span class="line"><span class="code">| -              | :--:       | -:                        |</span></span><br><span class="line"><span class="code">| T-Shirt        | £9.15      | Suggested in the NCEE     |</span></span><br><span class="line"><span class="code">| Uniform in H3Z | about ¥100 | design beyond description |</span></span><br><span class="line"><span class="code">| left aligned   | centered   | right aligned             |</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line">| Items          |   Price    |               Description |</span><br><span class="line">| -------------- | :--------: | ------------------------: |</span><br><span class="line">| T-Shirt        |   £9.15    |     Suggested in the NCEE |</span><br><span class="line">| Uniform in H3Z | about ¥100 | design beyond description |</span><br><span class="line">| left aligned   |  centered  |             right aligned |</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$上面的分隔符是 \|， 也就是 Backspace 和 Enter 中间的键。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 表头（也就是第一行）是必选的</span><br><span class="line"><span class="bullet">-</span> 第二行声明了表格。每格中 \-  至少一个， 不过也可以是连续的多个， 没有影响</span><br><span class="line"><span class="bullet">    -</span> 每格中两边的 : 代表对齐方式</span><br><span class="line"><span class="bullet">        1.</span> :\- 或者 \- 左对齐</span><br><span class="line"><span class="bullet">        2.</span> :\-: 居中对齐</span><br><span class="line"><span class="bullet">        3.</span> \-: 右对齐</span><br><span class="line"><span class="bullet">-</span> 之后的每一行就是表格的具体内容</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$美观起见，你可以在每一格的文字两边加入若干空格，但没有影响。每一格的文字都可以为空（包括表头），只需有两边的 \| 即可，这时表格中的这一格也会为空。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （十一）、分隔线：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他内容。也可以在星号或是减号中间插入空格。</span><br><span class="line"></span><br><span class="line"><span class="strong">**例如**</span>：</span><br><span class="line"></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">* * *</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">***</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">*****</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- - -</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">---------------------------------------</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**效果**</span>：</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> * *</span><br><span class="line"></span><br><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">- - -</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---------------------------------------</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （十二）、反斜杠：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用`<span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>`标签倾斜），你可以在星号的前面加上反斜杠。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号。加上反斜杠后，这些符号都会以原来的方式显示：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">```markdown</span></span><br><span class="line"><span class="strong">\   反斜线</span></span><br><span class="line"><span class="strong">`   反引号</span></span><br><span class="line"><span class="strong">*   星号</span></span><br><span class="line"><span class="strong">_   底线</span></span><br><span class="line"><span class="strong">&#123;&#125;  花括号</span></span><br><span class="line"><span class="strong">[]  方括号</span></span><br><span class="line"><span class="strong">()  括弧</span></span><br><span class="line"><span class="strong">#   井字号</span></span><br><span class="line"><span class="strong">+   加号</span></span><br><span class="line"><span class="strong">-   减号</span></span><br><span class="line"><span class="strong">.   英文句点</span></span><br><span class="line"><span class="strong">!   惊叹号</span></span><br><span class="line"><span class="strong">```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （十三）、嵌入 HTML：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$根据 Markdown 的定义或者说原理可知：Markdown 渲染就是把它翻译成 HTML。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$那么, 我们可不可以在 Markdown 中直接使用 HTML 呢? 答案是肯定的。有能力的同学, 可以在写的 Markdown 文档中加入 HTML 代码，来实现一些 Markdown 本身无法实现的功能。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>例如<span class="strong">**：上文图片下面的那句居中的话：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">```markdown</span></span><br><span class="line"><span class="strong"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> 我的电脑桌面啦 <span class="language-xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span> </span></span><br><span class="line"><span class="strong">```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>效果<span class="strong">**：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> 我的电脑桌面啦 <span class="language-xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span> </span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">&gt; 不过，必须用 HTML 的地方其实很少。而且很多都可以用内联的 $\LaTeX$ 代替。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$比如，在表格中实现换行：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>例如<span class="strong">**：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">```markdown</span></span><br><span class="line"><span class="strong">//HTML 实现换行：</span></span><br><span class="line"><span class="strong">| Header1 | Header2                          |</span></span><br><span class="line"><span class="strong">|---------|----------------------------------|</span></span><br><span class="line"><span class="strong">| item 1  | 1. one<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>2. two<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>3. three |</span></span><br><span class="line"><span class="strong">```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>效果<span class="strong">**：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">| Header1 | Header2                          |</span></span><br><span class="line"><span class="strong">| ------- | -------------------------------- |</span></span><br><span class="line"><span class="strong">| item 1  | 1. one<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>2. two<span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span>3. three |</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>例如<span class="strong">**：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">```markdown</span></span><br><span class="line"><span class="strong">//LaTeX 实现换行：</span></span><br><span class="line"><span class="strong">| Header1 | Header2                          |</span></span><br><span class="line"><span class="strong">|---------|----------------------------------|</span></span><br><span class="line"><span class="strong">| item 1  | $ 1. one \\ 2. two \\ 3. three $ |</span></span><br><span class="line"><span class="strong">```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span>效果<span class="strong">**：（大家有没有觉得用 $\LaTeX$ 不仅仅能够换行，而且渲染出来的数字和英文更美观了呢？）</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">| Header1 | Header2                          |</span></span><br><span class="line"><span class="strong">| ------- | -------------------------------- |</span></span><br><span class="line"><span class="strong">| item 1  | $ 1. one \\ 2. two \\ 3. three $ |</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">### 五、$\LaTeX$ 公式：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$前文中多次提到了一个词：$\LaTeX$，相信大家一定对它已经有所好奇，那么它究竟是什么呢？应该如何使用呢？</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （一）、$\LaTeX$ 简介：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!\TeX$ 是一个由美国计算机教授高德纳编写的功能强大的排版软件，而为了让使用者可以更为方便的使用 $\TeX$的强大功能，美国计算机科学家莱斯利·兰伯特在 $20$ 世纪 $80$ 年代初期开发了一种基于 $\TeX$ 的排版系统—— $\LaTeX$。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$ $\LaTeX$ 是当今世界上最流行和使用最为广泛的 $\TeX$ 宏集。使用 $\LaTeX$ 基本上不需要使用者自己设计命令和宏等，因为 $\LaTeX$ 已经替你做好了。因此，即使使用者并不是很了解 $\TeX$，也可以在短短的时间内生成高质量的文档。**</span>而对于生成复杂的数学公式，$\LaTeX$ 表现的更为出色<span class="strong">**。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\LaTeX$作为一门能**</span>生成媲美书籍的质量的文章<span class="strong">**的语言，和 Markdown 一样可以用来写作，但是这里和这篇文章无关，就不再过多介绍了。不过有兴趣的同学可以参考 Reference 中的 $&#123;&#125;^5$ 自行学习。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （二）、内联公式：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$虽然 $\LaTeX$ 作为一门独立的排版系统，但是它的行内数学公式却可以在 Markdown 中作为内联公式所存在。就我个人而言，如此喜欢使用 Markdown，与能够生成复杂、漂亮的数学公式的内联公式密不可分。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$在 Markdown 文档中，将数学公式写在两个 \$ 之间，便代表插入了行内数学公式。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （三）、部分语法：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$由于 $\LaTeX$ 的功能十分强大，支持的公式类型也极其之多，在这里仅仅介绍一部分我个人认为比较常用的语法，其它更多可参考 Reference 中的 $&#123;&#125;^6$ 自行学习。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">1. 上标下标：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $a^2 a<span class="emphasis">_2 a^&#123;2+2&#125; a_</span>&#123;i,j&#125; a^2<span class="emphasis">_2 &#123;&#125;^2_</span>1\!X^3<span class="emphasis">_4$</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    // \!的作用在下面空格一栏有讲述。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    ```</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    $a^2 \ \ a_</span>2 \ \ a^&#123;2+2&#125; \ \ a<span class="emphasis">_&#123;i,j&#125; \ \ a^2_</span>2 \ \ &#123;&#125;^2<span class="emphasis">_1\!X^3_</span>4$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">2. 根号：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\surd \sqrt&#123;2&#125; \sqrt[n]&#123;&#125; \sqrt[n]&#123;x&#125;$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\surd \ \ \sqrt&#123;2&#125; \ \ \sqrt[n]&#123;&#125; \ \ \sqrt[n]&#123;x&#125;$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">3. 运算符、巨运算符：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $+ - \pm \mp \times \div$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $+ \ \ - \ \ \pm \ \ \mp \ \ \times \ \ \div$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\sum<span class="emphasis">_&#123;i=1&#125;^na_</span>i \sum\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i$</span></span><br><span class="line"><span class="strong">    // 求 a<span class="emphasis">_1+……+a_</span>n</span></span><br><span class="line"><span class="strong">    $\prod<span class="emphasis">_&#123;i=1&#125;^na_</span>i \prod\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i$</span></span><br><span class="line"><span class="strong">    // 求 a<span class="emphasis">_1*……*a_</span>n</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">     $\sum<span class="emphasis">_&#123;i=1&#125;^na_</span>i \ \ \sum\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i \ \ \prod<span class="emphasis">_&#123;i=1&#125;^na_</span>i \ \ \prod\limits<span class="emphasis">_&#123;i=1&#125;^na_</span>i$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">4. 分数、百分数：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\frac&#123;1&#125;&#123;2&#125;=0.5 \tfrac&#123;1&#125;&#123;2&#125;=0.5 \dfrac&#123;1&#125;&#123;2&#125;=0.5$</span></span><br><span class="line"><span class="strong">    $\dfrac&#123;1&#125;&#123;x+\dfrac&#123;3&#125;&#123;y+\dfrac&#123;1&#125;&#123;5&#125;&#125;&#125;$</span></span><br><span class="line"><span class="strong">    // 从美观的角度来看，我通常使用 \dfrac&#123;&#125;&#123;&#125; 作为分数</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\frac&#123;1&#125;&#123;2&#125;=0.5 \ \ \tfrac&#123;1&#125;&#123;2&#125;=0.5 \ \ \dfrac&#123;1&#125;&#123;2&#125;=0.5 \ \ \dfrac&#123;1&#125;&#123;x+\dfrac&#123;3&#125;&#123;y+\dfrac&#123;1&#125;&#123;5&#125;&#125;&#125;$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">5. 标准函数：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\sin a \cos b \tan c \left\vert a \right\vert$</span></span><br><span class="line"><span class="strong">    $\min(x,y) \max(x,y) \gcd(m,n) \operatorname&#123;lcm&#125;(m,n)$</span></span><br><span class="line"><span class="strong">     //未预先定义的标准函数，均可用 \operatorname&#123;&#125;() 的格式定义</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">     $\sin a \ \ \cos b \ \ \tan c \ \ \left\vert a \right\vert \ \ \min(x,y) \ \ \max(x,y) \ \ \gcd(m,n) \ \ \operatorname&#123;lcm&#125;(m,n)$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">6. 集合符号：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\&#123; \&#125; \emptyset \varnothing $</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\&#123; \&#125; \ \ \emptyset \ \ \varnothing $</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\in \notin \not\in \ni \not\ni$</span></span><br><span class="line"><span class="strong">    // \not 是在下一个字符上画斜杠。</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\in \ \ \notin \ \ \not\in \ \ \ni \ \ \not\ni$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\cap \cup \complement<span class="emphasis">_U A$</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    ```</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    $\cap \ \ \cup \ \ \complement_</span>U A$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\subset \supset \subseteqq \subsetneqq \supseteqq \supsetneqq$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\subset \ \ \supset \ \ \subseteqq \ \ \subsetneqq \ \ \supseteqq \ \ \supsetneqq$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">7. 关系符号：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $= \ne \neq \equiv \not\equiv \approx$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $= \ \ \ne \ \ \neq \ \ \equiv \ \ \not\equiv \ \ \approx$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $&lt; &gt; \leqslant \geqslant$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $&lt; \ \ &gt; \ \ \leqslant \ \ \geqslant$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">8. 几何符号：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\parallel \perp \angle \sphericalangle \measuredangle 45^\circ$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\parallel \ \ \perp \ \ \angle \ \ \sphericalangle \ \ \measuredangle \ \ 45^\circ$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">9. 逻辑符号：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\forall \exists \nexists \therefore \because \And \&amp;$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\forall \ \ \exists \ \ \nexists \ \ \therefore \ \ \because \ \ \And \ \ \&amp;$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">10. 希腊字母：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\alpha \beta \gamma \eta \theta \mu \pi \rho \omega \phi$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\alpha \beta \gamma \eta \theta \mu \pi \rho \omega \phi$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">11. 空格和换行：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">     ```markdown</span></span><br><span class="line"><span class="strong">     $x\!y \\ xy \\ x\,y \\ x\:y \\ x\;y \\ x\ y \\ x\quad y \\ x\qquad y$</span></span><br><span class="line"><span class="strong">     ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">     $$</span></span><br><span class="line"><span class="strong">     \begin&#123;align<span class="emphasis">*&#125;</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">     x\!y &amp;宽度为-\dfrac&#123;m&#125;&#123;6&#125;\\ xy &amp;宽度为0\\ x\,y &amp;宽度为\dfrac&#123;m&#125;&#123;6&#125;\\ x\:y &amp;宽度为\dfrac&#123;2m&#125;&#123;9&#125;\\ x\;y &amp;宽度为\dfrac&#123;5m&#125;&#123;18&#125;\\ x\ y &amp;宽度为\dfrac&#123;m&#125;&#123;3&#125;\\ x\quad y &amp;宽度为m\\ x\qquad y&amp;宽度为2m</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">     \end&#123;align*</span>&#125;</span></span><br><span class="line"><span class="strong">     $$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    &gt; 在文档中，段落前空两格大概是 $\dfrac&#123;5m&#125;&#123;3&#125;$ 的宽度，所以在段首键入 `$\qquad\!\!$` 即可做到。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">12. 其它：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    $\TeX \LaTeX$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\TeX \ \ \LaTeX$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    // 二项式系数</span></span><br><span class="line"><span class="strong">    $\dbinom&#123;n&#125;&#123;m&#125;=\dbinom&#123;n&#125;&#123;n-m&#125;=C<span class="emphasis">_n^m=C_</span>n^&#123;n-m&#125;$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\dbinom&#123;n&#125;&#123;m&#125;=\dbinom&#123;n&#125;&#123;n-m&#125;=C<span class="emphasis">_n^m=C_</span>n^&#123;n-m&#125;$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    ```markdown</span></span><br><span class="line"><span class="strong">    // 方程组</span></span><br><span class="line"><span class="strong">    $\begin&#123;cases&#125;2x+9y-5z=10\\4x+20y+z=24\\x-\dfrac&#123;1&#125;&#123;2&#125;y+3z=8\end&#123;cases&#125;$</span></span><br><span class="line"><span class="strong">    ```</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">    $\begin&#123;cases&#125;2x+9y-5z=10\\4x+20y+z=24\\x-\dfrac&#123;1&#125;&#123;2&#125;y+3z=8\end&#123;cases&#125;$</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$虽然看起来挺多，但是其实还有颜色、字体更多的公式和符号的语法没有介绍，更多可参考 Reference 中的 $&#123;&#125;^6$ 自行学习。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">### 六、Markdown 编辑器 Typora：</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$学会了 Markdown 的语法后，大家就可以在很多网站上进行相应的编辑。但是如果想在本地进行利用 Markdown 书写，并且导出为各种格式的文档，就需要一款 Markdown 编辑器。在众多的 Markdown 编辑器中，在这里推荐给大家一款相当好用的 Markdown 编辑器：Typora.</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">#### （一）、什么是 Typora?</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$Typora 是一款轻便、简洁、**</span>免费<span class="strong">**、轻量级的 Markdown 编辑器，它是一款跨平台的 Markdown 写作软件，具备写作 Markdown 的绝大部分功能，你可以在 Windows,Mac OS，甚至各大 Linux 发行版上使用它。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">$\qquad\!\!$作为一款 **</span>富文本的编辑模式 +** <span class="strong">**Markdown 源格式**</span> 的编辑器，Typora 支持<span class="strong">**即时渲染**</span>技术，即<span class="strong">**“所见即所得”**</span>。我们可以像编辑 Word 文档一样流畅地编辑 Markdown 文档。这是 Typora 与其它各种 Markdown 编辑器最大的区别，不用像其它编辑器一样拥有繁重的工具栏以及必须分为左右两列：++ 源码 ++|++ 显示 ++，十分便捷。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （二）、外观：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$图标样式：</span><br><span class="line"></span><br><span class="line">[<span class="string">&lt;img src=&quot;https://s3.ax1x.com/2021/02/02/yu4Oat.png&quot; alt=&quot;yu4Oat.png&quot; style=&quot;zoom:50%;&quot; /&gt;</span>](<span class="link">https://imgchr.com/i/yu4Oat</span>)</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$光是图标是不是就已经感觉非常简洁了呢？还有更加简洁的就是，其它的 Markdown 编辑器一般都有一个工具栏并且一半是编辑窗口，一半是预览窗口：[<span class="string">![yu50eA.png</span>](<span class="link">https://s3.ax1x.com/2021/02/02/yu50eA.png</span>)](<span class="link">https://imgchr.com/i/yu50eA</span>)</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$但是 Typora 的窗口：[<span class="string">![yu5jm9.png</span>](<span class="link">https://s3.ax1x.com/2021/02/02/yu5jm9.png</span>)](<span class="link">https://imgchr.com/i/yu5jm9</span>)</span><br><span class="line"></span><br><span class="line">既不存在工具栏也仅仅为单独一个界面。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （三）、主题：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$细心的同学们一定能注意到上面 Typora 页面顶部有一个<span class="strong">**主题**</span>菜单，选择后发现其中有五个不同的主题选项：Github,Newsprint,Night,Pixyll,Whitey.</span><br><span class="line"></span><br><span class="line">[<span class="string">![yuIJ7n.png</span>](<span class="link">https://s3.ax1x.com/2021/02/02/yuIJ7n.png</span>)](<span class="link">https://imgchr.com/i/yuIJ7n</span>)</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$这里放一张来自 Typora 官网的图片，从左到右依次为 Github,Newsprint,Night,Whitey 主题的页面。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$看到了这么几个主题，有没有想都体验一遍的冲动？不用着急，Typora 不仅仅支持这五个自带的主题，更支持定制化主题，开发者可以开发主题。如果你对 CSS 有所涉及，便能做出专属于自己的主题。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （四）、对于 Markdown 的支持：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$除了仅仅支持普通的 Markdown 语法外，Typora 还有更加便捷的 Markdown 使用方式。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$首先是一些有关的设置：</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 文件 $\rightarrow$ 偏好设置 $\rightarrow$ Markdown</span></span><br><span class="line"></span><br><span class="line">[<span class="string">![yuor28.png</span>](<span class="link">https://s3.ax1x.com/2021/02/02/yuor28.png</span>)](<span class="link">https://imgchr.com/i/yuor28</span>)</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$这些设置还是蛮重要的，否则内联公式 $\LaTeX$、==高亮== 等扩展性的语法均无法使用。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$再者，以 Typora 较为突出的 表格、代码块、公式块 三个方面进行一下简单的介绍：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 表格：</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;ctrl+t / 鼠标右键 $\rightarrow$ insert / 段落 $\rightarrow$ 表格</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    然后它会出现让我们选择**行列数**的窗口，这样的话就不用十分麻烦地去敲 Markdown 中表格的语法了。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuTSxO.png](https://s3.ax1x.com/2021/02/02/yuTSxO.png)](https://imgchr.com/i/yuTSxO)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    $4\times4$ 的表格：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuozRK.png](https://s3.ax1x.com/2021/02/02/yuozRK.png)](https://imgchr.com/i/yuozRK)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    但是这样就无法去编辑其格式无法控制对齐了啊？没事的，通过左上角的**调整表格**，轻松可以做到。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 代码块：</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt; ctrl+shift+k / 鼠标右键 $\rightarrow$ insert / 段落 $\rightarrow$ 代码块</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    Typora 可以通过你指定的语言来高亮代码，并且支持上百种语言，足够一般的用途。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuT5TA.png](https://s3.ax1x.com/2021/02/02/yuT5TA.png)](https://imgchr.com/i/yuT5TA)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 公式块：</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;ctrl+shift+m / 鼠标右键 $\rightarrow$ insert / 段落 $\rightarrow$ 公式块</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    Typora 不仅仅支持行内式，也支持行外的公式块。由于相当于处于 \$\$ 与 \$\$ 之间，所以会被强制居中。这种十分大气的行外式特别适合巨运算符的书写：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuHCEd.png](https://s3.ax1x.com/2021/02/02/yuHCEd.png)](https://imgchr.com/i/yuHCEd)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="quote">&gt; 这三点不仅仅可以利用 Typora 自身的属性操作，别忘了也可以直接用 Markdown 的语法进行操作哦！</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （五）、专注模式与打字机模式：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$Typora 同时支持两种写作模式：专注模式与打字机模式。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 专注模式（Focus Mode）：</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt; F8 / 视图 $\rightarrow$ 专注模式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    在这个模式下，当你在编辑某一行文字的时候其他行会变成灰色。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuvkdO.png](https://s3.ax1x.com/2021/02/03/yuvkdO.png)](https://imgchr.com/i/yuvkdO)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    专注模式比较适合与全屏同时开启，连工具栏都不存在，自然简洁到超级舒服。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 打字机模式：</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt; F9 / 视图 $\rightarrow$ 打字机模式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    在这个模式下，你的光标会始终处于屏幕中间，我们的眼光就能始终正对屏幕中央。就我个人来讲非常喜欢使用这个模式，不仅仅是因为不用动眼睛，更因为光标的自动换行能够更加便于仅键盘进行操作。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuvskF.png](https://s3.ax1x.com/2021/02/03/yuvskF.png)](https://imgchr.com/i/yuvskF)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    相信大家能够捕捉到光标的位置。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="quote">&gt; 这两种模式并不相斥，更是能够同时使用的哦！</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### （六）、字数统计、拼写检查与源代码模式：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$相信大家一定对前面图片上页面底部的几个图标产生了好奇，下面就来简单地介绍一下：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 字数统计：</span><br><span class="line"></span><br><span class="line"><span class="code">    和 Word 文档一样，Typora 也支持实时统计文档的字数，位于页面的右下角：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuxEn0.png](https://s3.ax1x.com/2021/02/03/yuxEn0.png)](https://imgchr.com/i/yuxEn0)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    *哇！这篇文章也已经六千多词了欸！*</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 拼写检查：</span><br><span class="line"></span><br><span class="line"><span class="code">    和 Word 文档一样，Typora 也支持实时的拼写检查，位于字数统计旁边：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [&lt;img src=&quot;https://s3.ax1x.com/2021/02/03/yuxM9J.png&quot; alt=&quot;yuxM9J.png&quot; style=&quot;zoom:50%;&quot; /&gt;](https://imgchr.com/i/yuxM9J)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    *虽然在打中文的时候从来没见过它报错……*</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 源代码模式：</span><br><span class="line"></span><br><span class="line"><span class="code">    即显示文档的 Markdown 源码的一种模式，开关位于页面左下角旁：[![yuxNND.png](https://s3.ax1x.com/2021/02/03/yuxNND.png)](https://imgchr.com/i/yuxNND)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    开启后就能够以纯文本的格式显示文档的 Markdown 源码：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuxw3d.png](https://s3.ax1x.com/2021/02/03/yuxw3d.png)](https://imgchr.com/i/yuxw3d)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    *说实话我还真没开着源代码模式打过文档。*</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#### （七）、侧边栏与自生成目录：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$还差页面最右下角的一个图标没有介绍了。没错！你没猜错！就是<span class="strong">**侧边栏**</span>。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 侧边栏：</span><br><span class="line"></span><br><span class="line"><span class="code">    在显示侧边栏后，会发现上面有两个子目录：文件与大纲。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    文件就是显示该文档所在的目录结构以及该文档所在的目录里其它可被导入 Typora 的文档：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [&lt;img src=&quot;https://s3.ax1x.com/2021/02/03/yuzkPe.png&quot; alt=&quot;yuzkPe.png&quot; style=&quot;zoom:50%;&quot; /&gt;](https://imgchr.com/i/yuzkPe)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    大纲即由现在编辑的文档的标题组成的目录结构：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [&lt;img src=&quot;https://s3.ax1x.com/2021/02/03/yuz3GQ.png&quot; alt=&quot;yuz3GQ.png&quot; style=&quot;zoom:50%;&quot; /&gt;](https://imgchr.com/i/yuz3GQ)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 自生成目录：</span><br><span class="line"></span><br><span class="line"><span class="code">    在文章开始写入 `[TOC]` 将自动在文章生成目录：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    [![yuztrq.md.png](https://s3.ax1x.com/2021/02/03/yuztrq.md.png)](https://imgchr.com/i/yuztrq)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    *并且能够支持文档内部的超链接哦！*</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#### （八）、文本导出：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$文本导出也能够算是 Typora 非常方便的一大特性，Typora 本身能够支持导出 PDF 文档、两种样式的 HTML 文档以及图像！</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$同时也可以导出 Word,Epub,LaTeX 等其它多种文件格式，不过需要安装 pandoc 进行辅助。不过无须多虑的是，在并未安装 pandoc 时，点击 Word 文档等即可进入 Typora 对于 pandoc 的安装引导，十分方便地安装完甚至不用学 pandoc 的各种文件转换命令即可在 Typora 中直接使用。</span><br><span class="line"></span><br><span class="line"><span class="section">#### （九）、下载方式：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$讲了这么多，相信大家已经对用 Typora 编写 Markdown 跃跃欲试了！那么在哪里能够下载呢？</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$进入 Typora 官网 <span class="language-xml">&lt;https://www.typora.io/&gt;</span> 即可！</span><br><span class="line"></span><br><span class="line">[<span class="string">![yKSkwV.png</span>](<span class="link">https://s3.ax1x.com/2021/02/03/yKSkwV.png</span>)](<span class="link">https://imgchr.com/i/yKSkwV</span>)</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$下滑到底部后，即可选择下载哪种 Typora ，下载完安装后即可使用！</span><br><span class="line"></span><br><span class="line"><span class="section">### 七、结语：</span></span><br><span class="line"></span><br><span class="line">$\qquad\!\!$完稿于 2021/2/3 凌晨。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$写了一段时间的班刊终于完美收官了！相信大家看完之后一定会有所收获。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$文章的内容和标题<span class="strong">**相照应**</span>，仅仅是一篇~~自我感觉良好的~~ Markdown 入门教程。无论是 Markdown 的扩展，还是 $\LaTeX$ 五花八门的公式，还是 Typora 的部分功能，我都有没介绍到的地方。而且我接触 Markdown 的时间也不算长，文章如有疏漏不当之处，请各位读者海涵。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$关于本文，文章同步发布于 <span class="language-xml">&lt;https://lhrg.github.io/Markdown标记语言入门&gt;</span>，本文的 Markdown源码 同步发布于 <span class="language-xml">&lt;https://lhrg.github.io/Markdown标记语言入门源码&gt;</span>。</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$如果你看完这篇文章后不想尝试 Markdown 的写作，那就权当是增加了知识；如果你看完这篇文章后对用 Markdown 写作充满了期待，那就现在就用 Markdown 写一篇文章吧！相信你也会体验到这个有数百万人使用的语言的优美之处！</span><br><span class="line"></span><br><span class="line">$\qquad\!\!$最后，由衷地感谢班主任老师及同学们组织的这次班刊编写活动，给了我写这篇文章的一个机会；感谢我参考的文章的作者，让我有了这篇文章的素材；也要感谢帮助我审稿校验的朋友们，是你们给予了我投稿的支持；更要感谢每一位读完这篇文章的读者，衷心地希望这篇文章能够使大家有所受益！</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">Reference:</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> [<span class="string">Markdown 标记语言指北</span>](<span class="link">https://www.cnblogs.com/ubospica/p/11065405.html</span>) <span class="emphasis">*学长的文章哦！*</span></span><br><span class="line"><span class="bullet">2.</span> [<span class="string">Markdown标记语法，从入门到熟练</span>](<span class="link">https://zhuanlan.zhihu.com/p/112327926</span>)</span><br><span class="line"><span class="bullet">3.</span> [<span class="string">洛谷 Markdown 格式手册</span>](<span class="link">https://www.luogu.com.cn/blog/luogu/how-to-use-markdown</span>)</span><br><span class="line"><span class="bullet">4.</span> [<span class="string">也许 Markdown 并不是一个好选择</span>](<span class="link">https://zhuanlan.zhihu.com/p/68293222</span>)</span><br><span class="line"><span class="bullet">5.</span> [<span class="string">LaTeX入门</span>](<span class="link">https://www.luogu.com.cn/blog/IowaBattleship/latex-ru-men</span>)</span><br><span class="line"><span class="bullet">6.</span> [<span class="string">LaTeX数学公式大全</span>](<span class="link">https://www.luogu.com.cn/blog/IowaBattleship/latex-gong-shi-tai-quan</span>)</span><br><span class="line"><span class="bullet">7.</span> [<span class="string">Typora ---一款简洁的Markdown编辑器</span>](<span class="link">https://www.cnblogs.com/-guz/p/10258557.html</span>)</span><br><span class="line"><span class="bullet">8.</span> [<span class="string">Typora - 不要太棒的Markdown编辑器</span>](<span class="link">https://zhuanlan.zhihu.com/p/44998516</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>博弈论主要研究公式化了的激励结构间的相互作用，是研究具有斗争或竞争性质现象的数学理论和方法。
博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。生物学家使用博弈理论来理解和预测进化论的某些结果。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>在此总结四种常见的博弈结论：</p>
<span id="more"></span>
<ul>
<li>1、巴什博弈（Bash Game） ：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>只有一堆 <span
class="math inline">\(n\)</span>
个石子，两个人轮流从中取，规定每次最少取一个，最多取 <span
class="math inline">\(m\)</span> 个，最后取光者为胜。</p>
<p><span class="math inline">\(\qquad\!\!n \bmod (m+1)\)</span> 不为
<span class="math inline">\(0\)</span> 则先手必胜，反之则后手必胜：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">if</span>(n%(m<span class="number">+1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;先手必胜\n&quot;</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;后手必胜\n&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>2、威佐夫博弈（Wythoff Game）：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2252">P2252
[SHOI2002]取石子游戏|【模板】威佐夫博弈</a></p>
<p><span class="math inline">\(\qquad\!\!\)</span>规定 <span
class="math inline">\(n&lt;m\)</span>，则<span class="math inline">\(n
\not = \left\lfloor \dfrac{1+\sqrt{5}}{2}(m-n) \right\rfloor\)</span>
时先手必胜，反之后手必胜。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">if</span>(n&gt;m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(n,m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n==(<span class="type">int</span>)((<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="number">5</span>))*<span class="number">0.5</span>*(m-n)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3、尼姆博弈（Nimm Game）：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2197">P2197
【模板】nim游戏</a>：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>所有数的异或和不为
<span class="math inline">\(0\)</span> 则先手必胜，反之后手必胜。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t,n;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> k=<span class="number">0</span>,b;</span><br><span class="line">		n=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="keyword">while</span>(n--)</span><br><span class="line">		&#123;</span><br><span class="line">			b=<span class="built_in">qread</span>();</span><br><span class="line">			k^=b;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4、斐波那契博弈（Fibonacci Game）</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>有一堆 <span
class="math inline">\(n\)</span>
个石子，两人轮流取，先手最少取一个，至多无上限，但不能把物品取完，之后每次取的物品数不能超过上一次取的物品数的二倍且至少为一件，取走最后一件物品的人获胜。</p>
<p><span class="math inline">\(\qquad\!\! n\not\in\)</span>
斐波那契列，则先手必胜，反之后手必胜。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,pre,now;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	pre=now=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(now&lt;=n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(now==n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;后手必胜\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">swap</span>(pre,now);</span><br><span class="line">		now+=pre; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;先手必胜\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>在 LaTeX 中实现加圈&amp;脚注处编号与正文对齐的脚注</title>
    <url>/%E5%9C%A8-LaTeX-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%9C%88-%E8%84%9A%E6%B3%A8%E5%A4%84%E7%BC%96%E5%8F%B7%E4%B8%8E%E6%AD%A3%E6%96%87%E5%AF%B9%E9%BD%90%E7%9A%84%E8%84%9A%E6%B3%A8/</url>
    <content><![CDATA[<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%导言区</span></span><br><span class="line"><span class="comment">%新增命令：改变脚注的编号格式</span></span><br><span class="line"><span class="comment">%第一步，让脚注编号用上带圈数字</span></span><br><span class="line"><span class="comment">%调用 xunicode-addon 宏包</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xunicode-addon&#125;</span><br><span class="line"><span class="keyword">\xeCJKDeclareCharClass</span>&#123;Default&#125;&#123;&quot;24EA, &quot;2460-&gt;&quot;2473, &quot;3251-&gt;&quot;32BF&#125;</span><br><span class="line"><span class="keyword">\setmainfont</span>&#123;Garamond-Math.otf&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\thefootnote</span>&#125;&#123;<span class="keyword">\textcircled</span>&#123;<span class="keyword">\arabic</span>&#123;footnote&#125;&#125;&#125;</span><br><span class="line"><span class="comment">%第二步，在页面底部的脚注内容中，取消编号的上标样式</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;scrextend&#125;</span><br><span class="line"><span class="comment">%缩进等水平距离均可调，现使用 chat-GPT 生成的距离看上去很舒服</span></span><br><span class="line"><span class="keyword">\deffootnote</span>&#123;2em&#125;&#123;1.5em&#125;&#123;<span class="keyword">\thefootnotemark</span><span class="keyword">\hspace</span>&#123;0.5em&#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>在 LaTeX 数学模式中 &amp; 表示对齐时前后的间距问题</title>
    <url>/%E5%9C%A8-LaTeX-%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%BC%8F%E4%B8%AD-%E8%A1%A8%E7%A4%BA%E5%AF%B9%E9%BD%90%E6%97%B6%E5%89%8D%E5%90%8E%E7%9A%84%E9%97%B4%E8%B7%9D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>这应该是本站的第一篇正式博文，所以希望是一篇能够代表本站风格的有趣又不失深度的文章，在搭建博客前便计划好了，留给这个从我初识
<span class="math inline">\(\mathrm{\LaTeX}\)</span>
起便感到困惑不解的问题——“在 LaTeX 数学模式中 &amp;
表示对齐时前后的间距问题”。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>在 <span
class="math inline">\(\mathrm{\LaTeX}\)</span>
中使用需要对齐的多行公式时，最常使用的便是 <code>amsmath</code>
宏包提供的 <code>align</code> 环境，它使用列分隔符 &amp;
将公式进行对齐，一般情况下，&amp;
放在等号左边。但是一个等号后的公式的长度超过正常的一行长度需要断行时，根据
GB/T 7713.2-2022，一般在二元关系符后，二元运算符前断开，所以需要将 &amp;
放到等号右侧，而根据经典 <span
class="math inline">\(\mathrm{\LaTeX}\)</span> 入门手册
<em>lshort-zh-cn</em> 中所述，此时需要在等号后添加一对括号 {}
以产生正常的间距：</p>
<p><img src="/images/2025-02-16%2020.46.30.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span>虽然各种 <span
class="math inline">\(\mathrm{\LaTeX}\)</span>
入门教程中都存在这一对括号，但是对于这一对括号 {}
的作用也都没有进行仔细的/原理上的讲解。而在 LLM 还没有如此发达的我的
<span class="math inline">\(\mathrm{\LaTeX}\)</span>
初学期，简单使用搜索引擎也未能搜到相关信息，所以便一度搁置，直到这个寒假终于有精力重拾起这个问题，在
<a href="http://www.latexstudio.net">latexstudio</a>、<a
href="http://tex.stackexchange.com">tse</a> 和 AI
工具的帮助下，终于搞明白了这一对括号背后的原理及其深刻意义，倍感喜悦，遂整理成文于此，与大家一起分享下我学到的知识。</p>
<span id="more"></span>
<h3 id="问题整理">问题整理</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>在进行基本原理的陈述前，我们先来整理一下这篇文章涉及到的问题。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>同样是非常经典的 <span
class="math inline">\(\mathrm{\LaTeX}\)</span>
入门书籍，刘海洋先生的《LaTeX
入门》一书中对于这个问题的例子有着更复杂的表述方式：</p>
<p><img src="/images/2025-02-16%2021.10.30.png" /></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>左侧的第一种方式和上面的
<em>lshort-zh-cn</em>
中的方式相同，都只是多了一对括号，但是右侧的另一种方式中的“幻影”和
<code>\mathrel</code>
命令又是什么呢？我们将在下面逐步展开，从基本原理讲起直至能够说明这两种方式的等价性。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>另外，<code>align</code>
环境作为 <code>amsmath</code>
宏包中多行公式中的一个大家族，除了其本身还有 <code>aligned</code>、
<code>alignat</code> 及其组合或加*的环境，这些环境有哪些差异？使用 &amp;
进行分隔和对齐又有哪些便利的应用，也会在最后一部分进行简单的介绍。</p>
<h3 id="基本原理">基本原理</h3>
<p><span class="math inline">\(\qquad\!\!\)</span>在 <span
class="math inline">\(\mathrm{\LaTeX}\)</span> 数学模式中，<strong>math
atoms</strong>
是构成数学公式的最小排版单元，每个字符或符号都会被分类为不同的
atom（原子），这些分类决定了公式中元素的间距和排版规则。在 <span
class="math inline">\(\mathrm{\TeX}\)</span> 中共有 <span
class="math inline">\(13\)</span> 种 atom：</p>
<blockquote>
<p><strong>Ord Op Bin Rel Open Close Punct Inner</strong></p>
<p><strong>Over Under Acc Rad Vcent</strong></p>
</blockquote>
<p>其中，第二行的五种在考虑间距时被视为 <strong>Ord</strong> 即可。</p>
<p>我们先简单介绍一下第一行的几种原子，再去看一下在排版过程中它们之间的间距是如何安排的。</p>
<ol type="1">
<li><p>Ord atom（普通原子）</p>
<p>默认的原子类型，用于普通数字、字母或无明显语法功能的符号，可使用
<code>\mathord</code> 命令手动指定。</p>
<p>e.g. <code>a, 2, \alpha, \mathrm&#123;xyz&#125;</code></p></li>
<li><p>Op atom（操作符原子）</p>
<p>大型运算符（如求和、积分符号），通常带有上下限，可使用
<code>\mathop</code> 命令手动指定。</p>
<p>e.g. <code>\sum, \int</code></p></li>
<li><p>Bin atom（二元运算符原子）</p>
<p>连接两个被操作数的运算符，如加减乘除，可使用 <code>\mathbin</code>
命令手动指定。</p>
<p>e.g. <code>+, -, \times</code></p></li>
<li><p>Rel atom（关系符原子）</p>
<p>表示具有逻辑关系的符号，如等于、不等号、箭头等，可使用
<code>\mathrel</code> 命令手动指定。</p>
<p>e.g. <code>=, \leq, \rightarrow</code></p></li>
<li><p>Open/Close atom（开闭括号原子）</p>
<p>括弧类符号，如 <code>(</code>、<code>[</code>、<code>\&#123;</code>
等，可使用 <code>\mathopen</code> 和 <code>\mathclose</code>
命令手动指定。</p>
<p>e.g. <code>([])</code></p></li>
<li><p>Punct atom（标点符号原子）</p>
<p>公式中的标点符号，如逗号、分号等，可使用 <code>\mathpunct</code>
命令手动指定。</p>
<p>e.g. <code>, ;</code></p></li>
<li><p>Inner atom（内部结构原子）</p>
<p>由特定结构（如分数、根号、绝对值）产生的原子，可使用
<code>\mathinner</code> 命令手动指定。</p>
<p>e.g.
<code>\frac&#123;a&#125;&#123;b&#125;, \sqrt&#123;x&#125;, \left| \sum_&#123;i&#125; v_i \right|</code></p>
<p>注意这里由 <code>\left...\right</code> 命令包裹起来的整体被视为一个
Inner atom，这就是为什么在一般的数学公式中使用
<code>\left...\right</code> 时会产生间距问题，所以需要使用
<code>mleftright</code> 宏包或 <code>physics2</code>
宏包这样的宏包进行纠正。</p></li>
</ol>
<p><span
class="math inline">\(\qquad\!\!\)</span>我们以简单的公式整理为例，<code>$a+b=c$</code>
相应的序列即</p>
<blockquote>
<p><strong>Ord Bin Ord Rel Ord</strong></p>
</blockquote>
<p><code>$(a+b)\cdot c=ac+bc$</code> 相应的序列即</p>
<blockquote>
<p><strong>Open Ord Bin Ord Close Bin Ord Rel Ord Ord Bin Ord
Ord</strong></p>
</blockquote>
<p>括号中的部分被称为子公式，被视为 Ord atom。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>
对于这些不同种类的原子，<span
class="math inline">\(\mathrm{\TeX}\)</span>
按照如下表格在其中插入间距，表格中的指标与原子按照如下的方式进行对应：0
= <strong>Ord</strong>，1 = <strong>Op</strong>，2 =
<strong>Bin</strong>，3 = <strong>Rel</strong>，4 =
<strong>Open</strong>，5 = <strong>Close</strong>，6 =
<strong>Punct</strong>，I = <strong>Inner</strong>。 <img
src="/images/2025-02-21%2018.46.00.png" /> 本表格来自于 Reference
2，其中行指标表示近邻的两个原子中左侧的那个，列指标表示近邻的两个原子中右侧的那个，表格中的数字大致表示这两个近邻原子的间距。如果数字在括号中，则当公式以下标/上标样式排版时，不会插入空格。</p>
<ul>
<li><code>0</code> = no space</li>
<li><code>1</code> = thin space (<code>\thinmuskip</code>)</li>
<li><code>2</code> = medium space (<code>\medmuskip</code>)</li>
<li><code>3</code> = thick space (<code>\thickmuskip</code>)</li>
<li><code>*</code> = impossible combination</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>了解了最基本的 atom
之后，我们就可以来看一下 <code>align</code>
环境中的“对齐”，是如何影响公式中各部分的间距。最核心的原理就是 <span
class="math inline">\(\mathrm{\LaTeX}\)</span> 对于列分隔符 &amp;
的处理： <figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hfil</span> <span class="built_in">$</span><span class="keyword">\displaystyle</span> <span class="params">#</span><span class="built_in">$</span> <span class="built_in">&amp;</span> <span class="built_in">$</span><span class="keyword">\displaystyle</span> &#123;&#125;<span class="params">#</span><span class="built_in">$</span> <span class="keyword">\hfil</span></span><br></pre></td></tr></table></figure></p>
<p>其中 # 分别代表 &amp; 前后的实际内容，&amp; 前的内容于 &amp;
处右对齐，中间没有任何其他元素；&amp; 后的内容前添加了一个空的子公式
<code>\displaystyle &#123;&#125;</code> 后于 &amp; 处左对齐。这自然就产生了当
&amp;
放在二元关系符前后时间距上的区别，我们还是以一个具体的例子来看：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">	a<span class="built_in">&amp;</span>=b+c</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">	a=<span class="built_in">&amp;</span>b+c</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
\begin{align*}
    a&amp;=b+c
\end{align*}
\]</span></p>
<p><span class="math display">\[
\begin{align*}
    a=&amp;b+c
\end{align*}
\]</span></p>
<p>其中前式 &amp; 放在了二元关系符 = 前，后式 &amp; 放在了二元关系符 =
后，能够直观地看到两者的区别。前式中 &amp; 左侧为
<code>Ord</code>，右侧为
<code>Ord Rel Ord Bin Ord</code>，两者分别右对齐、左对齐在一起，自然产生了正确的间距；后式中
&amp; 左侧为 <code>Ord Rel</code> ，右侧为
<code>Ord Ord Bin Ord</code>，两者分别右对齐、左对齐在一起，中间便缺少了正常情况下
Rel atom 和 Ord atom 之间的 thick space
(<code>\thickmuskip</code>)。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>所以要解决后式中的间距问题，就需要加入各种
<span class="math inline">\(\mathrm{\LaTeX}\)</span>
入门教程中都存在的关系符和 &amp; 中的那对括号 {}，代表在 &amp;
前的内容后添加了一个空的子公式后再于 &amp;
处右对齐，依然是上面的那个例子，在加了一对括号 {} 后：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">	a=&#123;&#125;<span class="built_in">&amp;</span>b+c</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
\begin{align*}
    a={}&amp;b+c
\end{align*}
\]</span></p>
<p>&amp; 左侧为 <code>Ord Rel Ord</code>，右侧为
<code>Ord Ord Bin Ord</code>，两者分别右对齐、左对齐在一起，虽然中间没有间距，但是在左侧内部自然已经产生了
Rel atom 和 Ord atom 之间的 thick space
(<code>\thickmuskip</code>)，等价于以下手动添加空格的情况：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;align*&#125;</span><br><span class="line">	a=<span class="keyword">\mskip</span><span class="keyword">\thickmuskip</span> <span class="built_in">&amp;</span> b+c</span><br><span class="line"><span class="keyword">\end</span>&#123;align*&#125;</span><br></pre></td></tr></table></figure>
<p>都能够使公式中产生正常的间距。</p>
<p>注：在这里我们再整理一遍 <span
class="math inline">\(\mathrm{\TeX}\)</span> 中的命令的长度及其对应的
<span class="math inline">\(\mathrm{\LaTeX}\)</span>
中的空格的长度：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>首先是单位：<code>mu</code>
(math unit)
是数学模式下特有的相对单位，与字体大小相关。<strong>换算关系</strong>：<code>1em = 18mu</code>。例如：</p>
<ul>
<li><code>\mskip 18mu</code> 等效于
<code>\hspace&#123;1em&#125;</code>（在数学模式中）。</li>
<li>LaTeX 预定义的间距命令实际基于 <code>mu</code>：</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\,</span>  → <span class="keyword">\mskip</span>  3mu = <span class="keyword">\mskip</span><span class="keyword">\thinmuskip</span>   <span class="comment">% 小间距</span></span><br><span class="line"><span class="keyword">\:</span>  → <span class="keyword">\mskip</span>  4mu = <span class="keyword">\mskip</span><span class="keyword">\medmuskip</span>    <span class="comment">% 中间距</span></span><br><span class="line"><span class="keyword">\;</span>  → <span class="keyword">\mskip</span>  5mu = <span class="keyword">\mskip</span><span class="keyword">\thickmuskip</span>  <span class="comment">% 大间距</span></span><br><span class="line"><span class="keyword">\!</span>  → <span class="keyword">\mskip</span> -3mu = <span class="keyword">\mskip</span>-<span class="keyword">\thinmuskip</span>  <span class="comment">% 负间距</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对文本模式中的空格：</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">x<span class="keyword">\ </span>y      → em/3</span><br><span class="line">x<span class="keyword">\quad</span> y  → em</span><br><span class="line">x<span class="keyword">\qquad</span> y → 2em</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>x<span class="keyword">\!</span>y <span class="keyword">\\</span> xy <span class="keyword">\\</span> x<span class="keyword">\,</span>y <span class="keyword">\\</span> x<span class="keyword">\:</span>y <span class="keyword">\\</span> x<span class="keyword">\;</span>y <span class="keyword">\\</span> x<span class="keyword">\ </span>y <span class="keyword">\\</span> x<span class="keyword">\quad</span> y <span class="keyword">\\</span> x<span class="keyword">\qquad</span> y<span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
\begin{align*}
x\!y &amp;宽度为\ -\dfrac{1}{6}\text{em}\\ xy &amp;宽度为\ 0\text{em}\\
x\,y &amp;宽度为\ \dfrac{1}{6}\text{em}\\ x\:y &amp;宽度为\
\dfrac{2}{9}\text{em}\\ x\;y &amp;宽度为\ \dfrac{5}{18}\text{em}\\ x\ y
&amp;宽度为\ \dfrac{1}{3}\text{em}\\ x\quad y &amp;宽度为\ \text{em}\\
x\qquad y&amp;宽度为\ 2\text{em}
\end{align*}
\]</span></p>
<blockquote>
<p>注：在文档中，段落前空两格大概是 <span
class="math inline">\(\dfrac{5}{3}\text{em}\)</span>
的宽度，所以在段首键入 <code>$\qquad\!\!$</code> 即可做到。</p>
</blockquote>
<h3 id="幻影-phantom">幻影 <code>\phantom</code></h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>基本的原理已经清楚，一般的情况下的对齐需求（e.g.
在需要多行公式折行后在二元运算符前&amp;二元关系符后进行对齐），我们已经知道能够通过在列分隔符
&amp; 前添加一对大括号 {}
将间距调整正确，但是在面对复杂的排版需求时，就不仅仅是这么简单就能够实现的。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>比如说在<a
href="#问题整理">问题整理</a>中图片中的右侧实现，在缺少关系符的时候，我们如何进行对空间进行占位进而进行更好的对齐呢？这就需要用到
<span class="math inline">\(\mathrm{\LaTeX}\)</span>
中的<strong>幻影</strong>实现。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>幻影是 <span
class="math inline">\(\mathrm{\LaTeX}\)</span>
中最神奇的一种空格，幻影命令 <code>\phantom</code>
有一个参数，作用是产生与参数命令大小一样的空盒子，没有内容，就像是参数的一个幻影一样，所以，使用幻影可以完成一些特殊的占位和对齐效果：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">幻影<span class="keyword">\phantom</span>&#123;参数&#125;速速隐形<span class="keyword">\\</span></span><br><span class="line">幻影参数速速显形</span><br></pre></td></tr></table></figure>
<p><span class="math display">\[
\begin{align*}
幻影\phantom{参数}速速隐形\\
幻影参数速速显形
\end{align*}
\]</span></p>
<p>在数学模式中，幻影被视为 Ord
atom，并以此保持和其他原子间的间距。类似地有 <code>\hphantom</code> 和
<code>\vphantom</code>，分别表示水平方向和垂直方向的幻影，在另一个方向的大小为零。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>所以像在<a
href="#问题整理">问题整理</a>中图片中的右侧实现，第一行需要在列分隔符
&amp; 后加入一个虚拟的空白的 =，同时需要保持作为一个 Rel atom
以和其后产生正确的间距，所以就使用了 <code>\mathrel&#123;\phantom&#123;=&#125;&#125;</code>
命令来进行实现。因此，左侧在二元关系符后进行对齐的实现与右侧在二元关系符前进行对齐实现便产生了相同的效果。</p>
<h3 id="align-or-aligned-or-alignat"><code>align</code> or
<code>aligned</code> or <code>alignat</code></h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>谈到多行公式对齐，自然绕不开
<code>amsmath</code> 宏包中的 <code>align</code>
大家族，<code>align</code>、 <code>aligned</code>、 <code>alignat</code>
及其组合或加 * 的环境，各有其特点及合适的应用场景。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>首先，最基本的
<code>align</code>
环境，允许多行公式并进行对齐，会给每行公式都编号。我们仍然可以用
<code>\notag</code> 去掉某行的编号。</p>
<p><img src="/images/2025-02-25%2011.17.01.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span><code>align</code>
还能够对齐多组公式，除等号前的 &amp; 之外，公式之间也用 &amp;
分隔。这时，<code>align</code>
会在列之间插入自动的间距，但不同列公式间在观感上有时会感觉间距过大：</p>
<p><img src="/images/2025-02-25%2011.18.45.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span>加 * 的版本
<code>align*</code> 和 <code>align</code> 功能上完全相同，*
的作用也是唯一的区别就是<strong>不带标号</strong>：</p>
<p><img src="/images/2025-02-25%2011.29.17.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span>加 -ed 后缀的版本
<code>aligned</code> 即 inline
版本，可以被看作一个内联的盒子，不考虑编号，作为公式环境内部的一部分，可以与
<code>equation</code>
等环境套用，以实现将多个公式组在一起<strong>公用一个编号</strong>，编号位于公式的居中位置。以
-ed 结尾的环境用法与不以 -ed 结尾的环境用法一一对应：</p>
<p><img src="/images/2025-02-25%2011.42.05.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span><code>aligned</code>
环境可以看成一个盒子，我们还可以给这个盒子添加定界符，以实现相应的效果：</p>
<p><img src="/images/2025-02-25%2011.47.25.png" /></p>
<p><span class="math inline">\(\qquad\!\!\)</span>加 -at 后缀的版本
<code>alignat</code> 则不会在列之间插入任何自动间距，完全通过 &amp;
手动控制间距。<code>alignat</code>
环境有一个参数，表示每行要对齐的公式个数，每两列一组，如下面把列间距设定为一个
<code>\quad</code> 的距离：</p>
<p><img src="/images/2025-02-25%2015.21.36.png" /></p>
<p>第 2 行第 3 列没用
<code>\quad</code>，但是间距依然保留下来，这是因为上一行的
<code>\quad</code> 位置必须在每一行都有所体现。</p>
<p><span class="math inline">\(\qquad\!\!\)</span><code>alignat</code>
作为一个公式环境，和 <code>align</code> 环境一样，也可以加上 * 成为
<code>alignat*</code> 环境使得各行不带标号或者加上 -ed 后缀成为
<code>alignedat</code> 以实现公用标号等功能：</p>
<p><img src="/images/2025-02-25%2015.44.15.png" /></p>
<p><img src="/images/2025-02-25%2015.44.57.png" /></p>
<h3 id="综合运用">综合运用</h3>
<p><span
class="math inline">\(\qquad\!\!\)</span>经过了以上三部分的学习，我们首先通过引入
atom 这样一个基本概念展示了 <span
class="math inline">\(\mathrm{\LaTeX}\)</span> 中数学模式中的列分隔符
&amp; 前后间距处理的基本原理，其次简单介绍了如何使用幻影
<code>\phantom</code> 实现更复杂的间距控制，再次还分别展示了
<code>amsmath</code> 宏包中的 <code>align</code>
大家族各种常用的环境的区别与联系及其基本的应用。那么，最后让我们来综合运用我们以上学习的这三部分内容，实现一个稍微复杂一点的线性方程组的排版。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>根据各种
<code>align</code> 相关的环境的特性，我们发现使用 <code>alignat</code>
系列环境可以自己控制对齐的各部分（各列）之间的间距，非常适合实现一个多列对齐的方程组的排版：</p>
<p><img src="/images/2025-02-25%2016.32.59.png" /></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>第二行的对齐直接利用了第一行中设置的自定义的间距均为零，第三行因为除了第一列的对齐外所有其他列的都在加号前对齐，所以第一个未知数前没有加号但是还希望利用该位置进行对齐，就需要生成一个二元运算符类的
atom 的大小和一个加号相等的空格，即可使用
<code>\mathbin&#123;\phantom&#123;+&#125;&#125;</code> 实现，在其之前加 &amp;
对齐即可。至此，我们便能够完全理解并实现了这样的一个稍微复杂一点的线性方程组的排版！</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>那么，我们便基本解释了在 LaTeX
数学模式中 &amp;
表示对齐时前后的间距相关的各种问题，希望能够读到这里的你有一定的帮助，也欢迎各路大佬们批评指正！</p>
<h3 id="reference">Reference</h3>
<ol type="1">
<li><a
href="https://tex.stackexchange.com/questions/81752/whats-the-right-space-to-right-the-alignment-of-a-right-aligned-align-environme">What's
the right space to right the alignment of a right aligned align
environment?</a></li>
<li><a
href="http://www.guitex.org/home/images/ArsTeXnica/AT008/Simboli%20matematici%20in%20TEX%20e%20LATEX.pdf">"Simboli
matematici in TeX e LaTeX", ArsTeXnica 8 (2009), pp. 7–24</a></li>
<li><a
href="https://ask.latexstudio.net/ask/question/17466.html">align和alignat环境的区别以及适用范围？</a></li>
<li><a
href="https://ask.latexstudio.net/ask/question/3841.html">如何让cases环境下的多行公式在x_{1},x_{2},x_{3},+以及=处对齐?</a></li>
<li><a href="https://www.ctan.org/pkg/lshort-zh-cn">lshort-zh-cn –
Introduction to LATEX, in Chinese</a></li>
<li>刘海洋. LaTeX 入门[M]. 北京: 电子工业出版社, 2013.</li>
<li>向禹. 多行公式编号技巧[OL]. latexstudio. <a
href="https://www.latexstudio.net"
class="uri">https://www.latexstudio.net</a></li>
<li>部分学习自 AI 工具。</li>
</ol>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>align</tag>
        <tag>atom</tag>
        <tag>幻影</tag>
        <tag>phantom</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 &#92;autoref 命令生成子图超链接的格式调整</title>
    <url>/%E4%BD%BF%E7%94%A8-%5Cautoref-%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E5%AD%90%E5%9B%BE%E8%B6%85%E9%93%BE%E6%8E%A5%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%B0%83%E6%95%B4/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>今日在写近代物理实验报告时发现的一个小问题，遂记录之。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>在需要插入带有层级性的子图（e.g.
图1(a)）时，使用非常简单的 <code>subfig</code> 宏包中的
<code>subfloat</code> 命令进行排版，与此同时还希望使用
<code>hyperref</code> 宏包中的 <code>\autoref</code>
命令进行便捷的超链接。这时发现，超链接形式近为 1a、1b 比较简单且与子图的
caption 中的带括号的 caption 不符，遂尝试对于 <code>\autoref</code>
命令生成超链接的格式进行调整。</p>
<span id="more"></span>
<p><span class="math inline">\(\qquad\!\!\)</span>根据
<code>mpltx</code> 文档类的 <code>\autoref</code>
本地化，子图也是图，自然在超链接时也应该加上相应的前缀：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\def</span><span class="keyword">\subfigureautorefname</span>&#123;图&#125;</span><br></pre></td></tr></table></figure>
<p>因为超链接关于子图的后缀由 <code>\thesubfigure</code>
提供，所以直接将 <code>\thesubfigure</code>
定义为由小括号包裹的小写字母的计数器即可：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span><span class="keyword">\thesubfigure</span>&#123;(<span class="keyword">\alph</span>&#123;subfigure&#125;)&#125;</span><br></pre></td></tr></table></figure>
<p>但是此时因为生成子图的标签样式本身就已经带有一对小括号，直接进行以上修改会导致子图的
caption 中带上两层括号（e.g.
((1))、((2))），所以需要先采用简单的标签格式：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\captionsetup</span>[subfloat]&#123;labelformat=simple&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\qquad\!\!\)</span>综上所述，我们对于
<code>\autoref</code> 命令生成子图的超链接格式进行了符合
<code>mpltx</code> 的本地化调整，下面给出一个可以完整运行的
MWE（图片除外）：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;siunitx&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>[caption=false]&#123;subfig&#125;</span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\subfigureautorefname</span>&#123;图&#125;</span><br><span class="line"><span class="keyword">\captionsetup</span>[subfloat]&#123;labelformat=simple&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span><span class="keyword">\thesubfigure</span>&#123;(<span class="keyword">\alph</span>&#123;subfigure&#125;)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;hyperref&#125;</span><br><span class="line"><span class="keyword">\hypersetup</span>&#123;hidelinks&#125;</span><br><span class="line"><span class="keyword">\hypersetup</span>&#123;colorlinks=true&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">理论如<span class="keyword">\autoref</span>&#123;fig2&#125;，实验如<span class="keyword">\autoref</span>&#123;fig6&#125;。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\subfloat</span>[汞 <span class="keyword">\qty</span>&#123;546.1&#125;&#123;nm&#125; 谱线的塞曼分裂示意图]&#123;</span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.85<span class="keyword">\linewidth</span>]&#123;fig2.pdf&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig2&#125;&#125;<span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\subfloat</span>[<span class="keyword">\qty</span>&#123;1.0&#125;&#123;T&#125;磁场作用时汞灯光谱线的扫描结果]&#123;</span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.85<span class="keyword">\linewidth</span>]&#123;fig6.png&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;fig6&#125;&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="/images/2025-03-12%2000.35.00.png" /></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>hyperref</tag>
        <tag>subfig</tag>
        <tag>autoref</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<center>
Hello World!
</center>
]]></content>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>1、递推：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>共有 <span
class="math inline">\(n\)</span> 级台阶，每次可以上 <span
class="math inline">\(1-k\)</span> 级，上完的方案数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	k=<span class="built_in">qread</span>();</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="built_in">max</span>(<span class="number">0</span>,i-k);j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i]+=f[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(f[n]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、递归：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>输出 <span
class="math inline">\(a\)</span> 与 <span
class="math inline">\(b\)</span> 的最大公约数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">gcd</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x?<span class="built_in">gcd</span>(y%x,x):y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">gcd</span>(a,b));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>3、排序：</p>
<ul>
<li>①、选择排序：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>选择排序是易得到的排序算法。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(r,s) (r^s?r^=s^=r^=s:r=s)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> minn,o;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">qread</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn=inf;</span><br><span class="line">        o=i;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;minn)</span><br><span class="line">            &#123;</span><br><span class="line">                minn=a[j];</span><br><span class="line">                o=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[o]);</span><br><span class="line">        <span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>②、冒泡排序：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(r,s) (r^s?r^=s^=r^=s:r=s) </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&gt;a[j<span class="number">+1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">swap</span>(a[j],a[j<span class="number">+1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>③、插入排序：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>插入排序的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp=a[i];</span><br><span class="line">		<span class="type">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(j&amp;&amp;temp&lt;a[j])</span><br><span class="line">		&#123;</span><br><span class="line">			a[j<span class="number">+1</span>]=a[j];</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		a[j<span class="number">+1</span>]=temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>④、<a
href="http://oi-wiki.com/basic/quick-sort/">快速排序</a>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(r,s) (r^s?r^=s^=r^=s:r=s)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qsort</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=x,r=y;</span><br><span class="line">	<span class="type">int</span> mid=a[(x+y)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(a[l]&lt;mid)</span><br><span class="line">		&#123;</span><br><span class="line">			l++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(a[r]&gt;mid)</span><br><span class="line">		&#123;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(l&lt;=r)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">swap</span>(a[l],a[r]);</span><br><span class="line">			l++;</span><br><span class="line">			r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qsort</span>(x,r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qsort</span>(l,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qsort</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>⑤、归并排序：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列，即先使每个子序列有序，再使子序列段间有序。若将两个有序数列合并成一个有序数列，称为二路归并。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">msort</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid=((x+y)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(x==y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">msort</span>(x,mid);</span><br><span class="line">	<span class="built_in">msort</span>(mid<span class="number">+1</span>,y);</span><br><span class="line">	<span class="type">int</span> i=x,j=mid<span class="number">+1</span>,o=x;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">		&#123;</span><br><span class="line">			b[o++]=a[j];</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			b[o++]=a[i];</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">	&#123;</span><br><span class="line">		b[o++]=a[i++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=y)</span><br><span class="line">	&#123;</span><br><span class="line">		b[o++]=a[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=x;i&lt;=y;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">msort</span>(<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>⑥、堆排序：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=-<span class="built_in">qread</span>();</span><br><span class="line">		q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=-q.<span class="built_in">top</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>⑦、<a
href="http://oi-wiki.com/basic/counting-sort/">计数排序</a>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=M;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,minn=inf,maxx=-inf,o;</span><br><span class="line"><span class="type">int</span> a[N],b[M];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">		b[a[i]]++;</span><br><span class="line">		minn=<span class="built_in">min</span>(minn,a[i]);</span><br><span class="line">		maxx=<span class="built_in">max</span>(maxx,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=minn;i&lt;=maxx;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(b[i]--)</span><br><span class="line">		&#123;</span><br><span class="line">			a[++o]=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>4、二分：</p>
<ul>
<li>①、二分答案：</li>
</ul>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2678">P2678
跳石头</a></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">50010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> s,n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> l,r,mid,ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">bool</span> <span class="title">pd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(now==n<span class="number">-1</span>&amp;&amp;a[n]-a[n<span class="number">-1</span>]&lt;mid)</span><br><span class="line">		&#123;</span><br><span class="line">			x++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[j]-a[now]&gt;=mid)</span><br><span class="line">		&#123;</span><br><span class="line">			now=j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			x++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s=<span class="built_in">qread</span>();</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	a[n<span class="number">+1</span>]=s;</span><br><span class="line">	n++;</span><br><span class="line">	l=<span class="number">1</span>;</span><br><span class="line">	r=s;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">pd</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			l=mid<span class="number">+1</span>;</span><br><span class="line">			ans=<span class="built_in">max</span>(ans,mid);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			r=mid<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>②、三分答案：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3382">P3382
【模板】三分法</a></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"><span class="type">double</span> l,r,mid;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">double</span> <span class="title">F</span><span class="params">(re <span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">double</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		res=res*x+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(r-l&gt;=eps)</span><br><span class="line">	&#123;</span><br><span class="line">		mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">F</span>(mid+eps)&gt;<span class="built_in">F</span>(mid-eps)?l=mid:r=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.5lf&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>5、贪心：</p></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1080">P1080
国王游戏</a>（不含高精加 <span class="math inline">\(60\)</span>
分版本）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a,b,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;x)<span class="type">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">max</span>(x.r,l*r)&lt;<span class="built_in">max</span>(r,x.l*x.r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node c[N]; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i].l=<span class="built_in">qread</span>();</span><br><span class="line">		c[i].r=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(c<span class="number">+1</span>,c+n<span class="number">+1</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,a/c[i].r);</span><br><span class="line">		a*=c[i].l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>6、搜索：</p>
<ul>
<li>①、深度优先搜索：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(参数表)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(满足条件)</span><br><span class="line">    &#123;</span><br><span class="line">        统计答案</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(由此时能够到达的全部可能的情况)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(满足传递的条件)</span><br><span class="line">        &#123;</span><br><span class="line">            操作</span><br><span class="line">            <span class="built_in">dfs</span>(下一个到达的情况);</span><br><span class="line">            回溯</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>②、广度优先搜索：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    初始化状态入队</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        弹出队头</span><br><span class="line">        <span class="keyword">if</span>(满足到达的条件)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(满足条件)</span><br><span class="line">            &#123;</span><br><span class="line">                统计答案;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(由此时能够到达的全部可能的情况)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(满足传递的条件)</span><br><span class="line">                &#123;</span><br><span class="line">                    操作</span><br><span class="line">                    新情况入队</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>③、记忆化搜索：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1434">P1434
[SHOI2002]滑雪</a></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="type">int</span> a[N][N],f[N][N];</span><br><span class="line"><span class="type">int</span> fx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,fy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(f[x][y])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> f[x][y];</span><br><span class="line">	&#125;</span><br><span class="line">	f[x][y]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> xx=x+fx[i];</span><br><span class="line">		<span class="type">int</span> yy=y+fy[i];</span><br><span class="line">		<span class="keyword">if</span>(xx&gt;<span class="number">0</span>&amp;&amp;yy&gt;<span class="number">0</span>&amp;&amp;xx&lt;=m&amp;&amp;yy&lt;=n&amp;&amp;a[x][y]&gt;a[xx][yy])</span><br><span class="line">		&#123;</span><br><span class="line">			f[x][y]=<span class="built_in">max</span>(f[x][y],<span class="built_in">dfs</span>(xx,yy)<span class="number">+1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i][j]=<span class="built_in">qread</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j]=<span class="built_in">dfs</span>(i,j);</span><br><span class="line">			ans=<span class="built_in">max</span>(ans,f[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>④、搜索剪枝：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1120">P1120 小木棍
［数据加强版］</a></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">70</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,cnt,sum;</span><br><span class="line"><span class="type">int</span> a[N],nxt[N];</span><br><span class="line"><span class="type">bool</span> vis[N],f;</span><br><span class="line"><span class="type">int</span> len,m;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">bool</span> <span class="title">comp</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y,re <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"><span class="comment">//现在用第 x 根木棍，编号为 y，总长度为 z</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!z)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x==m)</span><br><span class="line">		&#123;</span><br><span class="line">			f=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i])</span><br><span class="line">			&#123;	</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(x<span class="number">+1</span>,i,len-a[i]);</span><br><span class="line">		<span class="keyword">if</span>(f)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> l=y<span class="number">+1</span>,r=n;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(a[mid]&lt;=z)</span><br><span class="line">		&#123;</span><br><span class="line">			r=mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			l=mid<span class="number">+1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=l;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[i]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(x,i,z-a[i]);</span><br><span class="line">		<span class="keyword">if</span>(f)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(z==a[i]||z==len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		i=nxt[i];</span><br><span class="line">		<span class="keyword">if</span>(i==cnt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">50</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[++cnt]=x;</span><br><span class="line">		sum+=x; </span><br><span class="line">	&#125;</span><br><span class="line">	n=cnt;</span><br><span class="line">	<span class="built_in">sort</span>(a<span class="number">+1</span>,a+n<span class="number">+1</span>,comp);</span><br><span class="line">	nxt[n]=n;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n<span class="number">-1</span>;i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]==a[i<span class="number">+1</span>]?nxt[i]=nxt[i<span class="number">+1</span>]:nxt[i]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(len=a[<span class="number">1</span>];len&lt;=(sum&gt;&gt;<span class="number">1</span>);len++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum%len)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		m=sum/len;</span><br><span class="line">		vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,len-a[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(f)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(len);</span><br><span class="line">			<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(sum);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>递推</tag>
        <tag>递归</tag>
        <tag>排序</tag>
        <tag>二分</tag>
        <tag>三分</tag>
        <tag>贪心</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>字符串算法……暂时就先这五种吧……</p>
<ul>
<li>1、字符串哈希：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3370">P3370
【模板】字符串哈希</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1510</span>;</span><br><span class="line"><span class="type">int</span> ba=<span class="number">4215</span>,n,l,ans;</span><br><span class="line"><span class="type">char</span> a[N][M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> m1,m2;</span><br><span class="line">&#125;;</span><br><span class="line">e z[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">char</span> b[],<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=l;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		x+=(ba*x+b[j])%m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">bool</span> <span class="title">comp</span><span class="params">(e x,e y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.m1&gt;y.m1)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]<span class="number">+1</span>);</span><br><span class="line">		l=<span class="built_in">strlen</span>(a[i]<span class="number">+1</span>);</span><br><span class="line">		z[i].m1=<span class="built_in">hash</span>(a[i]<span class="number">+1</span>,<span class="number">1e9</span><span class="number">+7</span>);</span><br><span class="line">		z[i].m2=<span class="built_in">hash</span>(a[i]<span class="number">+1</span>,<span class="number">1e9</span><span class="number">+9</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(z<span class="number">+1</span>,z+n<span class="number">+1</span>,comp);</span><br><span class="line">	ans=n;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(z[i].m1==z[i<span class="number">+1</span>].m1&amp;&amp;z[i].m2==z[i].m2)</span><br><span class="line">		&#123;</span><br><span class="line">			ans--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、字符串KMP：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3375">P3375
【模板】KMP字符串匹配</a>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> nxt[N];</span><br><span class="line"><span class="type">int</span> la,lb,j;</span><br><span class="line"><span class="type">char</span> a[N],b[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a<span class="number">+1</span>,b<span class="number">+1</span>);</span><br><span class="line">	la=<span class="built_in">strlen</span>(a<span class="number">+1</span>);</span><br><span class="line">	lb=<span class="built_in">strlen</span>(b<span class="number">+1</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=lb;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&amp;&amp;b[i]^b[j<span class="number">+1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			j=nxt[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(b[j<span class="number">+1</span>]==b[i])</span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		nxt[i]=j;</span><br><span class="line">	&#125;</span><br><span class="line">	j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=la;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(j&amp;&amp;b[j<span class="number">+1</span>]^a[i])</span><br><span class="line">		&#123;</span><br><span class="line">			j=nxt[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(b[j<span class="number">+1</span>]==a[i])</span><br><span class="line">		&#123;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(j==lb)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(i-lb<span class="number">+1</span>);</span><br><span class="line">			<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			j=nxt[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=lb;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(nxt[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3、manacher算法：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3805">P3805
【模板】manacher算法</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30000010</span>; </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> b[N];</span><br><span class="line"><span class="type">int</span> dp[N],r,pos,ans=<span class="number">1</span>;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b<span class="number">+1</span>);</span><br><span class="line">	<span class="type">int</span> l=<span class="built_in">strlen</span>(b<span class="number">+1</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=l;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		b[i&lt;&lt;<span class="number">1</span>]=b[i];</span><br><span class="line">		b[(i&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	b[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	b[<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	l=((l&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;r)</span><br><span class="line">		&#123;</span><br><span class="line">			pos=i;</span><br><span class="line">			dp[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(b[i-dp[i]]==b[i+dp[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i]++;</span><br><span class="line">			&#125;</span><br><span class="line">			r=i+dp[i]<span class="number">-1</span>;</span><br><span class="line">			ans=<span class="built_in">max</span>(ans,dp[i]<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> k=r-i<span class="number">+1</span>;</span><br><span class="line">		<span class="keyword">if</span>(dp[(pos&lt;&lt;<span class="number">1</span>)-i]&lt;k)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i]=dp[(pos&lt;&lt;<span class="number">1</span>)-i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(dp[(pos&lt;&lt;<span class="number">1</span>)-i]&gt;k)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i]=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			pos=i;</span><br><span class="line">			dp[i]=k;</span><br><span class="line">			<span class="keyword">while</span>(b[i-dp[i]]==b[i+dp[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i]++;</span><br><span class="line">			&#125;</span><br><span class="line">			r=i+dp[i]<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,dp[i]<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4、字典树：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2580">P2580
于是他错误的点名开始了</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> t[N][<span class="number">26</span>],f[N][<span class="number">26</span>];</span><br><span class="line">string a;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt; b;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">js</span><span class="params">(re string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=x.<span class="built_in">length</span>();</span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!t[k][a[j]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			t[k][a[j]-<span class="string">&#x27;a&#x27;</span>]=++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		k=t[k][a[j]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span>(j==l<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			f[k][a[j]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">pd</span><span class="params">(re string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=x.<span class="built_in">length</span>();</span><br><span class="line">	<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!t[k][a[j]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;WRONG\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		k=t[k][a[j]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		<span class="keyword">if</span>(j==l<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(f[k][a[j]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;WRONG\n&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="built_in">js</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a;</span><br><span class="line">		<span class="keyword">if</span>(b[a])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;REPEAT\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			b[a]=<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">pd</span>(a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5、最小表示法：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1368">P1368
【模板】最小表示法</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">300010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>,k=<span class="number">0</span>,j=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;n&amp;&amp;k&lt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[(i+k)%n]==a[(j+k)%n])</span><br><span class="line">		&#123;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[(i+k)%n]&gt;a[(j+k)%n])</span><br><span class="line">			&#123;</span><br><span class="line">				i=i+k<span class="number">+1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				j=j+k<span class="number">+1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(i==j)</span><br><span class="line">			&#123;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			k=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">0</span>;l&lt;n;l++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(a[(<span class="built_in">min</span>(i,j)+l)%n]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>字符串</tag>
        <tag>Hash</tag>
        <tag>KMP</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>基础动态规划</title>
    <url>/%E5%9F%BA%E7%A1%80%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<ul>
<li>1、线性dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>给定一个数列，求其中最长上升子序列的长度：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line"><span class="type">int</span> ans; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">			&#123;</span><br><span class="line">				f[i]=<span class="built_in">max</span>(f[i],f[j]<span class="number">+1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、多维dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1216">P1216
[USACO1.5][IOI1994]数字三角形 Number Triangles</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N],f[N][N]; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i][j]=<span class="built_in">qread</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n;i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=i;j;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j]=a[i][j]+<span class="built_in">max</span>(f[i<span class="number">+1</span>][j],f[i<span class="number">+1</span>][j<span class="number">+1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(f[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>3、背包dp：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>背包dp
是一类非常典型的 dp
题，通常表示为：有具有一定大小的背包和具有一定大小和价值的物品，最优决策使选取的物品的价值最大。因为对于背包、物品以及选取方式的不同的修饰限制，产生了不同种类的背包以及不同种类的背包优化。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>注意一点，根据题目要求，有的题目要求背包内所有空间必须全部用上，有的不要求。</p>
<ul>
<li>①、01背包：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1048">P1048 采药</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N],val[N],f[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v[i]=<span class="built_in">qread</span>();<span class="comment">//输入体积</span></span><br><span class="line">		val[i]=<span class="built_in">qread</span>();<span class="comment">//输入价值 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=n;j&gt;=v[i];j--)<span class="comment">//从后向前扫</span></span><br><span class="line">		&#123;</span><br><span class="line">			f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+val[i]);<span class="comment">//取减去体积并加上价值与不取此物品的价值的较大值 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(f[n]);<span class="comment">//输出最大的空间装的最大的价值 </span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>②、完全背包：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1616">P1616 疯狂的采药</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N],val[N],f[M];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    m=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i]=<span class="built_in">qread</span>();</span><br><span class="line">        val[i]=<span class="built_in">qread</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=v[i];j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(f[n]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>③、01背包前 <span class="math inline">\(k\)</span> 优解：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1858">P1858 多人背包</a></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">5050</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> K=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">int</span> k,n,m;</span><br><span class="line"><span class="type">int</span> v[N],val[N],f[M][K];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	k=<span class="built_in">qread</span>(); </span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v[i]=<span class="built_in">qread</span>();</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>,cnt=<span class="number">0</span>,temp[K];</span><br><span class="line">			<span class="keyword">while</span>(cnt&lt;=k)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[j][l]&gt;f[j-v[i]][r]+val[i])</span><br><span class="line">				&#123;</span><br><span class="line">					temp[++cnt]=f[j][l++];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					temp[++cnt]=f[j-v[i]][r++]+val[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">			&#123;</span><br><span class="line">				f[j][i]=temp[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=f[m][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans); </span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>④、分组背包：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1757">P1757
通天之分组背包</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> cnt,maxx;</span><br><span class="line"><span class="type">int</span> v[N],val[N];</span><br><span class="line"><span class="type">int</span> bh[N][N],tot[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v[i]=<span class="built_in">qread</span>();</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">		cnt=<span class="built_in">qread</span>();</span><br><span class="line">		maxx=<span class="built_in">max</span>(maxx,cnt);</span><br><span class="line">		bh[cnt][++tot[cnt]]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=m;~j;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">1</span>;k&lt;=tot[i];k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&gt;=v[bh[i][k]])</span><br><span class="line">				&#123;</span><br><span class="line">					f[j]=<span class="built_in">max</span>(f[j],f[j-v[bh[i][k]]]+val[bh[i][k]]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(f[m]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>⑤、多重背包：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1776">P1776 宝物筛选</a>：</p>
<ul>
<li>(1)、二进制分组：把每组物品对于个数按二进制分组，以表示全部物品。相当于增加物品的数量转化为
01背包：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">40010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,s;</span><br><span class="line"><span class="type">int</span> v[N*<span class="number">20</span>],w[N*<span class="number">20</span>],f[M];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m=<span class="built_in">qread</span>();</span><br><span class="line">    s=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> y=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> z=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(z&gt;=p)</span><br><span class="line">        &#123;</span><br><span class="line">            v[++n]=y*p;</span><br><span class="line">            w[n]=x*p;</span><br><span class="line">            z-=p;</span><br><span class="line">            p&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            v[++n]=y*z;</span><br><span class="line">            w[n]=x*z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=s;j&gt;=v[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(f[s]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>(2)、单调队列优化：按照对于每个物品的空间取模分组，每组内对于取的
个数-空间 单调队列优化，保证每个空间下只转移一次。</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">40010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,s;</span><br><span class="line"><span class="type">int</span> f[M],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pos,val;</span><br><span class="line">&#125;;</span><br><span class="line">node q[N];</span><br><span class="line"><span class="type">int</span> h,t;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    s=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> num=<span class="built_in">qread</span>();</span><br><span class="line">        num=<span class="built_in">min</span>(num,s/v);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;v;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                q[i]=(node)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            h=t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">0</span>;k&lt;=(s-j)/v;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x=k;</span><br><span class="line">                <span class="type">int</span> y=f[k*v+j]-k*w;</span><br><span class="line">                <span class="keyword">while</span>(h&lt;=t&amp;&amp;q[h].pos&lt;k-num)</span><br><span class="line">                &#123;</span><br><span class="line">                    h++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(h&lt;=t&amp;&amp;q[t].val&lt;=y)</span><br><span class="line">                &#123;</span><br><span class="line">                    t--;</span><br><span class="line">                &#125;</span><br><span class="line">                q[++t]=(node)&#123;x,y&#125;;</span><br><span class="line">                f[k*v+j]=q[h].val+k*w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(ans);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>⑥、混合背包：</p></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1833">P1833 樱花</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t1,t2,s,n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="type">int</span> mm=<span class="built_in">qread</span>();</span><br><span class="line">    t1=hh*<span class="number">60</span>+mm;</span><br><span class="line">    hh=<span class="built_in">qread</span>();</span><br><span class="line">    mm=<span class="built_in">qread</span>();</span><br><span class="line">    t2=hh*<span class="number">60</span>+mm;</span><br><span class="line">    s=t2-t1;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="type">int</span> p=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> j=t;j&lt;=s;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j]=<span class="built_in">max</span>(f[j],f[j-t]+c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> q=<span class="number">1</span>,o=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> v[<span class="number">20</span>],w[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">while</span>(p&gt;=q)</span><br><span class="line">            &#123;</span><br><span class="line">                v[++o]=t*q;</span><br><span class="line">                w[o]=c*q;</span><br><span class="line">                p-=q;</span><br><span class="line">                q&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p)</span><br><span class="line">            &#123;</span><br><span class="line">                v[++o]=t*p;</span><br><span class="line">                w[o]=c*p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">1</span>;k&lt;=o;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(re <span class="type">int</span> j=s;j&gt;=v[k];j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[j]=<span class="built_in">max</span>(f[j],f[j-v[k]]+w[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(f[s]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>⑦、二维费用：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1509">P1509
找啊找啊找GF</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,r; </span><br><span class="line"><span class="type">int</span> rmb[N],rp[N],tim[N];</span><br><span class="line"><span class="type">int</span> f[N][N],ft[N][N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rmb[i]=<span class="built_in">qread</span>();</span><br><span class="line">        rp[i]=<span class="built_in">qread</span>();</span><br><span class="line">        tim[i]=<span class="built_in">qread</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    m=<span class="built_in">qread</span>();</span><br><span class="line">    r=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=m;j&gt;=rmb[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=r;k&gt;=rp[i];k--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[j][k]&lt;f[j-rmb[i]][k-rp[i]]<span class="number">+1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[j][k]=f[j-rmb[i]][k-rp[i]]<span class="number">+1</span>;</span><br><span class="line">                    ft[j][k]=ft[j-rmb[i]][k-rp[i]]+tim[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(f[j][k]==f[j-rmb[i]][k-rp[i]]<span class="number">+1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ft[j][k]=<span class="built_in">min</span>(ft[j][k],ft[j-rmb[i]][k-rp[i]]+tim[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(ft[m][r]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>背包 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p><span class="math inline">\(\qquad\!\!\)</span>在解决 dp
问题时，主要要从两点思考：</p>
<ul>
<li>1、<strong>状态</strong>：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>通常来讲，状态的设立因题而异，大多数与答案的意义相同（dp数组
中的某个值即为答案）或者与答案具有直接联系（比如再经过某种统计即可得到答案）。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>对于很难一眼看出状态（比如答案无法转移）的题，我们就要利用
dp的本质：“把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解。”和
dp 最重要的一个性质：“无后效性”去推理。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>根据无后效性，我们可以假设在这个阶段之前的阶段（注意，这个“之前”表示的是
dp转移
上的之前，可能是空间上的之前、数位上的之前、拓扑序上的之前……）都已经进行了最优化的决策。根据
dp的本质，如果之前的阶段的最优决策映射出的一种“结果”能以
<strong>某种方式</strong>
转移到此阶段的这种“结果”，且此时的这种“结果”也恰好为此时的最优化决策的这种映射，那么这种“结果”即为
dp的状态。</p>
<ul>
<li>2、<strong>转移方程</strong>：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>通常来讲，转移方程的确立也是因题而异的，不过在得出了正确的状态之后，转移方程的确立方式一般比较显然。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>前文中加粗的的“<strong>某种方式</strong>”，即可理解为一种状态到状态的转移方式。我们在将其具体化以后，即可得到对于相邻状态的转移方程。同时，对于很多题目的转移方程可以利用数学的计算或者数据结构的辅助得以在复杂度上得以化简，即为
dp的优化。</p>
<ul>
<li>3、<strong>实现方法</strong>：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>一般来说，动态规划可以通过递推和记忆化搜索两种方式实现。</p>
<span id="more"></span>
<hr />
<h2 id="目录">目录：</h2>
<ul>
<li>1、<a href="https://lhrg.github.io/基础动态规划/">基础动态规划</a>：
<ul>
<li>①、线性dp</li>
<li>②、多维dp</li>
<li>③、背包dp：
<ul>
<li>(1)、01背包</li>
<li>(2)、完全背包</li>
<li>(3)、01背包前 <span class="math inline">\(k\)</span> 优解</li>
<li>(4)、分组背包</li>
<li>(5)、多重背包
<ul>
<li>1)、二进制分组</li>
<li>2)、单调队列优化</li>
</ul></li>
<li>(6)、混合背包</li>
<li>(7)、二维费用</li>
</ul></li>
</ul></li>
<li>2、<a href="https://lhrg.github.io/进阶动态规划/">进阶动态规划</a>：
<ul>
<li>①、<a href="https://lhrg.github.io/树形dp/">树形dp</a>：
<ul>
<li>(1)、基础树形dp</li>
<li>(2)、递归前转移树形dp</li>
<li>(3)、递归后转移树形dp</li>
<li>(4)、树上01背包</li>
<li>(5)、树上分组背包</li>
<li>(6)、基础换根dp</li>
<li>(7)、<a
href="https://lhrg.github.io/进阶换根dp/">进阶换根dp</a></li>
<li>(8)、基环树之树形dp+环形dp</li>
<li>(9)、基环树之开环直接树形dp</li>
</ul></li>
<li>②、DAG上的dp（拓扑排序）</li>
<li>③、环形dp</li>
<li>④、区间dp</li>
<li>⑤、状压dp</li>
<li>⑥、数位dp</li>
<li>⑦、期望dp</li>
<li>⑧、<a
href="https://lhrg.github.io/题解-U534157-【矩阵革命】/">dp计数</a></li>
<li>⑨、dp优化：
<ul>
<li>(1).斜率优化</li>
<li>(2).四边形不等式优化</li>
<li>(3).数据结构优化：
<ul>
<li>①.单调栈/单调队列优化</li>
<li>②.树状数组优化</li>
<li>③.线段树优化</li>
<li>④.矩阵快速幂优化</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>开学酒局subtask计分脚本</title>
    <url>/%E5%BC%80%E5%AD%A6%E9%85%92%E5%B1%80subtask%E8%AE%A1%E5%88%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534161">开学酒局</a></p>
<span id="more"></span>
<h3 id="subtask-113">Subtask #1(1~3)</h3>
<h2 id="section"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status1!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status2!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status3!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time1+@time2+@time3;</span><br><span class="line">@final_memory=@memory1+@memory2+@memory3;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=10;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num==1;then</span><br><span class="line">        @total_score=6;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=6-(@num-1)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-249">Subtask #2(4~9)</h3>
<h2 id="section-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status4!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status5!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status6!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status7!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status8!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status9!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time4+@time5+@time6+@time7+@time8+@time9;</span><br><span class="line">@final_memory=@memory4+@memory5+@memory6+@memory7+@memory8+@memory9;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=20;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;3;then</span><br><span class="line">        @total_score=20-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=20-8-(@num-2)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-31018">Subtask #3(10~18)</h3>
<h2 id="section-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status10!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status11!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status12!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status13!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status14!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status15!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status16!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status17!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status18!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time10+@time11+@time12+@time13+@time14+@time15+@time16+@time17+@time18;</span><br><span class="line">@final_memory=@memory10+@memory11+@memory12+@memory13+@memory14+@memory15+@memory16+@memory17+@memory18;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=30;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;4;then</span><br><span class="line">        @total_score=30-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=30-12-(@num-3)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-41922">Subtask #4(19~22)</h3>
<h2 id="section-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status19!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status20!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status21!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time19+@time20+@time21;</span><br><span class="line">@final_memory=@memory19+@memory20+@memory21;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=10;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num==1;then</span><br><span class="line">        @total_score=6;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=6-(@num-1)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-52330">Subtask #5(23~30)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status22!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status23!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status24!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status25!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status26!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status27!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status28!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status29!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status30!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time22+@time23+@time24+@time25+@time26+@time27+@time28+@time29+@time30;</span><br><span class="line">@final_memory=@memory22+@memory23+@memory24+@memory25+@memory26+@memory27+@memory28+@memory29+@memory30;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=30;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;4;then</span><br><span class="line">        @total_score=30-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=30-12-(@num-3)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>出题</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>打磨珍珠subtask计分脚本</title>
    <url>/%E6%89%93%E7%A3%A8%E7%8F%8D%E7%8F%A0subtask%E8%AE%A1%E5%88%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534155">打磨珍珠</a></p>
<span id="more"></span>
<h3 id="subtask-119">Subtask #1(1~9)</h3>
<h2 id="section"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status1!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status2!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status3!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status4!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status5!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status6!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status7!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status8!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status9!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time1+@time2+@time3+@time4+@time5+@time6+@time7+@time8+@time9;</span><br><span class="line">@final_memory=@memory1+@memory2+@memory3+@memory4+@memory5+@memory6+@memory7+@memory8+@memory9;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=30;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;4;then</span><br><span class="line">        @total_score=30-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=30-12-(@num-3)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-21018">Subtask #2(10~18)</h3>
<h2 id="section-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status10!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status11!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status12!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status13!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status14!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status15!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status16!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status17!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status18!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time10+@time11+@time12+@time13+@time14+@time15+@time16+@time17+@time18;</span><br><span class="line">@final_memory=@memory10+@memory11+@memory12+@memory13+@memory14+@memory15+@memory16+@memory17+@memory18;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=30;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;4;then</span><br><span class="line">        @total_score=30-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=30-12-(@num-3)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></h2>
<h3 id="subtask-31930">Subtask #3(19~30)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@num=0;</span><br><span class="line">if @status19!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status20!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status21!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status22!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status23!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status24!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status25!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status26!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status27!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status28!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status29!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">if @status30!=AC; then</span><br><span class="line">    @num=@num+1;</span><br><span class="line">fi</span><br><span class="line">@final_time=@time19+@time20+@time21+@time22+@time23+@time24+@time25+@time26+@time27+@time28+@time29+@time30;</span><br><span class="line">@final_memory=@memory19+@memory20+@memory21+@memory22+@memory23+@memory24+@memory25+@memory26+@memory27+@memory28+@memory29+@memory30;</span><br><span class="line">if @num==0; then</span><br><span class="line">    @total_score=40;</span><br><span class="line">    @final_status=AC;</span><br><span class="line">else</span><br><span class="line">    if @num&lt;5;then</span><br><span class="line">        @total_score=40-@num*4;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    else</span><br><span class="line">        @total_score=40-16-(@num-4)*3;</span><br><span class="line">        @final_status=UNAC;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>出题</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 C++ 万能头文件内部头文件</title>
    <url>/%E6%B5%85%E8%B0%88-C-%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6%E5%86%85%E9%83%A8%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="浅谈-c-万能头文件内部头文件">浅谈 C++ 万能头文件内部头文件</h1>
<span id="more"></span>
<h2 id="目录">目录</h2>
<ul>
<li>引言</li>
<li>正文
<ul>
<li>一
<ul>
<li>1 C++ 万能头文件简介</li>
<li>2 C++ 万能头文件优点</li>
<li>3 C++ 万能头文件缺点</li>
</ul></li>
<li>二</li>
<li>三</li>
<li>四</li>
<li>五</li>
<li>六</li>
<li>七</li>
<li>八</li>
</ul></li>
<li>结语</li>
</ul>
<hr />
<h2 id="具体内容">具体内容：</h2>
<hr />
<h3 id="引言">引言：</h3>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>本人 OI
萌新，想在洛谷日报上找一些有关 C++
头文件的资料学习，<del>恐惧</del>惊奇地发现竟然找不到。</p>
<figure>
<img
src="https://cdn.luogu.com.cn/upload/image_hosting/t2wlmwpn.png?x-oss-process=image/resize,m_lfit,h_170,w_225"
alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<figure>
<img
src="https://cdn.luogu.com.cn/upload/image_hosting/l6w5b8gy.png?x-oss-process=image/resize,m_lfit,h_170,w_225"
alt="2" />
<figcaption aria-hidden="true">2</figcaption>
</figure>
<figure>
<img
src="https://cdn.luogu.com.cn/upload/image_hosting/cqmj17wg.png?x-oss-process=image/resize,m_lfit,h_170,w_225"
alt="3" />
<figcaption aria-hidden="true">3</figcaption>
</figure>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>于是打开了 C++
的万能头文件，决定自己写一篇博客。</p>
<hr />
<h3 id="正文">正文：</h3>
<ul>
<li>一</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>打开 C++
的万能头文件，首先映入眼帘的是一堆英文。所以，就请允许我先就此简单介绍一下
C++ 的万能头文件。</p>
<hr />
<ul>
<li>1 C++ 万能头文件简介</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>C++ 万能头文件是 GNU
ISO C++ 库中的免费头文件，版权由自由软件基金会（Free Software
Foundation, Inc）所有，其中几乎包含了 C++ 的所有头文件。</p>
<ul>
<li>2 C++ 万能头文件优点</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>由于这个头文件中几乎包含了 C++
的所有头文件，所以在竞赛中使用这个头文件不仅减少了编写每个需使用的头文件的任务，更节约了比赛的时间。很方便OIer和ACMer的使用。</p>
<ul>
<li>3 C++ 万能头文件缺点</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>首先，因为这个头文件不是 GNU C++
库的标准头文件，所以如果你在一些编译器（除了
GCC）上编译你的代码，可能会导致编译失败，比如 MSVC
上就没有这个头文件。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>其次，由于它包含了很多你的程序并不需要的头文件，会导致编译时间的增加。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>再者，在很多竞赛中，这个头文件是无法使用的，所以，我们不可以一昧地依赖万能头文件，还是要记住一些常用的头文件的。</p>
<ul>
<li>二</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>再向下翻，是一个这样的注释： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br></pre></td></tr></table></figure> <span
class="math inline">\(\ \ \ \ \ \
\)</span>代表下面的一些头文件属于C语言库。</p>
<ul>
<li>三</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>紧接着，是这样的三行： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span> <span class="comment">//断言</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure> <span
class="math inline">\(\ \ \ \ \ \
\)</span>其中，<code>#ifndef</code>与<code>#endif</code>属于C语言三种预处理中的<a
href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">条件编译</a>中的一种，这里的意思是：</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>如果<code>_GLIBCXX_NO_ASSERT</code>已被定义，则直接编译<code>#endif</code>后的语句；如果<code>_GLIBCXX_NO_ASSERT</code>未被定义，则编译<code>#endif</code>前的<code>&lt;cassert&gt;</code>头文件。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>为什么要特意写这三行呢？</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>这就涉及到了一种叫“断言”（<a
href="https://baike.baidu.com/item/assert/10931289#ref_%5B1%5D_20093242">assert</a>）的东西，“断言”是一种宏，它的原型定义在了这个头文件里。由于断言有时会起到副作用，所以并不是什么时候都要打开的。因此在预先定义了<code>_GLIBCXX_NO_ASSERT</code>之后，即使使用万能头，断言也不会被打开。</p>
<ul>
<li>四</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>接下来，就是基本的 C
中的头文件： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span> <span class="comment">//字符分类函数库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span> <span class="comment">//定义错误码</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span> <span class="comment">//浮点数处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span> <span class="comment">//定义常见运算符的可选拼写</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span> <span class="comment">//定义各种数据类型最值常量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span> <span class="comment">//定义本地化函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span> <span class="comment">//定义数学函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span> <span class="comment">//分别承担非局部标号和 goto 作用</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span> <span class="comment">// 定义了程序执行时如何处理不同的信号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span> <span class="comment">//让函数能够接收可变参数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span> <span class="comment">//定义标准宏以及类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> <span class="comment">//定义输入/输出函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span> <span class="comment">//定义杂项函数及内存分配函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span> <span class="comment">//字符串处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span> <span class="comment">//定义关于时间的函数</span></span></span><br></pre></td></tr></table></figure> - 五</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>在一行的间隔之后，出现了这样的十一行： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span> <span class="comment">//定义复数处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span> <span class="comment">//定义浮点数环境</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span> <span class="comment">//提供各种进制的转换宏</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span> <span class="comment">//兼容头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span> <span class="comment">//定义布尔环境</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span> <span class="comment">//定义整形环境</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span> <span class="comment">//定义常用类型数学宏</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span> <span class="comment">//定义宽字符串处理函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span> <span class="comment">//定义宽字符串分类、转换函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure> <span
class="math inline">\(\ \ \ \ \ \
\)</span>其中，<code>#if</code>与<code>#endif</code>也属于C语言三种预处理中的<a
href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">条件编译</a>中的一种，这里的意思是：</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>如果<code>#if</code>后的表达式为真，则编译<code>#if</code>与<code>#endif</code>之间的这些头文件；如果表达式为假，则直接编译<code>#endif</code>后的语句。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>可能又有人要问了，那<code>#if</code>后的语句是什么意思呢？</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>为了回答这个问题，我们要先知道<code>__cplusplus</code>是个什么东西。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span><code>__cplusplus</code>是 C++
中的一个宏，被定义为一个整型值，它的值随着 C++
版本的升高而增大，因此可用于判断 C++ 代码的版本:</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于
C++98和C++03，<code>__cplusplus</code>的值为 199711L。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于
C++11，<code>__cplusplus</code>的值为 201103L。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于
C++14，<code>__cplusplus</code>的值为 201402L。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于
C++17，<code>__cplusplus</code>的值为 201703L。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>所以，我们就可以很清楚地知道了这个表达式就是在判断你的 C++
版本，只有版本不低于
C++11，才能编译<code>#if</code>与<code>#endif</code>之间的这些头文件。</p>
<ul>
<li>六</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>继续向下：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br></pre></td></tr></table></figure> <span class="math inline">\(\ \ \ \ \ \
\)</span>代表下面的一些头文件属于C++语言库。</p>
<ul>
<li>七</li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>接下来，就是基本的
C++ 中的头文件： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">//STL常用算法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span> <span class="comment">//STL位集容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span> <span class="comment">//定义负数类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span> <span class="comment">//STL双端队列容器 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span> <span class="comment">//定义异常处理类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span> <span class="comment">//文件输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">//STL定义运算函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span> <span class="comment">//操纵运算子</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span> <span class="comment">//基本输入/输出支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span> <span class="comment">//输入/输出系统使用的前置声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">//基本输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span> <span class="comment">//基本输入流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span> <span class="comment">//定义迭代器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span> <span class="comment">//定义最值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span> <span class="comment">//STL线性列表容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span> <span class="comment">//定义本地语言环境</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span> <span class="comment">//STL映射表容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span> <span class="comment">//定义了用于管理动态内存的常规程序</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span> <span class="comment">//定义了用于管理动态存储的函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span> <span class="comment">//定义了基础性的数值运算</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span> <span class="comment">//基本输出流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span> <span class="comment">//STL队列容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span> <span class="comment">//STL集合容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span> <span class="comment">//基于字符串的流</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span> <span class="comment">//STL堆栈容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span> <span class="comment">//定义了一些标准的异常类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span> <span class="comment">//底层输入/输出支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span> <span class="comment">//定义字符串类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span> <span class="comment">//定义了一些类型和函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span> <span class="comment">//STL通用模板类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span> <span class="comment">//支持面向数值计算的数组</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span> <span class="comment">//STL动态数组容器</span></span></span><br></pre></td></tr></table></figure> - 八</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>在一行的间隔之后，出现了这样的二十一行具有版本限制的头文件：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span> <span class="comment">//定义数组</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span> <span class="comment">//定义了原子类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span> <span class="comment">//日期和时间库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span> <span class="comment">//定义条件变量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span> <span class="comment">//STL单向列表容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span> <span class="comment">//定义 future 类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span> <span class="comment">//定义初始化列表</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span> <span class="comment">//定义互斥锁</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span> <span class="comment">//随机数库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span> <span class="comment">//有理数支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span> <span class="comment">//定义正则表达</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span> <span class="comment">//定义分配器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span> <span class="comment">//报告源于操作系统或低层程序接口的错误</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span> <span class="comment">//定义 thread 类</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span> <span class="comment">//定义元组</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span> <span class="comment">//支持 type_index 类及其散列支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span> <span class="comment">//提供模板元基础库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span> <span class="comment">//STL unordered_map 容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span> <span class="comment">//STL unordered_set 容器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure> <span class="math inline">\(\ \ \ \ \ \
\)</span>其中<code>#if __cplusplus &gt;= 201103L</code>和<code>#endif</code>的作用详见五。</p>
<h3 id="结语">结语：</h3>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>本人 OI
萌新，实力有限，本篇博客仅代表个人观点，如有缺漏错误之处，敬请各位大佬斧正。^_^</p>
<p>(结尾附上万能头文件里的所有头文件) <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure> 注： 1、特别鸣谢 @<a
href="https://www.luogu.com.cn/user/70299">Andysun06</a>
对此文章的重大贡献。</p>
<p>2、有关C++宏的知识详见往期洛谷日报 <a
href="https://www.luogu.com.cn/blog/Atalod/tou-lan-li-qi-hong">C++中偷懒利器——宏</a>。</p>
<p>3、参考资料：<a
href="https://baike.baidu.com/item/%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">条件编译_百度百科</a>、<a
href="https://baike.baidu.com/item/assert/10931289#ref_%5B1%5D_20093242">assert_百度百科</a>、<a
href="https://baike.baidu.com/item/%E5%A4%B4%E6%96%87%E4%BB%B6">头文件_百度百科</a>。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>头文件</tag>
      </tags>
  </entry>
  <entry>
    <title>树形dp</title>
    <url>/%E6%A0%91%E5%BD%A2dp/</url>
    <content><![CDATA[<ul>
<li>1、基础树形dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>给一棵树以及根的编号，求出每个点的深度和子树大小：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,r;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> d[N],s[N]; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		d[v]=d[u]<span class="number">+1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		s[u]+=s[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	r=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">		<span class="built_in">mr</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	d[r]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(r,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(d[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(s[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、递归前转移树形dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>给一棵树以及根的编号，点有点权，可正可负，求从根到叶子节点的链上的点权和最大的子链的点权和：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,r;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> val[N],f[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		f[v]=<span class="built_in">max</span>(f[v],f[u]+a[v]);</span><br><span class="line">		ans=<span class="built_in">max</span>(ans,f[v]);</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	r=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">		f[i]=val[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=val[r];</span><br><span class="line">	<span class="built_in">dfs</span>(r,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>递归后转移树形dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1352">P1352
没有上司的舞会</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">6010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> val[N],f[N][<span class="number">2</span>];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[u][<span class="number">1</span>]=val[u];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);</span><br><span class="line">		f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">		<span class="built_in">mr</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">0</span>],f[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4、树上01背包：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2014">P2014
[CTSC1997]选课</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line">cosnt <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> val[N],s[N],f[N][N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(f[u],<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(f[u]));</span><br><span class="line">	s[u]=<span class="number">1</span>;</span><br><span class="line">	f[u][<span class="number">1</span>]=val[u]; </span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=s[u];j;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> k=s[v];~k;k--)</span><br><span class="line">			&#123;</span><br><span class="line">				f[u][j+k]=<span class="built_in">max</span>(f[u][j+k],f[u][j]+f[v][k]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		s[u]+=s[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>()<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> fa=<span class="built_in">qread</span>();</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(fa,i);</span><br><span class="line">		<span class="built_in">mr</span>(i,fa);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(f[<span class="number">0</span>][m]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5、树上分组背包：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1273">P1273 有线电视网</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,val;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> f[N][N],s[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v,re <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to=v;</span><br><span class="line">    e[cnt].nxt=head[u];</span><br><span class="line">    e[cnt].val=w;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=s[u];~j;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(re <span class="type">int</span> k=s[v];~k;k--)</span><br><span class="line">            &#123;</span><br><span class="line">                f[u][j+k]=<span class="built_in">max</span>(f[u][j+k],f[u][j]+f[v][k]-e[i].val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		s[u]+=s[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    m=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=<span class="built_in">qread</span>();</span><br><span class="line">        <span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">            <span class="type">int</span> w=<span class="built_in">qread</span>();</span><br><span class="line">            <span class="built_in">mr</span>(i,v,w);</span><br><span class="line">            <span class="built_in">mr</span>(v,i,w);</span><br><span class="line">        &#125;</span><br><span class="line">        f[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=n-m<span class="number">+1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][<span class="number">1</span>]=<span class="built_in">qread</span>();</span><br><span class="line">        f[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        s[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=m;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f[<span class="number">1</span>][i]&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(i);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>6、基础换根dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2986">P2986 [USACO10MAR]Great
Cow Gathering G</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n; </span><br><span class="line"><span class="type">int</span> cnt,head[N],val[N];</span><br><span class="line"><span class="type">int</span> d[N],s[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,val;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> f[N],ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v,re <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	e[cnt].val=w;</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs1</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	s[u]=val[u];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		d[v]=d[u]+e[i].val;</span><br><span class="line">		<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">		s[u]+=s[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs2</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		f[v]=f[u]+(s[<span class="number">1</span>]-(s[v]&lt;&lt;<span class="number">1</span>))*e[i].val;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,f[v]);</span><br><span class="line">		<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> w=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v,w);</span><br><span class="line">		<span class="built_in">mr</span>(v,u,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[<span class="number">1</span>]+=d[i]*val[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=f[<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>7、<a
href="https://lhrg.github.io/进阶换根dp/">进阶换根dp</a></p></li>
<li><p>8、基环树之树形dp+环形dp：</p></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1453">P1453 城市环路</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//P1453 城市环路</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> b[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> rd[N],c[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>],g[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">double</span> k;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"><span class="comment">//建边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs0</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"><span class="comment">//找环</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">        <span class="comment">//父节点或已在环上就不算</span></span><br><span class="line">		<span class="keyword">if</span>(v==fa||b[v])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//找到一个点就加入环</span></span><br><span class="line">		<span class="keyword">if</span>(rd[v]==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			b[v]=<span class="number">1</span>;</span><br><span class="line">			c[++tot]=v;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            <span class="built_in">dfs0</span>(v,u);</span><br><span class="line">            <span class="comment">//加入一个点后就跳出循环</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">tppx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//拓扑排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(rd[i]==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			q.<span class="built_in">push</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			rd[v]--;</span><br><span class="line">			<span class="keyword">if</span>(rd[v]==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//找到第一个在环上的点加入环并进行 dfs</span></span><br><span class="line">		<span class="keyword">if</span>(rd[i]==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			b[i]=<span class="number">1</span>;</span><br><span class="line">			c[++tot]=i;</span><br><span class="line">			<span class="built_in">dfs0</span>(i,<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//加入一个点后就跳出循环</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"><span class="comment">//树形 dp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa||b[v])</span><br><span class="line">        <span class="comment">//父节点或已在环上就不算</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="comment">//转移</span></span><br><span class="line">		f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);</span><br><span class="line">		f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i][<span class="number">1</span>]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>()<span class="number">+1</span>;</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>()<span class="number">+1</span>;</span><br><span class="line">        <span class="comment">//统计入度</span></span><br><span class="line">		rd[u]++;</span><br><span class="line">		rd[v]++;</span><br><span class="line">        <span class="comment">//建边</span></span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">		<span class="built_in">mr</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//拓扑排序</span></span><br><span class="line">	<span class="built_in">tppx</span>();</span><br><span class="line">    <span class="comment">//对于每棵树 树形 dp</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(c[i],<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//环形 dp</span></span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">	g[<span class="number">1</span>][<span class="number">0</span>]=f[c[<span class="number">1</span>]][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[i][<span class="number">1</span>]=g[i<span class="number">-1</span>][<span class="number">0</span>]+f[c[i]][<span class="number">1</span>];</span><br><span class="line">		g[i][<span class="number">0</span>]=<span class="built_in">max</span>(g[i<span class="number">-1</span>][<span class="number">0</span>],g[i<span class="number">-1</span>][<span class="number">1</span>])+f[c[i]][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(g[tot][<span class="number">0</span>],g[tot][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">	g[<span class="number">1</span>][<span class="number">1</span>]=f[c[<span class="number">1</span>]][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[i][<span class="number">1</span>]=g[i<span class="number">-1</span>][<span class="number">0</span>]+f[c[i]][<span class="number">1</span>];</span><br><span class="line">		g[i][<span class="number">0</span>]=<span class="built_in">max</span>(g[i<span class="number">-1</span>][<span class="number">0</span>],g[i<span class="number">-1</span>][<span class="number">1</span>])+f[c[i]][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(ans,g[tot][<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//读入 k</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);</span><br><span class="line">    <span class="comment">//输出答案</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>,ans*k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>9、基环树之开环直接树形dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2607">[ZJOI2008]骑士</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,a[N],val[N];</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs1</span><span class="params">(re <span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(vis[a[u]])</span><br><span class="line">	&#123;</span><br><span class="line">		c=u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs1</span>(a[u]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs2</span><span class="params">(re <span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[u]=<span class="number">1</span>;</span><br><span class="line">	f[u][<span class="number">1</span>]=val[u];</span><br><span class="line">	f[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v^c)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">dfs2</span>(v);</span><br><span class="line">			f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">0</span>],f[v][<span class="number">1</span>]);</span><br><span class="line">			f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			f[u][<span class="number">1</span>]=-inf;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(a[i],i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs1</span>(i);</span><br><span class="line">		<span class="built_in">dfs2</span>(c);</span><br><span class="line">		<span class="type">int</span> maxx=<span class="built_in">max</span>(f[c][<span class="number">0</span>],f[c][<span class="number">1</span>]);</span><br><span class="line">		c=a[c];</span><br><span class="line">		<span class="built_in">dfs2</span>(c);</span><br><span class="line">		ans+=<span class="built_in">max</span>(maxx,<span class="built_in">max</span>(f[c][<span class="number">0</span>],f[c][<span class="number">1</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>背包 DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>基环树</tag>
      </tags>
  </entry>
  <entry>
    <title>筛法</title>
    <url>/%E7%AD%9B%E6%B3%95/</url>
    <content><![CDATA[<p><span class="math inline">\(\qquad\!\!\)</span>整理一些 OI
中常用的筛法：</p>
<ul>
<li>1、埃拉托斯特尼筛法：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>给定一个数 <span
class="math inline">\(n\)</span> 判断这个数是不是质数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> prime[N]; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">ass</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">	prime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> t=<span class="built_in">sqrt</span>(x)+eps;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> j=(i&lt;&lt;<span class="number">1</span>);j&lt;=x;j+=i)</span><br><span class="line">			&#123;</span><br><span class="line">				prime[j]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">ass</span>(n);</span><br><span class="line">	<span class="built_in">qwrite</span>(prime[n]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、欧拉筛法：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>欧拉筛法是一种在线性时间复杂度内求出
<span class="math inline">\(1-n\)</span>
中所有的素数的筛法，通常被称为线性筛：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3383">P3383
【模板】线性筛素数</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q,k; </span><br><span class="line"><span class="type">bool</span> prime[N];</span><br><span class="line"><span class="type">int</span> _prime[N],cnt;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">oss</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">	prime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=x;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">		&#123;</span><br><span class="line">			_prime[++cnt]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*_prime[j]&lt;=x;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			prime[i*_prime[j]]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i%_prime[j]))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">oss</span>(n);</span><br><span class="line">	q=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		k=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">qwrite</span>(_prime[k]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3、线性筛欧拉函数：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2158">P2158
[SDOI2008]仪仗队</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">40010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,cnt,ans;</span><br><span class="line"><span class="type">bool</span> prime[N];</span><br><span class="line"><span class="type">int</span> _prime[N],phi[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">oss</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">	prime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=x;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">		&#123;</span><br><span class="line">			_prime[++cnt]=i;</span><br><span class="line">			phi[i]=i<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*_prime[j]&lt;=x;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			prime[i*_prime[j]]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i%_prime[j]))</span><br><span class="line">			&#123;</span><br><span class="line">				phi[i*_prime[j]]=phi[i]*_prime[j];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				phi[i*_prime[j]]=phi[i]*(_prime[j]<span class="number">-1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">oss</span>(n);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=phi[i]*<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=<span class="number">3</span>;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4、线性筛约数个数：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>求出 <span
class="math inline">\(n\)</span> 的约数个数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线性筛约数个数 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,cnt;</span><br><span class="line"><span class="type">bool</span> prime[N];</span><br><span class="line"><span class="type">int</span> _prime[N],tot[N],num[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">oss</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">	prime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	tot[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=x;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">		&#123;</span><br><span class="line">			_prime[++cnt]=i;</span><br><span class="line">			tot[i]=<span class="number">2</span>;</span><br><span class="line">			num[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*_prime[j]&lt;=x;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			prime[i*_prime[j]]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i%_prime[j]))</span><br><span class="line">			&#123;</span><br><span class="line">				tot[i*_prime[j]]=tot[i]/(num[i]<span class="number">+1</span>)*(num[i]<span class="number">+2</span>);</span><br><span class="line">				num[i*_prime[j]]=num[i]<span class="number">+1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				num[i*_prime[j]]=<span class="number">1</span>;</span><br><span class="line">				tot[i*_prime[j]]=(tot[i]&lt;&lt;<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">oss</span>(n<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(tot[n]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5、线性筛约数和：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>求出 <span
class="math inline">\(n\)</span> 的约数和：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,cnt;</span><br><span class="line"><span class="type">bool</span> prime[N];</span><br><span class="line"><span class="type">int</span> _prime[N],sum[N],tot[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">oss</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">1</span>,<span class="built_in">sizeof</span>(prime));</span><br><span class="line">	prime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	prime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	sum[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=x;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">		&#123;</span><br><span class="line">			_prime[++cnt]=i;</span><br><span class="line">			sum[i]=i<span class="number">+1</span>;</span><br><span class="line">			tot[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*_prime[j]&lt;=x;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			prime[i*_prime[j]]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i%_prime[j]))</span><br><span class="line">			&#123;</span><br><span class="line">				sum[i*_prime[j]]=sum[i]*_prime[j]+tot[i];</span><br><span class="line">				tot[i*_prime[j]]=tot[i];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				sum[i*_prime[j]]=sum[i]*(_prime[j]<span class="number">+1</span>);</span><br><span class="line">				tot[i*_prime[j]]=sum[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">oss</span>(n<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(sum[n]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>筛法</tag>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>线性代数是数学的一个分支，它的研究对象是向量，向量空间（或称线性空间），线性变换和有限维的线性方程组。向量空间是现代数学的一个重要课题；因而，线性代数被广泛地应用于抽象代数和泛函分析中；通过解析几何，线性代数得以被具体表示。线性代数的理论已被泛化为算子理论。由于科学研究中的非线性模型通常可以被近似为线性模型，使得线性代数被广泛地应用于自然科学和社会科学中。</p>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>数论</title>
    <url>/%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>数论是纯粹数学的分支之一，主要研究整数的性质。</p>
<ul>
<li>1、欧几里得（GCD）：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>给出两个正整数，求出两个数的
<span class="math inline">\(\gcd\)</span>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="title">gcd</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">gcd</span>(a,b));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、拓展欧几里得（exGCD）：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>对于三个自然数 <span
class="math inline">\(a,b,c\)</span>，求一组满足 <span
class="math inline">\(ax+by=c\)</span> 的 <span
class="math inline">\((x,y)\)</span> 的整数解。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>首先我们需要判断是否存在整数解，对于这个方程存在整数解的充要条件为
<span class="math inline">\(\gcd(a,b)|c\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>我们先把方程化为 <span
class="math inline">\(ax+by=\gcd(a,b)\)</span>，最后求得的 <span
class="math inline">\(x,y\)</span> 再乘以<span
class="math inline">\(c\)</span> 除以 <span
class="math inline">\(\gcd(a,b)\)</span> 即可。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>根据朴素欧几里得，我们可以通过这个方程推一下式子：
<span class="math display">\[
\begin{aligned}
ax+by&amp;=\gcd(a,b)\\
&amp;=\gcd(b,a \bmod b)\\
&amp;\Rightarrow bx+ (a \bmod b)y\\
&amp;=bx+(a-\left\lfloor\dfrac{a}{b}\right\rfloor b)y\\
&amp;=ay+b(x-\left\lfloor\dfrac{a}{b}\right\rfloor by)
\end{aligned}
\]</span> <span class="math inline">\(\qquad\!\!\)</span>不难发现此时
<span class="math inline">\(x\)</span> 变成了 <span
class="math inline">\(y\)</span>，<span class="math inline">\(y\)</span>
变成了 <span class="math inline">\(x-\left\lfloor \dfrac{a}{b}
\right\rfloor y\)</span>，利用这个性质，我们可以递归去求解 <span
class="math inline">\((x,y)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,c,r;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">gcd</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">exgcd</span><span class="params">(re <span class="type">int</span> a,re <span class="type">int</span> b,re <span class="type">int</span> &amp;x,re <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!b)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="number">1</span>;</span><br><span class="line">		y=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exgcd</span>(b,a%b,y,x);</span><br><span class="line">		y-=a/b*x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	c=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="type">int</span> r=<span class="built_in">gcd</span>(a,b);</span><br><span class="line">	<span class="keyword">if</span>(c%r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exgcd</span>(a,b,x,y);</span><br><span class="line">	x=x*c/r;</span><br><span class="line">	y=y*c/r;</span><br><span class="line">	<span class="built_in">qwrite</span>(x);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(y);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
        <tag>GCD</tag>
        <tag>exGCD</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>一些在求组合数的时候会很有用的东西：</p>
<ul>
<li><p>1、乘法逆元:</p>
<ul>
<li>①、费马小定理：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>当 <span
class="math inline">\(p\)</span> 为素数，<span
class="math inline">\(a\)</span> 为一个正整数且 <span
class="math inline">\(a\)</span> 与 <span
class="math inline">\(p\)</span> 互质，则 <span
class="math inline">\(a^{-1}\equiv a^{p-2} \pmod{p}\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>给定 <span
class="math inline">\(a\)</span>、<span
class="math inline">\(p\)</span>，保证 <span
class="math inline">\(p\)</span> 为素数并且 <span
class="math inline">\(a\)</span> 与 <span
class="math inline">\(p\)</span> 互质，求出在模 <span
class="math inline">\(p\)</span> 意义下的 <span
class="math inline">\(a\)</span> 的逆元。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,p;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(res*x)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        x=(x*x)%p;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="built_in">qread</span>();</span><br><span class="line">    p=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="built_in">qwrite</span>(<span class="built_in">qpow</span>(a,p<span class="number">-2</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <span id="more"></span></p>
<ul>
<li>②、递推：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>给定 <span
class="math inline">\(n\)</span>、<span
class="math inline">\(p\)</span>，保证 <span
class="math inline">\(p\)</span> 为质数，在 <span
class="math inline">\(O(n)\)</span> 的时间复杂度内求出 <span
class="math inline">\(1-n\)</span> 在模 <span
class="math inline">\(p\)</span> 意义下的乘法逆元：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>首先我们有 <span
class="math inline">\(1^{-1}\equiv 1\pmod{p}\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>然后设 <span
class="math inline">\(p=k\times i+r\ \
(1&lt;r&lt;i&lt;p)\)</span>，也就是 <span
class="math inline">\(k\)</span> 是 <span
class="math inline">\(p/i\)</span> 的商，<span
class="math inline">\(r\)</span> 是余数。</p>
<p><span class="math inline">\(\qquad\!\!k\times i+r\equiv
0\pmod{p}\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>两侧同时乘 <span
class="math inline">\(i^{-1}\)</span> 和 <span
class="math inline">\(r^{-1}\)</span>：</p>
<p><span class="math inline">\(\qquad\!\!k\times r^{-1}+i^{-1}\equiv 0
\pmod{p} \\ \qquad\!\! \qquad\!\! \qquad\!\! \ \ \ \ \ i^{-1}\equiv
-k\times r^{-1}\pmod{p} \\ \qquad\!\! \qquad\!\! \qquad\!\! \ \ \ \ \
i^{-1} \equiv \left(p-\left\lfloor
\dfrac{p}{i}\right\rfloor\right)\times (p\bmod i)^{-1}
\pmod{p}\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3811">P3811
【模板】乘法逆元</a>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,p,inv[N]; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    p=<span class="built_in">qread</span>();</span><br><span class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        inv[i]=<span class="number">1ll</span>*(p-p/i)*inv[p%i]%p;</span><br><span class="line">        <span class="built_in">qwrite</span>(inv[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>③、递推阶乘逆元：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>本宇筛。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>求一个组合数 <span
class="math inline">\(\dbinom{n}{m}\)</span>：</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=M; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> fact[N],finv[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res*x%M;</span><br><span class="line">        &#125;</span><br><span class="line">        x=x*x%M;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">C</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[x]*finv[y]%M*finv[x-y]%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">qread</span>();</span><br><span class="line">    m=<span class="built_in">qread</span>();</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fact[i]=fact[i<span class="number">-1</span>]*i%M;</span><br><span class="line">    &#125;</span><br><span class="line">    finv[n]=<span class="built_in">qpow</span>(fact[n],M<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=n<span class="number">-1</span>;~i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        finv[i]=finv[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qwrite</span>(<span class="built_in">C</span>(n,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>2、卢卡斯定理：</p></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P3807">P3807
【模板】卢卡斯定理</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t,n,m,p;</span><br><span class="line"><span class="type">int</span> fact[N],finv[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res*x%p;</span><br><span class="line">        &#125;</span><br><span class="line">        x=x*x%p;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">C</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fact[x]*finv[y]%p*finv[x-y]%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">lucas</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;p&amp;&amp;y&lt;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">C</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lucas</span>(x/p,y/p)*<span class="built_in">C</span>(x%p,y%p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	t=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		n=<span class="built_in">qread</span>();</span><br><span class="line">	    m=<span class="built_in">qread</span>();</span><br><span class="line">	    p=<span class="built_in">qread</span>();</span><br><span class="line">	    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;p;i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	        fact[i]=fact[i<span class="number">-1</span>]*i%p;</span><br><span class="line">	    &#125;</span><br><span class="line">	    finv[p<span class="number">-1</span>]=<span class="built_in">qpow</span>(fact[p<span class="number">-1</span>],p<span class="number">-2</span>);</span><br><span class="line">	    <span class="keyword">for</span>(re <span class="type">int</span> i=p<span class="number">-2</span>;~i;i--)</span><br><span class="line">	    &#123;</span><br><span class="line">	        finv[i]=finv[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%p;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="built_in">qwrite</span>(<span class="built_in">lucas</span>(n+m,n));</span><br><span class="line">	    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>组合数学</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title>数学</title>
    <url>/%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<p><span class="math inline">\(\qquad\!\!\)</span>大概是最近需要的 OI
中有关纯数学的部分算法，估计会鸽很多。</p>
<ul>
<li>1、快速幂：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1226">快速幂||取余运算</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,p;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			res=(res*x)%p;</span><br><span class="line">		&#125;</span><br><span class="line">		x=(x*x)%p;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	p=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;^&quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; mod &quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">qpow</span>(a,b));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ul>
<li>2、慢速乘：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>输出 <span
class="math inline">\(a\times b\ \ \bmod \  \ p\)</span> 的值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a,b,p;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			res=(res+x)%p;</span><br><span class="line">		&#125;</span><br><span class="line">		x=(x+x)%p;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a=<span class="built_in">qread</span>();</span><br><span class="line">	b=<span class="built_in">qread</span>();</span><br><span class="line">	p=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; mod &quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">qpow</span>(a,b));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>3、高精度计算</p></li>
<li><p>4、<a href="https://lhrg.github.io/数论/">数论</a></p></li>
<li><p>5、<a href="https://lhrg.github.io/筛法/">筛法</a></p></li>
<li><p>6、<a
href="https://lhrg.github.io/线性代数/">线性代数</a></p></li>
<li><p>7、<a
href="https://lhrg.github.io/组合数学/">组合数学</a></p></li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶动态规划</title>
    <url>/%E8%BF%9B%E9%98%B6%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>除了基础动态规划中的三种动态规划以外，还有一些比较难的动态规划：</p>
<span id="more"></span>
<hr />
<ul>
<li>1、<a href="https://lhrg.github.io/树形dp/">树形dp</a>：
<ul>
<li>(1)、基础树形dp</li>
<li>(2)、递归前转移树形dp</li>
<li>(3)、递归后转移树形dp</li>
<li>(4)、树上01背包</li>
<li>(5)、树上分组背包</li>
<li>(6)、基础换根dp</li>
<li>(7)、<a
href="https://lhrg.github.io/进阶换根dp/">进阶换根dp</a></li>
<li>(8)、基环树之树形dp+环形dp</li>
<li>(9)、基环树之开环直接树形dp</li>
</ul></li>
<li>2、DAG上的dp（拓扑排序）：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>就是拓扑排序。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P4017">P4017
最大食物链计数</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">500010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P=<span class="number">80112002</span>; </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[M];</span><br><span class="line"><span class="type">int</span> rd[N],cd[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cd[u]++;</span><br><span class="line">	rd[v]++;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">tppx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!rd[i]&amp;&amp;cd[i])</span><br><span class="line">		&#123;</span><br><span class="line">			q.<span class="built_in">push</span>(i);</span><br><span class="line">			f[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			f[v]=(f[u]+f[v])%P;</span><br><span class="line">			rd[v]--;</span><br><span class="line">			<span class="keyword">if</span>(!rd[v]&amp;&amp;!cd[v])</span><br><span class="line">			&#123;</span><br><span class="line">				ans=(ans+f[v])%P;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!rd[v]&amp;&amp;cd[v])</span><br><span class="line">			&#123;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">tppx</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(ans?ans:<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>3、环形dp：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>在形成了环形以后，从一段开始再从另一端结束的dp已经不能满足所有条件。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>我们考虑上述的这种情况即为断开了环形的一条边。这样在处理时，我们先假设这条边是断开的，统计一下符合条件的个数，再强行把这条边连上，并统计符合条件的断开边后统计不到的答案。这样，所有的答案就没有遗漏。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P6064">P6064 [USACO05JAN]Naptime
G</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3850</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"><span class="type">int</span> f[N][N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		val[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j][<span class="number">0</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j][<span class="number">1</span>],f[i<span class="number">-1</span>][j][<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">if</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>],f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+val[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(f[n][m][<span class="number">0</span>],f[n][m][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=val[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j][<span class="number">0</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j][<span class="number">1</span>],f[i<span class="number">-1</span>][j][<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">if</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">1</span>]=<span class="built_in">max</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>],f[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+val[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(ans,f[n][m][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4、区间dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>区间dp
是通过两个相邻区间的最优决策从而推出整体区间的最优决策的一类dp问题，以时间复杂度较大（常为
<span
class="math inline">\(O(n^3)\)</span>）作为特点。一部分具有相关性质的题目可以利用<a
href="http://oi-wiki.com/dp/opt/quadrangle/">四边形不等式</a>优化到
<span class="math inline">\(O(n^2)\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P1880">P1880
[NOI1995]石子合并</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N],pre[N];</span><br><span class="line"><span class="type">int</span> f[N][N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> ans1,ans2=inf;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="keyword">if</span>(i^n)</span><br><span class="line">		&#123;</span><br><span class="line">			a[n+i]=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	m=(n&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pre[i]=pre[i<span class="number">-1</span>]+a[i];</span><br><span class="line">		<span class="keyword">if</span>(i^m)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][i<span class="number">+1</span>][<span class="number">0</span>]=a[i]+a[i<span class="number">+1</span>];</span><br><span class="line">			f[i][i<span class="number">+1</span>][<span class="number">1</span>]=a[i]+a[i<span class="number">+1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> l=<span class="number">2</span>;l&lt;n;l++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>,j=i+l;i&lt;=m&amp;&amp;j&lt;=m;i++,j=i+l)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][j][<span class="number">1</span>]=inf;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> k=i;k&lt;j;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				f[i][j][<span class="number">0</span>]=<span class="built_in">max</span>(f[i][j][<span class="number">0</span>],f[i][k][<span class="number">0</span>]+f[k<span class="number">+1</span>][j][<span class="number">0</span>]+pre[j]-pre[i<span class="number">-1</span>]);</span><br><span class="line">				f[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(f[i][j][<span class="number">1</span>],f[i][k][<span class="number">1</span>]+f[k<span class="number">+1</span>][j][<span class="number">1</span>]+pre[j]-pre[i<span class="number">-1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans1=<span class="built_in">max</span>(ans1,f[i][i+n<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">		ans2=<span class="built_in">min</span>(ans2,f[i][i+n<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans2);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(ans1);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5、状压dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>状压dp
通常利用一个数字表示一种状态，利用位运算进行状态的转移。一般状压的题目的数据范围都会<strong>很小</strong>（<span
class="math inline">\(n=15-25\)</span>），所以一旦碰到了这样的小数据范围的话一定要思考一下能不能
状压dp。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="luogu.com.cn/problem/P1896">P1896 [SCOI2005]互不侵犯</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> f[<span class="number">10</span>][(<span class="number">1</span>&lt;&lt;<span class="number">9</span>)+(<span class="number">1</span>&lt;&lt;<span class="number">8</span>)][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> ans,temp1,temp2;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">cs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&amp;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y++;</span><br><span class="line">		&#125;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">bool</span> <span class="title">pd1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(y&lt;=k&amp;&amp;(!(x&amp;(x&lt;&lt;<span class="number">1</span>)))&amp;&amp;(!(x&amp;(x&gt;&gt;<span class="number">1</span>))))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">bool</span> <span class="title">pd2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">pd1</span>(x,z)&amp;&amp;(!(x&amp;(y&lt;&lt;<span class="number">1</span>)))&amp;&amp;(!(x&amp;y))&amp;&amp;(!(x&amp;(y&gt;&gt;<span class="number">1</span>))))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	k=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="type">int</span> temp_=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=temp_;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp4=<span class="built_in">cs</span>(i);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">pd1</span>(i,temp4))</span><br><span class="line">		&#123;</span><br><span class="line">			f[<span class="number">1</span>][i][temp4]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[<span class="number">1</span>][i][k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">qwrite</span>(ans);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> v=<span class="number">0</span>;v&lt;=temp_;v++)</span><br><span class="line">		&#123;</span><br><span class="line">			temp2=<span class="built_in">cs</span>(v);</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">pd1</span>(v,temp2))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> u=<span class="number">0</span>;u&lt;=temp_;u++)</span><br><span class="line">				&#123;</span><br><span class="line">					temp1=<span class="built_in">cs</span>(u);</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">pd2</span>(u,v,temp1))</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> temp3=k-temp2;</span><br><span class="line">						<span class="keyword">for</span>(re <span class="type">int</span> j=temp1;j&lt;=temp3;j++)</span><br><span class="line">						&#123;</span><br><span class="line">							f[i][v][j+temp2]+=f[i<span class="number">-1</span>][u][j];</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=temp_;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[i][j][k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>6、数位dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>数位dp
一般解决的是一类数字问题：从 <span class="math inline">\(l\)</span> 到
<span class="math inline">\(r\)</span> 有多少个数符合某个性质，其中
<span class="math inline">\(l\)</span> 和 <span
class="math inline">\(r\)</span> 都是很大的数，从 <span
class="math inline">\(l\)</span> 循环到 <span
class="math inline">\(r\)</span> 显然会
<code>TLE</code>。这样，我们就可以利用在每个数位上进行统计的方法进行
数位dp，一般来说，数位dp 由 dp、拆数、容斥三部分组成。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/P2657">P2657 [SCOI2009] windy
数</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> A,B;</span><br><span class="line"><span class="type">int</span> f[<span class="number">20</span>][<span class="number">20</span>],a[<span class="number">20</span>];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">js</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//计算所有小于x的windy数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)</span><br><span class="line">	&#123;</span><br><span class="line">		l++;</span><br><span class="line">		a[l]=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;l;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;a[l];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=f[l][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;a[i];j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(a[i<span class="number">+1</span>]-j)&lt;<span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans+=f[i][j]; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">abs</span>(a[i<span class="number">+1</span>]-a[i])&lt;<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9</span>;k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">abs</span>(k-j)&lt;<span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				f[i][j]+=f[i<span class="number">-1</span>][k];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	A=<span class="built_in">qread</span>();</span><br><span class="line">	B=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">js</span>(B<span class="number">+1</span>)-<span class="built_in">js</span>(A));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>7、期望dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>期望dp 或者叫 概率dp
是一类有关数学上的概率和期望的dp问题。一般由于期望的可传递性而需要计算较大范围下的期望。其实这种算法虽然叫做dp，但是其实一般并不需要进行最优决策，只是由于其需要计算的东西满足无后效性而可以利用dp的方式来做。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>例题：</p>
<p><span class="math inline">\(\qquad\!\!\)</span><a
href="https://www.luogu.com.cn/problem/CF235B">CF235B Let's Play
Osu!</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> x,x1,ans; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;x);</span><br><span class="line">		ans+=x*(<span class="number">2</span>*x1<span class="number">+1</span>);</span><br><span class="line">		x1=x*(x1<span class="number">+1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>8、<a
href="https://lhrg.github.io/题解-U534157-【矩阵革命】/">dp计数</a></li>
<li>9、dp优化：
<ul>
<li>(1).斜率优化</li>
<li>(2).四边形不等式优化</li>
<li>(3).数据结构优化：
<ul>
<li>①.单调栈/单调队列优化</li>
<li>②.树状数组优化</li>
<li>③.线段树优化</li>
<li>④.矩阵快速幂优化</li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>拓扑排序</tag>
        <tag>环形 DP</tag>
        <tag>区间 DP</tag>
        <tag>状压 DP</tag>
        <tag>数位 DP</tag>
        <tag>期望 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>普通物理实验(1)</title>
    <url>/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C-1/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>作为倒数第二批大二才上普物实验的物院本科生，我于2023-2024学年秋季学期选修
普通物理实验(1)
课程，因为普物实验对教学模式进行了一定的改革，不像往年所有实验的实验报告均需要课后整理完成（即部分实验课上即交实验报告），所以只有五个实验需要课后整理完成实验报告，按照实验名称顺序排列如下：</p>
<ul>
<li><a href="/files/测定金属的杨氏模量%20实验报告.pdf">实验八
测定金属的杨氏模量</a></li>
<li><a href="/files/测定介质中的声速%20实验报告.pdf">实验十二
测定介质中的声速</a></li>
<li><a href="/files/霍尔效应测量磁场%20实验报告.pdf">实验十六
霍尔效应测量磁场</a></li>
<li><a href="files/弗兰克-赫兹实验%20实验报告.pdf">实验十八
弗兰克-赫兹实验</a></li>
<li><a href="files/光衍射的定量研究%20实验报告.pdf">实验二十
光衍射的定量研究</a></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>以上实验报告均由 LaTeX
排版，使用 TeX Live 2024 发行版，XeLaTeX 编译器（格式+引擎）于 PKUTEX
平台生成。仅供参考，如因此产生的任何问题，本人概不负责😈。</p>
]]></content>
      <categories>
        <category>学习&amp;科研</category>
      </categories>
      <tags>
        <tag>physics</tag>
        <tag>物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>普通物理实验(2)</title>
    <url>/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C-2/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>作为倒数第二批大二才上普物实验的物院本科生，我于2023-2024学年春季学期选修
普通物理实验(2)
课程，因为普物实验对教学模式进行了一定的改革，不像往年所有实验的实验报告均需要课后整理完成（即部分实验课上即交实验报告），所以只有六个实验需要课后整理完成实验报告（但是，普物2
有不少是双周实验，按照一周的课程的时间做满基本上就能做完，所以总体来说并不比
普物1 负担更重），按照实验名称顺序排列如下：</p>
<ul>
<li><a href="/files/弦上驻波实验%20实验报告.pdf">实验十三
弦上驻波实验</a></li>
<li><a
href="/files/高温超导材料特性测试和低温温度计%20实验报告.pdf">实验二十三
高温超导材料特性测试和低温温度计</a></li>
<li><a
href="/files/基于虚拟仪器技术的电路综合实验%20实验报告.pdf">实验二十九
基于虚拟仪器技术的电路综合实验</a></li>
<li><a href="files/用示波器观测动态磁滞回线%20实验报告.pdf">实验三十
用示波器观测动态磁滞回线</a></li>
<li><a href="files/光源的时间相干性%20实验报告.pdf">实验三十六
光源的时间相干性</a></li>
<li><a href="files/光信息处理%20实验报告.pdf">光信息处理</a></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>以上实验报告均由 LaTeX
排版，使用 TeX Live 2024 发行版，XeLaTeX 编译器（格式+引擎）于 PKUTEX
平台生成。仅供参考，如因此产生的任何问题，本人概不负责😈。</p>
]]></content>
      <categories>
        <category>学习&amp;科研</category>
      </categories>
      <tags>
        <tag>physics</tag>
        <tag>物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶换根dp</title>
    <url>/%E8%BF%9B%E9%98%B6%E6%8D%A2%E6%A0%B9dp/</url>
    <content><![CDATA[<h3 id="战略威慑智旭生加强版伪题解">战略威慑(智旭生加强版)伪题解</h3>
<hr />
<p><span class="math inline">\(\qquad\!\!\)</span>一句话题意：在 <span
class="math inline">\(O(N)\)</span>
的时间复杂度内求出一棵树删去一条边以后分裂成的两颗新树的直径的乘积的最大值。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>相信暴力大家都会，下面就直接说一种<del>比较麻烦的</del>正解吧：</p>
<hr />
<p><strong>应用算法：换根<span
class="math inline">\(dp\)</span></strong></p>
<span id="more"></span>
<p><strong>我就认为大家对于思想都理解了，我主要讲一下比较复杂的分类讨论和代码实现：</strong></p>
<h5 id="qquad首先我们考虑一下每个节点需要存储的数据"><span
class="math inline">\(\qquad\!\!\)</span>首先，我们考虑一下每个节点需要存储的数据：</h5>
<p><span class="math inline">\(\qquad\!\!\)</span>由于在 <span
class="math inline">\(dp\)</span>
找直径，所以需要存一下经过每个节点向下的最长链 <span
class="math inline">\(f1\)</span> 和次长链 <span
class="math inline">\(f2\)</span>；由于新树的直径不一定过切割点，所以需要存一下每个节点的最长子树路径
<span class="math inline">\(dpf1\)</span>
，注意这个路径不能包含该点；由于进行 换根<span
class="math inline">\(dp\)</span>，需要将旧的根的信息传递给新的根，所以需要再存一个再次长链
<span class="math inline">\(f3\)</span> 和次长子树路径 <span
class="math inline">\(dpf2\)</span> ；由于进行 换根<span
class="math inline">\(dp\)</span>，需要确定新的根对于旧的根的信息继承，所以需要再存一下最长链的最优子节点编号
<span class="math inline">\(g1\)</span> 和次长链的次优子节点编号 <span
class="math inline">\(g2\)</span> 以及最长子树路径的最优子节点编号 <span
class="math inline">\(dpg1\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dpf1,dpg1,dpf2,f1,f2,f3,g1,g2;</span><br><span class="line"><span class="comment">//	int dpg2,g3;这两个的意思大家都能懂的，它们没有存储的必要，不过由于我有点强迫症，就写上+注释掉了。</span></span><br><span class="line">&#125;;</span><br><span class="line">node a[N];</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="qquad其次我们考虑初始化每个点的以上变量"><span
class="math inline">\(\qquad\!\!\)</span>其次，我们考虑初始化每个点的以上变量：</h5>
<p><span class="math inline">\(\qquad\!\!\)</span>很简单的树形 <span
class="math inline">\(dp\)</span>，我们利用一次 <span
class="math inline">\(dfs\)</span> 进行处理，具体内容可自行理解。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><del>这不会还有人不会吧？不会吧。不会吧。</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs1</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&gt;a[u].dpf1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].dpf2=a[u].dpf1;</span><br><span class="line"><span class="comment">//			a[u].dpg2=a[u].dpg1;</span></span><br><span class="line">			a[u].dpf1=<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2);</span><br><span class="line">			a[u].dpg1=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&lt;=a[u].dpf1&amp;&amp;<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&gt;a[u].dpf2)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].dpf2=<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2);</span><br><span class="line"><span class="comment">//			a[u].dpg2=v;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&gt;a[u].f1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[u].f2;</span><br><span class="line"><span class="comment">//			a[u].g3=a[u].g2;</span></span><br><span class="line">			a[u].f2=a[u].f1;</span><br><span class="line">			a[u].g2=a[u].g1;</span><br><span class="line">			a[u].f1=a[v].f1<span class="number">+1</span>;</span><br><span class="line">			a[u].g1=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&lt;=a[u].f1&amp;&amp;a[v].f1<span class="number">+1</span>&gt;a[u].f2)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[u].f2;</span><br><span class="line"><span class="comment">//			a[u].g3=a[u].g2;</span></span><br><span class="line">			a[u].f2=a[v].f1<span class="number">+1</span>;</span><br><span class="line">			a[u].g2=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&lt;=a[u].f2&amp;&amp;a[v].f1<span class="number">+1</span>&gt;a[u].f3)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[v].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//			a[u].g3=v;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="qquad再次我们考虑进行-换根dp"><span
class="math inline">\(\qquad\!\!\)</span>再次，我们考虑进行 换根<span
class="math inline">\(dp\)</span>：</h5>
<p><span class="math inline">\(\qquad\!\!\)</span>我们利用一次 <span
class="math inline">\(dfs\)</span>
进行处理。先考虑统计答案，我们只需要根据 <span
class="math inline">\(dfs\)</span>
的顺序对于每条边不记的情况统计一次答案即可；再考虑换根的过程，我们只需要根据
<span class="math inline">\(dfs\)</span>
的顺序将每条边的两侧的节点中的父节点（此时的根节点）的信息传递给子节点（新的根节点）即可；最后考虑一下正确性，由于换根的过程只改变新的根一个节点的信息，且回溯后此信息无用，易证该过程是正确的。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>由于新的根节点与父节点存储的用于统计答案的数据存在联系，所以就需要进行分类讨论，先看一下程序的框架：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs2</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//	for(re int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout&lt;&lt;&quot;u=&quot;&lt;&lt;u&lt;&lt;&quot; i=&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf2&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f1&lt;&lt;&quot; &quot;&lt;&lt;a[i].g1&lt;&lt;&quot; &quot;&lt;&lt;a[i].f2&lt;&lt;&quot; &quot;&lt;&lt;a[i].g2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f3&lt;&lt;&quot; &quot;&lt;&lt;a[i].g3&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(v==a[u].g1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				情况一：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				情况二：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			情况一+情况二：统一的对于链换根。</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(v==a[u].g2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				情况三：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				情况四：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			情况三+情况四：统一的对于链换根。</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				情况五：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				情况六：统计答案+对于子树路径换根。</span><br><span class="line">			&#125;</span><br><span class="line">			情况五+情况六：统一的对于链换根。</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\qquad\!\!\)</span>下面进行分类讨论：</p>
<ul>
<li><p>一、新的根 <span class="math inline">\(v\)</span> 为父节点 <span
class="math inline">\(u\)</span> 的最长链的最优子节点 <span
class="math inline">\(g1\)</span>：</p>
<ul>
<li>情况一：新的根 <span class="math inline">\(v\)</span> 为父节点 <span
class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f2+a[u].f3)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f2+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况二：新的根 <span class="math inline">\(v\)</span> 不为父节点
<span class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f2+a[u].f3)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f2+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况一+情况二：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一的对于链换根:</span></span><br><span class="line"><span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[v].f1;</span><br><span class="line">	a[v].g2=a[v].g1;</span><br><span class="line">	a[v].f1=a[u].f2<span class="number">+1</span>;</span><br><span class="line">	a[v].g1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f2<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[u].f2<span class="number">+1</span>;</span><br><span class="line">	a[v].g2=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f2<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[u].f2<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//	a[v].g3=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>二、新的根 <span class="math inline">\(v\)</span> 为父节点 <span
class="math inline">\(u\)</span> 的次长链的次优子节点 <span
class="math inline">\(g2\)</span>：</p>
<ul>
<li>情况三：新的根 <span class="math inline">\(v\)</span> 为父节点 <span
class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f3)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况四：新的根 <span class="math inline">\(v\)</span> 不为父节点
<span class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f3)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况三+情况四：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一的对于链换根:</span></span><br><span class="line"><span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[v].f1;</span><br><span class="line">	a[v].g2=a[v].g1;</span><br><span class="line">	a[v].f1=a[u].f1<span class="number">+1</span>;</span><br><span class="line">	a[v].g1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[u].f1<span class="number">+1</span>;</span><br><span class="line">	a[v].g2=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[u].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//	a[v].g3=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>三、新的根 <span class="math inline">\(v\)</span> 既不为父节点
<span class="math inline">\(u\)</span> 的最长链的最优子节点 <span
class="math inline">\(g1\)</span>，又不为父节点 <span
class="math inline">\(u\)</span> 的次长链的次优子节点 <span
class="math inline">\(g2\)</span>：</p>
<ul>
<li>情况五：新的根 <span class="math inline">\(v\)</span> 为父节点 <span
class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f2)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f2)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况六：新的根 <span class="math inline">\(v\)</span> 不为父节点
<span class="math inline">\(u\)</span> 的最长子树路径的最优子节点 <span
class="math inline">\(dpg1\)</span>：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计答案：</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f2)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f2)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line"><span class="comment">//对于子树路径换根：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&gt;a[v].dpf1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//	a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">	a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2);</span><br><span class="line">	a[v].dpg1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&gt;a[v].dpf2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2);</span><br><span class="line"><span class="comment">//	a[v].dpg2=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>情况五+情况六：</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一的对于链换根:</span></span><br><span class="line"><span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[v].f1;</span><br><span class="line">	a[v].g2=a[v].g1;</span><br><span class="line">	a[v].f1=a[u].f1<span class="number">+1</span>;</span><br><span class="line">	a[v].g1=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//	a[v].g3=a[v].g2;</span></span><br><span class="line">	a[v].f2=a[u].f1<span class="number">+1</span>;</span><br><span class="line">	a[v].g2=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">&#123;</span><br><span class="line">	a[v].f3=a[u].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//	a[v].g3=u;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<hr />
<h5 id="qquad最后上代码懒得写注释了自己去上面找吧"><span
class="math inline">\(\qquad\!\!\)</span>最后，上代码（懒得写注释了，自己去上面找吧……）：</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">400010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,head[N],ans,cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> dpf1,dpg1,dpf2,f1,f2,f3,g1,g2;</span><br><span class="line"><span class="comment">//	int dpg2,g3;</span></span><br><span class="line">&#125;;</span><br><span class="line">node a[N];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">		ch=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs1</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&gt;a[u].dpf1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].dpf2=a[u].dpf1;</span><br><span class="line"><span class="comment">//			a[u].dpg2=a[u].dpg1;</span></span><br><span class="line">			a[u].dpf1=<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2);</span><br><span class="line">			a[u].dpg1=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&lt;=a[u].dpf1&amp;&amp;<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2)&gt;a[u].dpf2)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].dpf2=<span class="built_in">max</span>(a[v].dpf1,a[v].f1+a[v].f2);</span><br><span class="line"><span class="comment">//			a[u].dpg2=v;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&gt;a[u].f1)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[u].f2;</span><br><span class="line"><span class="comment">//			a[u].g3=a[u].g2;</span></span><br><span class="line">			a[u].f2=a[u].f1;</span><br><span class="line">			a[u].g2=a[u].g1;</span><br><span class="line">			a[u].f1=a[v].f1<span class="number">+1</span>;</span><br><span class="line">			a[u].g1=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&lt;=a[u].f1&amp;&amp;a[v].f1<span class="number">+1</span>&gt;a[u].f2)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[u].f2;</span><br><span class="line"><span class="comment">//			a[u].g3=a[u].g2;</span></span><br><span class="line">			a[u].f2=a[v].f1<span class="number">+1</span>;</span><br><span class="line">			a[u].g2=v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[v].f1<span class="number">+1</span>&lt;=a[u].f2&amp;&amp;a[v].f1<span class="number">+1</span>&gt;a[u].f3)</span><br><span class="line">		&#123;</span><br><span class="line">			a[u].f3=a[v].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//			a[u].g3=v;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs2</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//	for(re int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout&lt;&lt;&quot;u=&quot;&lt;&lt;u&lt;&lt;&quot; i=&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf2&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f1&lt;&lt;&quot; &quot;&lt;&lt;a[i].g1&lt;&lt;&quot; &quot;&lt;&lt;a[i].f2&lt;&lt;&quot; &quot;&lt;&lt;a[i].g2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f3&lt;&lt;&quot; &quot;&lt;&lt;a[i].g3&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(v==a[u].g1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f2+a[u].f3)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f2+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f2+a[u].f3);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f2+a[u].f3)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f2+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f2+a[u].f3);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[v].f1;</span><br><span class="line">				a[v].g2=a[v].g1;</span><br><span class="line">				a[v].f1=a[u].f2<span class="number">+1</span>;</span><br><span class="line">				a[v].g1=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f2<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[u].f2<span class="number">+1</span>;</span><br><span class="line">				a[v].g2=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f2<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f2<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[u].f2<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//				a[v].g3=u;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(v==a[u].g2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f3)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f3);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f3)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f3)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f3);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[v].f1;</span><br><span class="line">				a[v].g2=a[v].g1;</span><br><span class="line">				a[v].f1=a[u].f1<span class="number">+1</span>;</span><br><span class="line">				a[v].g1=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[u].f1<span class="number">+1</span>;</span><br><span class="line">				a[v].g2=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[u].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//				a[v].g3=u;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(v==a[u].dpg1)</span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f2)*a[v].dpf1,a[u].dpf2*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f2)*(a[v].f1+a[v].f2),a[u].dpf2*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf2,a[u].f1+a[u].f2);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				ans=<span class="built_in">max</span>(ans,<span class="built_in">max</span>(<span class="built_in">max</span>((a[u].f1+a[u].f2)*a[v].dpf1,a[u].dpf1*a[v].dpf1),<span class="built_in">max</span>((a[u].f1+a[u].f2)*(a[v].f1+a[v].f2),a[u].dpf1*(a[v].f1+a[v].f2))));</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&gt;a[v].dpf1)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=a[v].dpf1;</span><br><span class="line"><span class="comment">//					a[v].dpg2=a[v].dpg1;</span></span><br><span class="line">					a[v].dpf1=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2);</span><br><span class="line">					a[v].dpg1=u;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&lt;=a[v].dpf1&amp;&amp;<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2)&gt;a[v].dpf2)</span><br><span class="line">				&#123;</span><br><span class="line">					a[v].dpf2=<span class="built_in">max</span>(a[u].dpf1,a[u].f1+a[u].f2);</span><br><span class="line"><span class="comment">//					a[v].dpg2=u;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&gt;a[v].f1)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[v].f1;</span><br><span class="line">				a[v].g2=a[v].g1;</span><br><span class="line">				a[v].f1=a[u].f1<span class="number">+1</span>;</span><br><span class="line">				a[v].g1=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f1&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f2)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[v].f2;</span><br><span class="line"><span class="comment">//				a[v].g3=a[v].g2;</span></span><br><span class="line">				a[v].f2=a[u].f1<span class="number">+1</span>;</span><br><span class="line">				a[v].g2=u;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[u].f1<span class="number">+1</span>&lt;=a[v].f2&amp;&amp;a[u].f1<span class="number">+1</span>&gt;a[v].f3)</span><br><span class="line">			&#123;</span><br><span class="line">				a[v].f3=a[u].f1<span class="number">+1</span>;</span><br><span class="line"><span class="comment">//				a[v].g3=u;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs2</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">		<span class="built_in">mr</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//	for(re int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout&lt;&lt;&quot;i=&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg1&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpf2&lt;&lt;&quot; &quot;&lt;&lt;a[i].dpg2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f1&lt;&lt;&quot; &quot;&lt;&lt;a[i].g1&lt;&lt;&quot; &quot;&lt;&lt;a[i].f2&lt;&lt;&quot; &quot;&lt;&lt;a[i].g2&lt;&lt;&quot; &quot;&lt;&lt;a[i].f3&lt;&lt;&quot; &quot;&lt;&lt;a[i].g3&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="祝大家-ac-愉快_">祝大家 <span class="math inline">\(AC\)</span>
愉快^_^</h4>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 P1453 【城市环路】</title>
    <url>/%E9%A2%98%E8%A7%A3-P1453-%E3%80%90%E5%9F%8E%E5%B8%82%E7%8E%AF%E8%B7%AF%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/P1453">城市环路</a>。</p>
<p>关于题目：一道比较显然的 <strong>基环树</strong> 上的 dp 题。</p>
<p>应用算法：树形 dp <span class="math inline">\(+\)</span> 环形
dp。</p>
<span id="more"></span>
<hr />
<h4 id="写在前面">写在前面：</h4>
<p><span
class="math inline">\(\qquad\!\!\)</span>本来题解区有一篇和我的思路一样的题解，不过那篇题解写得并不对，并不能通过我为这道题添加的
hack
数据。由于我个人认为这个思路对于基环树的初学者思维难度较小，比较友好，所以就有了这篇题解。</p>
<p><span class="math inline">\(\qquad\!\!updata\ \
2020.10.6\)</span>：修改了之前挂错的链接；增加时空复杂度分析。</p>
<p><span class="math inline">\(\qquad\!\!updata\ \
2020.10.25\)</span>：修改了之前对于 环形 dp 的初始化的一个错误。感谢 @<a
href="https://www.luogu.com.cn/user/141179">pigstd</a> 指出。</p>
<h4 id="下面进入正文">下面进入正文：</h4>
<ul>
<li>一、分析题意：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!n\)</span> 个点 <span
class="math inline">\(n\)</span>
条边、全部联通且只有一个环，满足这些条件的图很显然是一棵<a
href="https://www.luogu.com.cn/blog/user52918/qian-tan-ji-huan-shu">基环树</a>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>每个点有点权且任意相邻的两个点不能同时选取，很显然我们需要进行类似于<a
href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a>的
dp。</p>
<ul>
<li><p>二、dp 过程：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>和其它题解不一样的，我的 dp
过程主要是利用基环树的一个性质将该问题分解为两个子问题逐一解决。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>由于一棵基环树可以看作一棵树加了一条非重边在图上形成了唯一一个环，那么我们可以将该环上的每个点看作一个<strong>根节点</strong>，在不考虑环上的点与之联通的情况下，每个根节点都联通出<strong>一棵树</strong>。也就是说，一棵基环树等价于<strong>很多棵树的根节点被连在了一个环上的一张图</strong>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>由此，我们便可以将这个问题分解为<strong>以环上的点为根节点的很棵多树的
树形 dp <span class="math inline">\(+\)</span> 这些环上的点的 环形
dp</strong>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>具体过程如下：</p>
<ul>
<li>1、找环：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>我利用的是拓扑排序
<span class="math inline">\(+\)</span> dfs 的方式进行找环。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>首先，对于所有节点拓扑排序一遍，而后入度为
<span class="math inline">\(2\)</span> 的点就是环上的点。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>其次，任意选择一个环上的点（我选择的就是编号最小的节点）进行
dfs。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>最后，每次 dfs 到一个
<strong>未被记录入环并且入度为 <span class="math inline">\(2\)</span>
的节点</strong>，将其记录入环并进行递归。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>可能有同学要问：为什么不能直接拓扑排序后每个点一次循环一遍入度为
<span class="math inline">\(2\)</span> 就记录入环而要区 dfs 呢？</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>那是因为我们之后需要进行 环形
dp，需要保证<strong>环上依次连续的点在图上也是依次连续的</strong>，所以不能只进行一个简简单单的循环而需要
dfs。</p>
<ul>
<li>2、树形 dp：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>即对于每棵树都进行一次<a
href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a>的 dp
过程：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>设 <span
class="math inline">\(f_{i,0}\)</span> 表示 <span
class="math inline">\(i\)</span> 点不选择，<span
class="math inline">\(i\)</span> 点子树的最大贡献；<span
class="math inline">\(f_{i,1}\)</span> 表示 <span
class="math inline">\(i\)</span> 点选择，<span
class="math inline">\(i\)</span> 点子树的最大贡献。对于每个点 <span
class="math inline">\(i\)</span>，<span
class="math inline">\(f_{i,0}\)</span> 的初始值为 <span
class="math inline">\(0\)</span>，<span
class="math inline">\(f_{i,1}\)</span>
的初始值即为题目中的每个点的人流量 <span
class="math inline">\(p_i\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>转移方程（<span
class="math inline">\(v\)</span> 点为 <span
class="math inline">\(u\)</span> 点的子节点）：</p>
<p><span class="math inline">\(\qquad\!\!f_{u,0}\gets
f_{u,0}+\max(f_{v,0},f_{v,1})\)</span></p>
<p><span class="math inline">\(\qquad\!\!f_{u,1}\gets
f_{u,1}+f_{v,0}\)</span></p>
<ul>
<li>3、环形 dp：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span><em>没有接触过 环形 dp
的同学可以左转先看一下这两道题：<a
href="https://www.luogu.com.cn/problem/P6064">P6064 [USACO05JAN]Naptime
G</a> 和 <a href="https://www.luogu.com.cn/problem/SP283">SP283 NAPTIME
- Naptime</a>。</em></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>由于此时每棵树内部节点的关系均已满足题目的限定，剩下的就是环上的各个节点之间的关系，那么我们只需要对每棵树的根节点进行一次
环形 dp 即可得出答案。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>设 <span
class="math inline">\(c_i\)</span> 为环上第 <span
class="math inline">\(i\)</span> 个点的编号，<span
class="math inline">\(tot\)</span> 为环上的节点总数。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>那么此时 <span
class="math inline">\(f_{c_i,0}\)</span> 代表以 <span
class="math inline">\(c_i\)</span> 为根的树不选 <span
class="math inline">\(c_i\)</span> 最大贡献； <span
class="math inline">\(f_{c_i,1}\)</span> 代表以 <span
class="math inline">\(c_i\)</span> 为根的树选 <span
class="math inline">\(c_i\)</span> 最大贡献。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>设 <span
class="math inline">\(g_{i,0}\)</span> 表示点 <span
class="math inline">\(c_i\)</span> 不选，前 <span
class="math inline">\(i\)</span> 个节点的最大贡献，设 <span
class="math inline">\(g_{i,1}\)</span> 表示点 <span
class="math inline">\(c_i\)</span> 选，前 <span
class="math inline">\(i\)</span> 个节点的最大贡献。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>转移方程：</p>
<p><span class="math inline">\(\qquad\!\!g_{i,0}\gets
\max(g_{i-1,0},g_{i-1,1})+f_{c_i,0}\)</span></p>
<p><span class="math inline">\(\qquad\!\!g_{i,1}\gets
g_{i-1,0}+f_{c_i,1}\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>由于是进行 环形
dp，为了枚举全面所有的情况，我们需要进行两次 dp 过程：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>①、规定 <span
class="math inline">\(c_1\)</span> 节点一定不选：</p>
<p><span class="math inline">\(\qquad\!\!\qquad\!\!\)</span>初始化 <span
class="math inline">\(g\)</span> 中的每一个元素为 <span
class="math inline">\(-inf\)</span>；<span
class="math inline">\(g_{1,0}=f_{c_1,0}\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\qquad\!\!\)</span>进行
dp，统计答案 <span
class="math inline">\(ans=\max(g_{tot,0},g_{tot,1})\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>②、规定 <span
class="math inline">\(c_1\)</span> 节点一定选：</p>
<p><span class="math inline">\(\qquad\!\!\qquad\!\!\)</span>初始化 <span
class="math inline">\(g\)</span> 中的每一个元素为 <span
class="math inline">\(-inf\)</span>；<span
class="math inline">\(g_{1,1}=f_{c_1,1}\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\qquad\!\!\)</span>进行
dp，统计答案 <span
class="math inline">\(ans=\max(ans,g_{tot,0})\)</span>。</p></li>
<li><p>三、复杂度分析：</p>
<ul>
<li><p>时间复杂度：无论是在找环还是在两次 dp
的过程中，每个点最多被经过一次，所以时间复杂度为 <span
class="math inline">\(O(n)\)</span>。</p></li>
<li><p>空间复杂度：由几个数组的定义可知，每个数组所用的空间均为 <span
class="math inline">\(O(n)\)</span> 的数量级，所以总空间复杂度为 <span
class="math inline">\(O(n)\)</span>。</p></li>
</ul></li>
<li><p>四、最后，上代码（码风不喜勿喷）：</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//P1453 城市环路</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> b[N];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> rd[N],c[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>],g[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">double</span> k;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"><span class="comment">//建边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs0</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"><span class="comment">//找环</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">        <span class="comment">//父节点或已在环上就不算</span></span><br><span class="line">		<span class="keyword">if</span>(v==fa||b[v])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//找到一个点就加入环</span></span><br><span class="line">		<span class="keyword">if</span>(rd[v]==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			b[v]=<span class="number">1</span>;</span><br><span class="line">			c[++tot]=v;</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            <span class="built_in">dfs0</span>(v,u);</span><br><span class="line">            <span class="comment">//加入一个点后就跳出循环</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">tppx</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//拓扑排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(rd[i]==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			q.<span class="built_in">push</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			rd[v]--;</span><br><span class="line">			<span class="keyword">if</span>(rd[v]==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//找到第一个在环上的点加入环并进行 dfs</span></span><br><span class="line">		<span class="keyword">if</span>(rd[i]==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			b[i]=<span class="number">1</span>;</span><br><span class="line">			c[++tot]=i;</span><br><span class="line">			<span class="built_in">dfs0</span>(i,<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//加入一个点后就跳出循环</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"><span class="comment">//树形 dp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa||b[v])</span><br><span class="line">        <span class="comment">//父节点或已在环上就不算</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="comment">//转移</span></span><br><span class="line">		f[u][<span class="number">0</span>]+=<span class="built_in">max</span>(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);</span><br><span class="line">		f[u][<span class="number">1</span>]+=f[v][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i][<span class="number">1</span>]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>()<span class="number">+1</span>;</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>()<span class="number">+1</span>;</span><br><span class="line">        <span class="comment">//统计入度</span></span><br><span class="line">		rd[u]++;</span><br><span class="line">		rd[v]++;</span><br><span class="line">        <span class="comment">//建边</span></span><br><span class="line">		<span class="built_in">mr</span>(u,v);</span><br><span class="line">		<span class="built_in">mr</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//拓扑排序</span></span><br><span class="line">	<span class="built_in">tppx</span>();</span><br><span class="line">    <span class="comment">//对于每棵树 树形 dp</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(c[i],<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//环形 dp</span></span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">	g[<span class="number">1</span>][<span class="number">0</span>]=f[c[<span class="number">1</span>]][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[i][<span class="number">1</span>]=g[i<span class="number">-1</span>][<span class="number">0</span>]+f[c[i]][<span class="number">1</span>];</span><br><span class="line">		g[i][<span class="number">0</span>]=<span class="built_in">max</span>(g[i<span class="number">-1</span>][<span class="number">0</span>],g[i<span class="number">-1</span>][<span class="number">1</span>])+f[c[i]][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(g[tot][<span class="number">0</span>],g[tot][<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">memset</span>(g,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(g));</span><br><span class="line">	g[<span class="number">1</span>][<span class="number">1</span>]=f[c[<span class="number">1</span>]][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[i][<span class="number">1</span>]=g[i<span class="number">-1</span>][<span class="number">0</span>]+f[c[i]][<span class="number">1</span>];</span><br><span class="line">		g[i][<span class="number">0</span>]=<span class="built_in">max</span>(g[i<span class="number">-1</span>][<span class="number">0</span>],g[i<span class="number">-1</span>][<span class="number">1</span>])+f[c[i]][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	ans=<span class="built_in">max</span>(ans,g[tot][<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//读入 k</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;k);</span><br><span class="line">    <span class="comment">//输出答案</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>,ans*k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>基环树</tag>
        <tag>环形 DP</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534154 【正三角形】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534154-%E3%80%90%E6%AD%A3%E4%B8%89%E8%A7%92%E5%BD%A2%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534154">正三角形</a>。</p>
<p>关于题目：作为 T1，巨水的签到题。</p>
<p>应用算法：<del>模拟？</del></p>
<span id="more"></span>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>作为签到题，这道题就是“查数”，只要查明白了每种正三角形的个数就好。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span><strong>首先</strong>，我们知道所有的正三角形分为正的和倒的，那么就请分类讨论。</p>
<ul>
<li>一、正的三角形：
<ul>
<li><p>1.一层的三角形：单独的面积为 <span class="math inline">\(1\times
1=1\)</span>，共有 $ {2} $ 个，则面积和为 <span
class="math inline">\(\dfrac {n(n+1)} {2} \times 1^2\)</span>。</p></li>
<li><p>2.两层的三角形：单独的面积为 <span class="math inline">\(2\times
2=4\)</span> ，共有 <span class="math inline">\(\dfrac {(n-1+1)(n-1)}
{2}\)</span> 个，则面积和为 <span class="math inline">\(\dfrac
{(n-1+1)(n-1)} {2} \times 2^2\)</span>。</p></li>
<li><p>3.总结来说，对于 <span class="math inline">\(i(1 \leqslant i
\leqslant n)\)</span> 层的三角形，单独的面积为 <span
class="math inline">\(i\times i=i^2\)</span>，共有 $ {2} $
个，则面积和为<span class="math inline">\(\dfrac {(n-i+2)(n-i+1)} {2}
\times i^2\)</span>。</p></li>
</ul></li>
<li>二、倒的三角形：
<ul>
<li><p>1.一层的三角形：单独的面积为 <span class="math inline">\(1\times
1=1\)</span>，共有 <span class="math inline">\(\dfrac{(n-1+1)(n-1)}
{2}\)</span> 个，则面积和为 <span
class="math inline">\(\dfrac{(n-1+1)(n-1)} {2} \times
1^2\)</span>。</p></li>
<li><p>2.两层的三角形：单独的面积为 <span class="math inline">\(2\times
2=4\)</span>，共有 <span class="math inline">\(\dfrac {(n-3+1)(n-3)}
{2}\)</span> 个，则面积和为<span class="math inline">\(\dfrac
{(n-3+1)(n-3)} {2} \times 2^2\)</span>。</p></li>
<li><p>3.总结来说，对于 <span class="math inline">\(j(1 \leqslant j
\leqslant \dfrac {n} {2})\)</span> 层的三角形，单独的面积为 <span
class="math inline">\(j\times j=j^2\)</span>，共有 <span
class="math inline">\(\dfrac {(n-2j+2)(n-2j+1)} {2}\)</span>
个，则面积和为 <span class="math inline">\(\dfrac {(n-2j+2)(n-2j+1)} {2}
\times j^2\)</span>。</p></li>
</ul></li>
<li>三、总面积：<span class="math inline">\(S=\sum\limits_{i=1}^n \dfrac
{(n-i+2)(n-i+1)} {2} \times
i^2+\sum\limits_{j=1}^{\left\lfloor\dfrac{n}{2}\right\rfloor}\dfrac
{(n-2j+2)(n-2j+1)} {2} \times j^2\)</span></li>
</ul>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \
\)</span><strong>其次</strong>，几个小细节需要注意一下：</p>
<ul>
<li>一、这道题的空间限制为
<strong>3.00MB</strong>，如果用普通的数组递推的话会
<strong>MLE</strong>（相信大家都不会在这里犯错，毕竟题面上有那么明显的提示……）。</li>
<li>二、这道题的模数为 <span class="math inline">\(10^8+9\)</span>
，并不是常用的 <span class="math inline">\(10^9+9\)</span>
，这点还是要注意一下的，本人自测以 <span
class="math inline">\(10^9+9\)</span> 作为模数的话只能得
<strong>20</strong> 分。</li>
</ul>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \
\)</span><strong>最后</strong>，上代码，相信大家都能看懂（码风不喜勿喷）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 100000009</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans;</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="comment">//读入</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    </span><br><span class="line">	&#123;        </span><br><span class="line">		ans+=((n-i<span class="number">+2</span>)*(n-i<span class="number">+1</span>))/<span class="number">2</span>*i*i;</span><br><span class="line">		<span class="comment">//正的正三角形</span></span><br><span class="line">		ans%=M; </span><br><span class="line">		<span class="keyword">if</span>(n&gt;=<span class="number">2</span>*i)        </span><br><span class="line">		&#123;            </span><br><span class="line">			ans+=((n<span class="number">-2</span>*i<span class="number">+2</span>)*(n<span class="number">-2</span>*i<span class="number">+1</span>))/<span class="number">2</span>*i*i;</span><br><span class="line">			<span class="comment">//倒的正三角形</span></span><br><span class="line">			ans%=M;</span><br><span class="line">		&#125;    </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4jNcQ.png" alt="U4jNcQ.png" />
<figcaption aria-hidden="true">U4jNcQ.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534155 【打磨珍珠】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534155-%E3%80%90%E6%89%93%E7%A3%A8%E7%8F%8D%E7%8F%A0%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534155">打磨珍珠</a>。</p>
<p>关于题目：作为 T2，很简单的算法题。</p>
<p>应用算法：离散化，差分，离线。</p>
<span id="more"></span>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>这道题虽然思维难度和算法难度都不大，但是细节却比较多，我们就从分析题面入手，循序渐进地来说。</p>
<ul>
<li>一、分析题面：
<ul>
<li><p>1、命令：就相当于对于一段区间的区间加 <span
class="math inline">\(1\)</span></p></li>
<li><p>2、条件：对于连续的 <span class="math inline">\(k\)</span>
个点，每个点的值相同且区间和 <span
class="math inline">\(\in(l,r)\)</span>。</p></li>
<li><p>3、输出：这样连续的 <span class="math inline">\(k\)</span>
个点的个数。</p></li>
<li><p>4、数据范围（这里就仅讲解 <span class="math inline">\(AC\)</span>
的做法，敬请谅解）：对于 <span class="math inline">\(100\%\)</span>
的数据，<span class="math inline">\(1\leqslant n \leqslant
10^6\)</span>，<span class="math inline">\(1\leqslant k \leqslant
1000\)</span>，<span class="math inline">\(0\leqslant l &lt; r \leqslant
10^6\)</span>，<strong>最远能移动到离原点 <span
class="math inline">\(1000000000\)</span> 的珍珠面前。</strong></p></li>
</ul></li>
</ul>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>由数据范围和空间限制可知，我们开不下 <span
class="math inline">\(1000000000\)</span>
的数组，对于这类空间上的“超限”，我们可以很自然地想到<a
href="https://oi-wiki.org/misc/discrete/">离散化</a>这种非常常用的算法，相信大佬们都会，具体思想就不在这里赘述了，不会的同学可以自行查找资料学习。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>由数据范围和时间限制可知，我们不可能运用 <span
class="math inline">\(O(n\times l)\)</span>
的算法，那么既然是区间加，且全部加完再进行统计，很自然地就能想到运用<a
href="https://oi-wiki.org/basic/prefix-sum/">差分</a>维护 <span
class="math inline">\(+\)</span>
离线统计的做法，相信大佬们都会，具体思想也不在这里赘述了，不会的同学可以自行查找资料学习。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>然后就没了，剩下的就是应用算法模拟题意。</p>
<ul>
<li><p>二、处理过程：既然已经很清晰地知道了需要用的算法和进行的操作，接下来就可以开始具体的处理了。</p>
<ul>
<li><p>1、读入……这个就不用我来说了吧。</p></li>
<li><p>2、一个小小的预处理：既然运用了差分，求区间和过于麻烦，根据 <span
class="math inline">\(k\)</span>
个点的值相同，我们直接判断每个点的值不就得了。<span
class="math inline">\(\\ \ \ \ \ \ \ \because sum \in(l,r)\\ \ \ \ \ \ \
\therefore a_i \in\left[
\left\lfloor\dfrac{l}{k}\right\rfloor+1,\left\lceil\dfrac{r}{k}\right\rceil-1
\right]\\\)</span> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  l=l/k<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">if</span>(r%k)</span><br><span class="line">&#123;</span><br><span class="line">		r=r/k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">		r=r/k<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>3、处理命令：</p>
<ul>
<li>（1）、我们设 <span class="math inline">\(o\)</span>
代表<strong>现在的坐标</strong>，<span class="math inline">\(v\)</span>
表示<strong>命令中的移动次数</strong>。<span
class="math inline">\(a_{i,1}\)</span> <strong>表示第 <span
class="math inline">\(i\)</span> 次命令的差分数组需要减 <span
class="math inline">\(1\)</span> 的坐标</strong>，<span
class="math inline">\(a_{i,2}\)</span> <strong>表示第 <span
class="math inline">\(i\)</span> 次命令的差分数组需要加 <span
class="math inline">\(1\)</span> 的坐标</strong>。<span
class="math inline">\(\\ \ \ \ \ \ \ \)</span>对于向右侧移动的命令：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   a[i][<span class="number">1</span>]=o<span class="number">+1</span>;</span><br><span class="line">a[i][<span class="number">2</span>]=o+v;</span><br></pre></td></tr></table></figure> <span class="math inline">\(\ \ \ \ \ \
\)</span>同理，对于向左侧移动的命令： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   a[i][<span class="number">2</span>]=o<span class="number">-1</span>;</span><br><span class="line">a[i][<span class="number">1</span>]=o-v;</span><br></pre></td></tr></table></figure></li>
<li>（2）、我们设 <span class="math inline">\(b\)</span>
数组为<strong>离散化所排序去重统计的数组</strong>，所以需要把每个 <span
class="math inline">\(a_{i,1}\)</span> 和 <span
class="math inline">\(a_{i,2}\)</span> 放入 <span
class="math inline">\(b\)</span> 数组。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">   b[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">b[(i&lt;&lt;<span class="number">1</span>)]=a[i][<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>4、离散化：先排序，再去重，设 <span
class="math inline">\(p1\)</span> 表示 <strong><span
class="math inline">\(a_{i,1}\)</span> 离散化后的编号</strong>，<span
class="math inline">\(p2\)</span> 表示 <strong><span
class="math inline">\(a_{i,2}\)</span> 离散化后的编号</strong>，设 <span
class="math inline">\(c\)</span> 数组表示 <strong><span
class="math inline">\(p1-&gt;a_{i,1}\)</span> 或 <span
class="math inline">\(p2-&gt;a_{i,2}\)</span>的反向映射</strong>，并把
<span class="math inline">\(a_{i,1}\)</span> <strong>用 <span
class="math inline">\(p1\)</span> 赋值</strong>，<span
class="math inline">\(a_{i,2}\)</span> <strong>用 <span
class="math inline">\(p2\)</span> 赋值</strong>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">sort</span>(b<span class="number">+1</span>,b+((n&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">cnt=<span class="built_in">unique</span>(b<span class="number">+1</span>,b+((n&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>))-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">		<span class="type">int</span> p1=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b+cnt<span class="number">+1</span>,a[i][<span class="number">1</span>])-b;</span><br><span class="line">		<span class="type">int</span> p2=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b+cnt<span class="number">+1</span>,a[i][<span class="number">2</span>])-b;</span><br><span class="line">		c[p1]=a[i][<span class="number">1</span>];</span><br><span class="line">		c[p2]=a[i][<span class="number">2</span>];</span><br><span class="line">		a[i][<span class="number">1</span>]=p1;</span><br><span class="line">		a[i][<span class="number">2</span>]=p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>5、差分：设 <span class="math inline">\(d\)</span>
数组为<strong>差分数组</strong>，利用一下Manacher算法在每两个字符中间插入一个
#
的思想，我们也把任意两个差分的点之间的区间留出来，这样，把差分的编号扩大二倍就好了。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">		d[(a[i][<span class="number">1</span>]&lt;&lt;<span class="number">1</span>)]+=<span class="number">1</span>;</span><br><span class="line">		d[(a[i][<span class="number">2</span>]&lt;&lt;<span class="number">1</span>)<span class="number">+1</span>]-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>6、还原：设 <span class="math inline">\(e\)</span>
数组为<strong>差分还原后的数组</strong>，直接加回来就好。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(cnt&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">&#123;</span><br><span class="line">		e[i]=e[i<span class="number">-1</span>]+d[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>7、现在，<span class="math inline">\(e\)</span> 数组里有 <span
class="math inline">\(2n-1\)</span> 个数，分别表示 <span
class="math inline">\(n\)</span> 个点的打磨次数和 <span
class="math inline">\(n-1\)</span>
个点之间的区间的打磨次数，但是由于开始或结束打磨的点可能相邻，就导致了
<span class="math inline">\(e\)</span> 数组里存在某些区间的实际长度为
<span class="math inline">\(0\)</span>
的区间，这些区间没有意义，不能参与统计答案。所以，我们就需要去除这些区间并将点和区间分别统计，用以统计答案。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>我们设 <span
class="math inline">\(f_{0,i}\)</span> 表示<strong>第 <span
class="math inline">\(i\)</span>
个能参与统计答案的元素为点，这个点的打磨次数</strong>，<span
class="math inline">\(f_{1,i}\)</span> 表示<strong>第 <span
class="math inline">\(i\)</span>
个能参与统计答案的元素为区间，这个点的打磨次数</strong>。设 <span
class="math inline">\(g_i\)</span>表示<strong>第 <span
class="math inline">\(i\)</span>
个能参与统计答案的元素为点，这个点对于原始的的坐标的映射</strong>。设
<span class="math inline">\(o\)</span>
表示<strong>现在加入的是第几个能参与统计答案的元素</strong>。设 <span
class="math inline">\(i\)</span> 是<strong>对 <span
class="math inline">\(e\)</span> 数组偶数项的遍历</strong>。</p>
<ul>
<li>如果相邻，去掉中间区间： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">     f[<span class="number">0</span>][++o]=e[i<span class="number">+2</span>];</span><br><span class="line">g[o]=c[((i<span class="number">+1</span>)&gt;&gt;<span class="number">1</span>)<span class="number">+1</span>];</span><br></pre></td></tr></table></figure></li>
<li>如果不相邻，保留中间区间： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">     f[<span class="number">1</span>][++o]=e[i<span class="number">+1</span>];</span><br><span class="line">f[<span class="number">0</span>][++o]=e[i<span class="number">+2</span>];</span><br><span class="line">g[o]=c[((i<span class="number">+1</span>)&gt;&gt;<span class="number">1</span>)<span class="number">+1</span>];</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>8、统计答案：设 <span class="math inline">\(s\)</span>
为<strong>当前符合条件的珍珠串的长度</strong>。先判断第 <span
class="math inline">\(i\)</span>
个参与统计答案的元素的打磨次数符合条件,由于 <span
class="math inline">\(f_{0,i}\)</span> 和 <span
class="math inline">\(f_{1,i}\)</span>
中有一个为零，把二者加到一起判断就好：</p>
<ul>
<li>如果为点：
<ul>
<li>（1）和前一个元素不同且和后一个元素相同：<strong>重新开启一个新的序列，存在
<span class="math inline">\(1\)</span> 个符合标准的珍珠</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>（2）和前一个元素相同且和后一个元素相同：<strong>继续当前的序列，加入
<span class="math inline">\(1\)</span> 个符合标准的珍珠</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s+=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>（3）和前一个元素相同且和后一个元素不同：<strong>继续当前的序列，加入
<span class="math inline">\(1\)</span>
个符合标准的珍珠并统计答案</strong>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">	ans+=s-k<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>（4）和前一个元素不同且和后一个元素不同：<strong>重新开启一个新的序列，存在
<span class="math inline">\(1\)</span>
个符合标准的珍珠并统计答案</strong>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">     s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">		ans+=s-k<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li>如果为区间：
<ul>
<li>（1）和前一个点不同且和后一个点相同：<strong>重新开启一个新的序列，存在区间长度个符合标准的珍珠</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br></pre></td></tr></table></figure></li>
<li>（2）和前一个点相同且和后一个点相同：<strong>继续当前的序列，加入区间长度个符合标准的珍珠</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s+=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br></pre></td></tr></table></figure></li>
<li>（3）和前一个点相同且和后一个点不同：<strong>继续当前的序列，加入区间长度个符合标准的珍珠并统计答案</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s+=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">	ans+=s-k<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>（4）和前一个点不同且和后一个点不同：<strong>重新开启一个新的序列，存在区间长度个符合标准的珍珠并统计答案</strong>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">     s=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">ans+=s-k<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
<li><p>9、输出……这个也就不用我来说了吧。</p></li>
</ul></li>
<li><p>三、代码：在处理过程中已经给出了最核心的部分代码，但是还是有一些小的细节没有给出，详见注释吧（码风不喜勿喷）：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 2000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,l,r,o,a[N][<span class="number">3</span>],b[M],cnt,c[M],d[(M&lt;&lt;<span class="number">1</span>)],e[(M&lt;&lt;<span class="number">1</span>)],ans,f[<span class="number">2</span>][(M&lt;&lt;<span class="number">1</span>)],g[(M&lt;&lt;<span class="number">1</span>)],s;</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    	<span class="type">int</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    	    <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">    	    c=<span class="built_in">getchar</span>();</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    	    x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">    	    c=<span class="built_in">getchar</span>();</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">			x=-x;</span><br><span class="line">			<span class="built_in">qwrite</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		n=<span class="built_in">qread</span>();</span><br><span class="line">		k=<span class="built_in">qread</span>();</span><br><span class="line">		l=<span class="built_in">qread</span>();</span><br><span class="line">		r=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="comment">//读入</span></span><br><span class="line">		l=l/k<span class="number">+1</span>;</span><br><span class="line">		<span class="keyword">if</span>(r%k)</span><br><span class="line">		&#123;</span><br><span class="line">			r=r/k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			r=r/k<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//一个小小的预处理</span></span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">char</span> c;</span><br><span class="line">			cin&gt;&gt;c; </span><br><span class="line">			<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				a[i][<span class="number">1</span>]=o<span class="number">+1</span>;</span><br><span class="line">				a[i][<span class="number">2</span>]=o+v;</span><br><span class="line">				b[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">				b[(i&lt;&lt;<span class="number">1</span>)]=a[i][<span class="number">2</span>];</span><br><span class="line">				o=o+v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				a[i][<span class="number">2</span>]=o<span class="number">-1</span>;</span><br><span class="line">				a[i][<span class="number">1</span>]=o-v;</span><br><span class="line">				b[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">				b[(i&lt;&lt;<span class="number">1</span>)]=a[i][<span class="number">2</span>];</span><br><span class="line">				o=o-v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//处理命令</span></span><br><span class="line">		o=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//一个小细节，由于后面还要用到o，所以在这里需要先赋一个值以确保后续使用的正确性</span></span><br><span class="line">		<span class="built_in">sort</span>(b<span class="number">+1</span>,b+((n&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>));</span><br><span class="line">		cnt=<span class="built_in">unique</span>(b<span class="number">+1</span>,b+((n&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>))-b<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> p1=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b+cnt<span class="number">+1</span>,a[i][<span class="number">1</span>])-b;</span><br><span class="line">			<span class="type">int</span> p2=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b+cnt<span class="number">+1</span>,a[i][<span class="number">2</span>])-b;</span><br><span class="line">			c[p1]=a[i][<span class="number">1</span>];</span><br><span class="line">			c[p2]=a[i][<span class="number">2</span>];</span><br><span class="line">			a[i][<span class="number">1</span>]=p1;</span><br><span class="line">			a[i][<span class="number">2</span>]=p2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//离散化</span></span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			d[(a[i][<span class="number">1</span>]&lt;&lt;<span class="number">1</span>)]+=<span class="number">1</span>;</span><br><span class="line">			d[(a[i][<span class="number">2</span>]&lt;&lt;<span class="number">1</span>)<span class="number">+1</span>]-=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//差分</span></span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=(cnt&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">		&#123;</span><br><span class="line">			e[i]=e[i<span class="number">-1</span>]+d[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//还原</span></span><br><span class="line">		f[<span class="number">0</span>][<span class="number">1</span>]=e[<span class="number">2</span>];</span><br><span class="line">		g[<span class="number">1</span>]=c[<span class="number">1</span>];</span><br><span class="line">		<span class="comment">//一个小细节，对于f[0][1]和g[1]的初始化。e[2]肯定是第一个点，所以e[2]赋给f[0][1]，c[1]赋给g[1]</span></span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;(cnt&lt;&lt;<span class="number">1</span>);i+=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(c[(i&gt;&gt;<span class="number">1</span>)<span class="number">+1</span>]-c[i&gt;&gt;<span class="number">1</span>]==<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				f[<span class="number">0</span>][++o]=e[i<span class="number">+2</span>];</span><br><span class="line">				g[o]=c[((i<span class="number">+1</span>)&gt;&gt;<span class="number">1</span>)<span class="number">+1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				f[<span class="number">1</span>][++o]=e[i<span class="number">+1</span>];</span><br><span class="line">				f[<span class="number">0</span>][++o]=e[i<span class="number">+2</span>];</span><br><span class="line">				g[o]=c[((i<span class="number">+1</span>)&gt;&gt;<span class="number">1</span>)<span class="number">+1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//处理一下区间</span></span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=o;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(l&lt;=(f[<span class="number">0</span>][i]|f[<span class="number">1</span>][i])&amp;&amp;(f[<span class="number">0</span>][i]|f[<span class="number">1</span>][i])&lt;=r)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(f[<span class="number">0</span>][i])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">0</span>][i]^(f[<span class="number">0</span>][i<span class="number">-1</span>]|f[<span class="number">1</span>][i<span class="number">-1</span>])&amp;&amp;f[<span class="number">0</span>][i]==(f[<span class="number">0</span>][i<span class="number">+1</span>]|f[<span class="number">1</span>][i<span class="number">+1</span>]))</span><br><span class="line">					&#123;</span><br><span class="line">						s=<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">0</span>][i]==(f[<span class="number">0</span>][i<span class="number">-1</span>]|f[<span class="number">1</span>][i<span class="number">-1</span>])&amp;&amp;f[<span class="number">0</span>][i]==(f[<span class="number">0</span>][i<span class="number">+1</span>]|f[<span class="number">1</span>][i<span class="number">+1</span>]))</span><br><span class="line">					&#123;</span><br><span class="line">						s+=<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">0</span>][i]==(f[<span class="number">0</span>][i<span class="number">-1</span>]|f[<span class="number">1</span>][i<span class="number">-1</span>])&amp;&amp;f[<span class="number">0</span>][i]^(f[<span class="number">0</span>][i<span class="number">+1</span>]|f[<span class="number">1</span>][i<span class="number">+1</span>]))</span><br><span class="line">					&#123;</span><br><span class="line">						s+=<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">						&#123;</span><br><span class="line">							ans+=s-k<span class="number">+1</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">0</span>][i]^(f[<span class="number">0</span>][i<span class="number">-1</span>]|f[<span class="number">1</span>][i<span class="number">-1</span>])&amp;&amp;f[<span class="number">0</span>][i]^(f[<span class="number">0</span>][i<span class="number">+1</span>]|f[<span class="number">1</span>][i<span class="number">+1</span>]))</span><br><span class="line">					&#123;</span><br><span class="line">						s=<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">						&#123;</span><br><span class="line">							ans+=s-k<span class="number">+1</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">1</span>][i]^f[<span class="number">0</span>][i<span class="number">-1</span>]&amp;&amp;f[<span class="number">1</span>][i]==f[<span class="number">0</span>][i<span class="number">+1</span>])</span><br><span class="line">					&#123;</span><br><span class="line">						s=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">1</span>][i]==f[<span class="number">0</span>][i<span class="number">-1</span>]&amp;&amp;f[<span class="number">1</span>][i]==f[<span class="number">0</span>][i<span class="number">+1</span>])</span><br><span class="line">					&#123;</span><br><span class="line">						s+=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">1</span>][i]==f[<span class="number">0</span>][i<span class="number">-1</span>]&amp;&amp;f[<span class="number">1</span>][i]^f[<span class="number">0</span>][i<span class="number">+1</span>])</span><br><span class="line">					&#123;</span><br><span class="line">						s+=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">						<span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">						&#123;</span><br><span class="line">							ans+=s-k<span class="number">+1</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(f[<span class="number">1</span>][i]^f[<span class="number">0</span>][i<span class="number">-1</span>]&amp;&amp;f[<span class="number">1</span>][i]^f[<span class="number">0</span>][i<span class="number">+1</span>])</span><br><span class="line">					&#123;</span><br><span class="line">						s=g[i<span class="number">+1</span>]-g[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">						<span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">						&#123;</span><br><span class="line">							ans+=s-k<span class="number">+1</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//统计答案</span></span><br><span class="line">		<span class="built_in">qwrite</span>(ans);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="comment">//输出答案</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://s1.ax1x.com/2020/07/20/U4j2jJ.png"
alt="U4j2jJ.png" /></p></li>
</ul>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4j79O.png" alt="U4j79O.png" />
<figcaption aria-hidden="true">U4j79O.png</figcaption>
</figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4jXDA.png" alt="U4jXDA.png" />
<figcaption aria-hidden="true">U4jXDA.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>模拟</tag>
        <tag>离散化</tag>
        <tag>枚举</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534156 【赛艇表演】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534156-%E3%80%90%E8%B5%9B%E8%89%87%E8%A1%A8%E6%BC%94%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534156">赛艇表演</a>。</p>
<p>关于题目：作为 T3，小小的思维题。</p>
<p>应用算法：图论，割点，图的建立，最短路。</p>
<span id="more"></span>
<hr />
<p><span
class="math inline">\(\qquad\!\!\)</span>这道题的题意还是很明确的，我们直接开始。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>首先</strong>，第一问是一个裸的模板：<a
href="https://www.luogu.com.cn/problem/P3388">P3388
【模板】割点（割顶）</a>，它存在的价值也只是为了第二问服务，在这里就不进行讲解了。<em>（如果有不会该模板的请自行学习。）</em></p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>其次</strong>，我们来看第二问。显然，第二问求一个
<strong>边权+点权</strong>
的最小花费，暴力做肯定超时，我们考虑把权都建在一张固定的图上跑最短路：</p>
<ul>
<li>一、先不考虑拓荒出的道路：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>由于从每个枢纽点出发去看表演都有一定的花费，我们不妨假设存在一个
<strong>零号城市</strong>，表演只在其中举行，而由每个枢纽点 <span
class="math inline">\(u\)</span>
均向<strong>零号城市</strong>连接一条边权为 <span
class="math inline">\(c_u\)</span> 的边，即可方便地将
<strong>点权转化为边权</strong>。此时，只要以 <span
class="math inline">\(s\)</span> 为起点跑单源最短路，<span
class="math inline">\(dis_0\)</span> 即为答案。</p>
<ul>
<li>二、考虑拓荒出的道路：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>由于拓荒出的道路是不固定两个端点的，我们没有办法一边跑最短路一边判断什么时候拓荒，所以只能想办法将其固定下来。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>怎么固定呢？一个很自然的想法就是把所有可能的情况都连上吧，即对于一对非起点也非枢纽点的点对
<span class="math inline">\(u,v\)</span> 均连接上边权为 <span
class="math inline">\(val\)</span>
的双向边。不过这样不仅很容易超出空间限制，而且由于
<strong>拓荒能力只能使用一次</strong>
而在此时跑最短路可能走过多条新边而不正确。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>回想一下解决
<strong>不考虑拓荒出的道路</strong>
的方法，我们此时可不可以通过多建立一个虚拟节点来实现呢？有了这个思路之后就很简单了，我们建立一个虚拟节点
<span class="math inline">\(n+1\)</span>
号城市，将每个非起点也非枢纽点的点对它连接一条边权为 <span
class="math inline">\(0\)</span>
的单向边，再从它向每个非起点也非枢纽点的点连接一条边权为 <span
class="math inline">\(val\)</span>
的单向边。这样，不仅连边的数量很少不会超过空间限制，并且由于所有边权为
<span class="math inline">\(val\)</span> 的边都存在一个公共的节点 <span
class="math inline">\(n+1\)</span>，所以这些边中只能走一条边，也就保证了<strong>拓荒能力只能使用一次</strong>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>没错，就是这样。一个模板+两个虚拟节点+一些新建边+一个单源最短路。这道题就这样完美地解决了！</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>最后</strong>，上代码。（码风不喜勿喷）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">6000010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,s,val; </span><br><span class="line"><span class="type">int</span> cnt,head[N],c[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,val;</span><br><span class="line">&#125;;</span><br><span class="line">edge e[M];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],tim;</span><br><span class="line"><span class="type">int</span> f[N],tot,g[N];</span><br><span class="line"><span class="type">int</span> dis[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> pos,dis;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> dis&gt;x.dis;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="built_in">qwrite</span>(-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v,re <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"><span class="comment">//建边 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to=v;</span><br><span class="line">    e[cnt].nxt=head[u];</span><br><span class="line">    e[cnt].val=w;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">tarjan</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"><span class="comment">//tarjan 求割点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	low[u]=dfn[u]=++tim;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			sum++;</span><br><span class="line">			<span class="built_in">tarjan</span>(v,u);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">			<span class="keyword">if</span>(fa&amp;&amp;low[v]&gt;=dfn[u]&amp;&amp;!f[u])</span><br><span class="line">			&#123;</span><br><span class="line">				f[u]=<span class="number">1</span>;</span><br><span class="line">				g[++tot]=u;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!fa&amp;&amp;sum&gt;<span class="number">1</span>&amp;&amp;!f[u])</span><br><span class="line">	&#123;</span><br><span class="line">		f[u]=<span class="number">1</span>;</span><br><span class="line">		g[++tot]=u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//dij 求最短路 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">top</span>().pos;</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span>(vis[u])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(!vis[v]&amp;&amp;dis[u]+e[i].val&lt;dis[v])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+e[i].val;</span><br><span class="line">				b[v]=u;</span><br><span class="line">				q.<span class="built_in">push</span>(&#123;v,dis[v]&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	m=<span class="built_in">qread</span>();</span><br><span class="line">	s=<span class="built_in">qread</span>();</span><br><span class="line">	val=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> v=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="type">int</span> w=<span class="built_in">qread</span>();</span><br><span class="line">		<span class="built_in">mr</span>(u,v,w);</span><br><span class="line">		<span class="built_in">mr</span>(v,u,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i]=<span class="built_in">qread</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//读入 </span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!dfn[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">tarjan</span>(i,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//求割点 </span></span><br><span class="line">	<span class="built_in">sort</span>(g<span class="number">+1</span>,g+tot<span class="number">+1</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">mr</span>(g[i],<span class="number">0</span>,c[g[i]]);</span><br><span class="line">		<span class="comment">//对于 0 号节点连边 </span></span><br><span class="line">		<span class="built_in">qwrite</span>(g[i]);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="comment">//输出一下 </span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!f[i]&amp;&amp;i^s)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">mr</span>(n<span class="number">+1</span>,i,val);</span><br><span class="line">			<span class="built_in">mr</span>(i,n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//对于 n+1 号节点连边 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dij</span>();</span><br><span class="line">	<span class="comment">//最短路 </span></span><br><span class="line">	<span class="built_in">qwrite</span>(dis[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="comment">//再输出一下 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>图论</tag>
        <tag>图论建模</tag>
        <tag>最短路</tag>
        <tag>Tarjan</tag>
        <tag>双连通分量</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534157 【矩阵革命】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534157-%E3%80%90%E7%9F%A9%E9%98%B5%E9%9D%A9%E5%91%BD%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534157">矩阵革命</a>。</p>
<p>关于题目：作为 T4，稍难的计数题。</p>
<p>应用算法：图论，容斥，组合数学，逆元，dp计数。</p>
<span id="more"></span>
<hr />
<p><em><span
class="math inline">\(\qquad\!\!\)</span>首先说一句，这道题的 <span
class="math inline">\(idea\)</span>
并不来自《黑客帝国》，只是一个题目背景。出题人的思路来自在做 <a
href="https://www.luogu.com.cn/problem/P4306">P4306 [JSOI2010]连通数</a>
这道题输出 <span class="math inline">\(n^2\)</span> 得 <span
class="math inline">\(90\)</span>
分之后的思考：为什么概率这么大？对于一定的 <span
class="math inline">\(n\)</span> 的连通数为 <span
class="math inline">\(n^2\)</span> 的概率可不可以计算呢？</em></p>
<hr />
<p><em>下面进入正题：</em></p>
<ul>
<li>一、分析题意：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>这个题目描述稍显复杂，我们先来分析一下：</p>
<ol type="1">
<li>题目中所述的矩阵即为邻接矩阵，矩阵中的每个元素为 <span
class="math inline">\(0\)</span> 和为 <span
class="math inline">\(1\)</span> 的概率相同。</li>
<li>这 <span class="math inline">\(n\)</span>
个人中任意两人彼此之间都有从对方到自己和从自己到对方的意识连接，代表所有人在一个强连通分量中。</li>
<li>题目所求的概率即为：<strong>对于 <span
class="math inline">\(n\)</span>
个点的有向图（没有重边，但是可能有自环），其所有点均在同一个强连通分量中的概率。</strong></li>
</ol>
<hr />
<ul>
<li>二、计算过程：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>首先，由于矩阵中每个元素为
<span class="math inline">\(0\)</span> 和为 <span
class="math inline">\(1\)</span>
的概率相同，这个概率即可化为<strong>对于 <span
class="math inline">\(n\)</span>
个点的有向图（没有重边，但是可能有自环）为一个强连通图的方案数</strong>与所有<strong><span
class="math inline">\(n\)</span>
个点的有向图（没有重边，但是可能有自环）</strong>的方案之比。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>其次，我们先统计一下后者：由于这个邻接矩阵共有
<span class="math inline">\(n^2\)</span> 个元素，每个元素只有两种情况
<span class="math inline">\(0/1\)</span>，我们可以设<span
class="math inline">\(s_n\)</span> 表示有 <span
class="math inline">\(n\)</span> 个点的有向图的总数，即 <span
class="math inline">\(s_n=2^{n^2}\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>再次，我们先统计一下前者：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>为了得到答案，我们设
<span class="math inline">\(f_n\)</span> 表示有 <span
class="math inline">\(n\)</span>
个点的有向图为一个强连通图的总方案数。（<span
class="math inline">\(f_0=0\)</span>）</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>这东西不会直接求，那么我们考虑一下容斥吧：
<span class="math inline">\(f_n=s_n-\)</span>
没有组成一个强连通图的方案数。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>没有组成一个强连通图的方案数又要怎么求呢？我们先把其它所有的方案数都列举出来吧：设
<span class="math inline">\(g_{n,m}\)</span> 表示 <span
class="math inline">\(n\)</span> 个点的有向图构成 <span
class="math inline">\(m\)</span> 个强连通分量的方案数。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>我们尝试对 <span
class="math inline">\(f_n\)</span>
进行一次计数，需要枚举没有组成一个强连通图的方案数：枚举其中 <span
class="math inline">\(k\)</span> 个点组成新的出度为 <span
class="math inline">\(0\)</span> 的强连通分量的方案，那么 <span
class="math inline">\(k\in[0,n]\)</span>；对于每次选取 <span
class="math inline">\(k\)</span> 个点的方案，我们可以利用组合数得出为
<span class="math inline">\(\dbinom{n}{k}\)</span>；对于这 <span
class="math inline">\(k\)</span> 个点和剩余的 <span
class="math inline">\(n-k\)</span> 个点之间连边，情况共有 <span
class="math inline">\(2^{n\times(n-k)}\)</span>
种方案；对于我们不进行枚举的 <span class="math inline">\(n-k\)</span>
个点，直接统计所有情况 <span
class="math inline">\(s_{n-k}\)</span>；对于我们枚举的 <span
class="math inline">\(k\)</span> 个点，利用 <span
class="math inline">\(g\)</span> 去计算方案，不过这里由 <span
class="math inline">\(g_{k,m}\)</span> 的定义和我们要枚举的是 <span
class="math inline">\(k\)</span> 个点组成新的出度为 <span
class="math inline">\(0\)</span>
的强连通分量的方案可知，在进行枚举的时候，并不是对 <span
class="math inline">\(g_{k,m}\)</span>
进行简单的加和，而是需要奇加偶减地容斥一下再计算的 <span
class="math inline">\(\sum\limits_{m=1}^k (-1)^{m-1}
g_{k,m}\)</span>（<em>出题人在推这个的时候卡了好久才想明白竟然要容斥，还特意复习了一下容斥的内容/wul</em>）。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>综上，我们可以得到一个式子：</p>
<p><span class="math inline">\(f_n=s_n-\sum\limits_{k=0}^n
\dbinom{n}{k}\times 2^{k(n-k)}\times s_{n-k}\times
\sum\limits_{m=1}^k(-1)^{m-1} g_{k,m}\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>但是这个式子是错的……无论怎么算
<span class="math inline">\(f_n\)</span> 都得 <span
class="math inline">\(0\)</span>。我们考虑一下错在了哪里，发现在枚举的过程中并没有排除前
<span class="math inline">\(k\)</span> 个点和后 <span
class="math inline">\(n-k\)</span>
个点之间合成了一个强连通分量的方案，我们需要再加上 <span
class="math inline">\(f_n\)</span> 才能使等式成立：</p>
<p><span class="math inline">\(f_n=s_n-\sum\limits_{k=0}^n
\dbinom{n}{k}\times 2^{k(n-k)}\times s_{n-k}\times
\sum\limits_{m=1}^k(-1)^{m-1} g_{k,m}+f_n\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>但是这样的式子直接就把
<span class="math inline">\(f_n\)</span>
消掉了，我们没法得出它的值呀。但是我们还是化简一下，至少能得到一个和
<span class="math inline">\(g\)</span> 有关的式子：</p>
<p><span class="math inline">\(\sum\limits_{k=0}^n \dbinom{n}{k}\times
2^{k(n-k)}\times s_{n-k}\times \sum\limits_{m=1}^k(-1)^{m-1}
g_{k,m}=s_n\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>发现在这个式子以及上面的式子中，和
<span class="math inline">\(g\)</span>
有关的部分前面的系数只是统一的容斥系数，那么我们可以再设一个 <span
class="math inline">\(h_n=\sum\limits_{m=1}^n (-1)^{m-1}g_{n,m}\)</span>
以便计算：</p>
<p><span class="math inline">\(\because\ \ h_0=0\\ \therefore
\sum\limits_{k=1}^n \dbinom{n}{k}\times 2^{k(n-k)}\times s_{n-k}\times
h_k=s_n\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>观察这个式子发现，<span
class="math inline">\(h_n\)</span> 似乎能有一个递推式，我们把当 <span
class="math inline">\(k=n\)</span> 的情况提出来，计算一下它的系数为
<span class="math inline">\(\sum\limits_{k=1}^n \dbinom{n}{k}\times
2^{k(n-k)}\times s_{n-k}=1\)</span>。好巧欸，那么，化简一下原式：</p>
<p><span class="math inline">\(s_n-\sum\limits_{k=1}^{n-1} \dbinom{n}{k}
\times2^{k(n-k)}\times s_{n-k}\times h_k=h_n\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>这样，我们就通过尝试对
<span class="math inline">\(f_n\)</span> 进行计数得到了 <span
class="math inline">\(h_n\)</span> 的递推式：</p>
<p><span class="math inline">\(h_n=s_n-\sum\limits_{k=1}^{n-1}
\dbinom{n}{k} \times2^{k(n-k)}\times s_{n-k}\times h_k\)</span></p>
<p><span class="math inline">\(\qquad\!\!\)</span>既然得到了 <span
class="math inline">\(h_n\)</span> 的递推式，我们想要得到有关 <span
class="math inline">\(f_n\)</span> 的式子就可以从 <span
class="math inline">\(h_n\)</span> 和 <span
class="math inline">\(f_n\)</span> 的关系上下手：我们再枚举 <span
class="math inline">\(k\)</span> 个点并且保证这 <span
class="math inline">\(k\)</span> 个点构成一个强连通分量，其余的 <span
class="math inline">\(n-k\)</span> 个点即为 <span
class="math inline">\(h_{n-k}\)</span>。这次倒是很顺利地得到了式子：</p>
<p><span
class="math inline">\(h_n=f_n-\sum\limits_{k=1}^n\dbinom{n-1}{k-1}\times
f_k\times h_{n-k}\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>可能有人会问，为什么中间是减号呢？那是因为我们枚举的
<span class="math inline">\(k\)</span> 个点构成了一个强连通分量，由于
<span class="math inline">\(h_n\)</span> 是由 <span
class="math inline">\(g_{n,m}\)</span>
容斥而来，在枚举的过程中突然多加了一个强连通分量，其容斥系数自然要变化，这个变化为容斥系数为
<span class="math inline">\(-1\)</span>
的偶数次幂则变为奇数次幂，反之则变为偶数次幂，就相当于乘了一个 <span
class="math inline">\(-1\)</span>，我们把想法上的 <span
class="math inline">\(+\)</span> 变为 <span
class="math inline">\(-\)</span> 即可。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>因为 <span
class="math inline">\(h_0=0\)</span>，我们还可以把这个式子再化简一下：</p>
<p><span
class="math inline">\(h_n=f_n-\sum\limits_{k=1}^{n-1}\dbinom{n-1}{k-1}\times
f_k \times h_{n-k}\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>终于看到了胜利的曙光，我们移项一下即可得到
<span class="math inline">\(f_n\)</span> 的递推式：</p>
<p><span
class="math inline">\(f_n=h_n+\sum\limits_{k=1}^{n-1}\dbinom{n-1}{k-1}\times
f_k \times h_{n-k}\)</span></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>最后，我们利用上述统计一下答案：<span
class="math inline">\(ans=\dfrac{f_n}{s_n} \bmod p\)</span></p>
<hr />
<ul>
<li>三、代码（码风不喜勿喷）：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">19999999</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2410</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> fact[N],finv[N];</span><br><span class="line"><span class="comment">//取模意义下的阶乘和阶乘逆元，用来计算组合数。</span></span><br><span class="line"><span class="type">int</span> f[N],h[N];</span><br><span class="line"><span class="comment">//上述的 f 和 h。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qpow</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			res=(res*x)%M;</span><br><span class="line">		&#125;</span><br><span class="line">		x=(x*x)%M;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">s</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//计算s(x)。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">qpow</span>(<span class="number">2</span>,x*x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">C</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="comment">//计算组合数。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((fact[x]*finv[x-y])%M*finv[y])%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">    <span class="comment">//读入。</span></span><br><span class="line">	fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	finv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fact[i]=(fact[i<span class="number">-1</span>]*i)%M;</span><br><span class="line">	&#125;</span><br><span class="line">	finv[n]=<span class="built_in">qpow</span>(fact[n],M<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		finv[i]=(finv[i<span class="number">+1</span>]*(i<span class="number">+1</span>))%M;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//O(n)计算阶乘及其逆元。</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		h[i]=<span class="built_in">s</span>(i);</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			h[i]=((h[i]-(((<span class="built_in">C</span>(i,j)*<span class="built_in">qpow</span>(<span class="number">2</span>,j*(i-j)))%M*<span class="built_in">s</span>(i-j))%M*h[j])%M)%M+M)%M;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//O(n^2)递推求 h。</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=h[i];</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i]=(f[i]+((<span class="built_in">C</span>(i<span class="number">-1</span>,j<span class="number">-1</span>)*f[j])%M*h[i-j])%M)%M;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//O(n^2)递推求 f。</span></span><br><span class="line">	<span class="built_in">qwrite</span>((f[n]*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(<span class="number">2</span>,n*n),M<span class="number">-2</span>))%M);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="comment">//计算答案并输出。</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/30/aMkWY8.png" alt="aMkWY8.png" />
<figcaption aria-hidden="true">aMkWY8.png</figcaption>
</figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/30/aMkRFf.png" alt="aMkRFf.png" />
<figcaption aria-hidden="true">aMkRFf.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>组合数学</tag>
        <tag>逆元</tag>
        <tag>图论</tag>
        <tag>容斥原理</tag>
        <tag>简单概率</tag>
      </tags>
  </entry>
  <entry>
    <title>现代电子电路基础及实验（二）</title>
    <url>/%E7%8E%B0%E4%BB%A3%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%AE%9E%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p><span
class="math inline">\(\qquad\!\!\)</span>被誉为物院课程中时代的眼泪——现代电子电路基础及实验，从大一入学开始就大名鼎鼎，在学长学姐的强力推荐下（我现在仍强烈建议大家如此进行选课，虽然以后就不是物院的必修课了。😂），我相较于培养计划推迟了一个学期反向于2023-2024春季学期选修了
王志军
老师的理论课程：现代电子电路基础及实验（一），所以只能在2023-2024秋季学期选修实验课程：现代电子电路基础及实验（二）。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>相较于繁重的普物实验，现电实验确实是非常轻松，甚至无需先修理论课程即可上手，每次课基本上开课一个小时左右即可做完实验提前离开。实验报告的要求也比普物实验松了不少，虽然数量上稍稍多了一点，放假较少的秋季学期需要写七份实验报告，按照实验名称顺序排列如下：</p>
<ul>
<li><a
href="/files/放大器的频率特性研究%20实验报告.pdf">3.放大器的频率特性研究</a></li>
<li><a
href="/files/电流串联负反馈放大器的插接与测试%20实验报告.pdf">4.电流串联负反馈放大器的插接与测试</a></li>
<li><a
href="/files/集成运算放大器的应用%20实验报告.pdf">5&amp;6.集成运算放大器的应用</a></li>
<li><a href="/files/TTL%20与非门的参数测量%20实验报告.pdf">8.TTL
与非门的参数测量</a></li>
<li><a
href="/files/组合逻辑电路设计%20实验报告.pdf">9.组合逻辑电路设计</a></li>
<li><a href="/files/环形计数器%20实验报告.pdf">11.环形计数器</a></li>
<li><a
href="/files/用单电源双运放实现的呼吸灯%20实验报告.pdf">12.用单电源双运放实现的呼吸灯</a></li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>以上实验报告均由 LaTeX
排版，使用 TeX Live 2024 发行版，XeLaTeX 编译器（格式+引擎）于 PKUTEX
平台生成。仅供参考，如因此产生的任何问题，本人概不负责😈。</p>
]]></content>
      <categories>
        <category>学习&amp;科研</category>
      </categories>
      <tags>
        <tag>physics</tag>
        <tag>物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534159 【降价处理】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534159-%E3%80%90%E9%99%8D%E4%BB%B7%E5%A4%84%E7%90%86%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534159">降价处理</a></p>
<p>关于题目：作为 T2，一道数学题。</p>
<p>应用算法：最基础的数论。</p>
<span id="more"></span>
<hr />
<p><span
class="math inline">\(\qquad\!\!\)</span>这道题的题意还算明确，正解也非常好想，就是所有
<span class="math inline">\(w_i\)</span> 的 <span
class="math inline">\(\gcd\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>我们考虑证明这个命题：（设每天在这
<span class="math inline">\(n\)</span>
家子公司内该商品单价最高的所有家公司需将单价减少此时在这 <span
class="math inline">\(n\)</span>
家子公司内该商品单价最低的子公司该商品的单价）</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>设最后每家子公司的单价都降为
<span class="math inline">\(r\)</span>，则倒推出在最后一次降价前一定为
<span class="math inline">\(k\)</span>（一个正整数）家子公司的单价为
<span class="math inline">\(2r\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>我们继续倒着向前推，对于第
<span class="math inline">\(i\)</span> 次降价，被改动的最大单价原来为第
<span class="math inline">\(i+1\)</span>
次降价前的两个单价之和，根据在第 <span
class="math inline">\(i+1\)</span> 次降价前所有的单价都为 <span
class="math inline">\(w_i=k_ir\)</span>（<span
class="math inline">\(k_i\)</span> 为一个正整数），那么第 <span
class="math inline">\(i\)</span> 次降价前的所有单价也都是 <span
class="math inline">\(r\)</span> 的正整数倍。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>到这里我们证明了 <span
class="math inline">\(r\)</span> 为 <span
class="math inline">\(w_i\)</span> 的公约数，但是为什么一定是 <span
class="math inline">\(\gcd\)</span>
呢？因为任意两个正整数辗转相除/更相减损的得数不可能比这两个数的 <span
class="math inline">\(\gcd\)</span> 小，对于这 <span
class="math inline">\(n\)</span> 个单价也是这样，所以 <span
class="math inline">\(r\)</span> 一定为所有的 <span
class="math inline">\(w_i\)</span> 的 <span
class="math inline">\(\gcd\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>至此，我们证毕这道题的答案为所有<span
class="math inline">\(w_i\)</span> 的 <span
class="math inline">\(\gcd\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>代码（码风不喜勿喷）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,w,ans;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">gcd</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> y?<span class="built_in">gcd</span>(y,x%y):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	ans=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		w=<span class="built_in">qread</span>();</span><br><span class="line">		ans=<span class="built_in">gcd</span>(ans,w);</span><br><span class="line">        <span class="comment">//求 gcd</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">    <span class="comment">//输出 gcd</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534160 【进入 k 进制星球】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534160-%E3%80%90%E8%BF%9B%E5%85%A5-k-%E8%BF%9B%E5%88%B6%E6%98%9F%E7%90%83%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.luogu.com.cn/problem/U534160">进入 k
进制星球</a>。</p>
<p>关于题目：作为 T3，一道数学题。</p>
<p>应用算法：数论？</p>
<span id="more"></span>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>这道题的题意非常明确，就是求在 <span
class="math inline">\(k\)</span> 进制下 <span
class="math inline">\(n!!\)</span> 的位数。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>前置知识：</p>
<blockquote>
<p><a
href="https://baike.baidu.com/item/%E5%8F%8C%E9%98%B6%E4%B9%98">双阶乘</a>：双阶乘是一个数学概念，用n!!表示。正整数的双阶乘表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。——百度百科</p>
</blockquote>
<blockquote>
<p><a
href="https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0">对数</a>：在数学中，对数是对求幂的逆运算。——百度百科</p>
</blockquote>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>会了对数，自然就可以知道这道题要求的答案就是 <span
class="math inline">\(log_k n!!+1\)</span>。</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>看一眼数据范围：</p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于 <span
class="math inline">\(50\%\)</span> 的数据，<span
class="math inline">\(1\leqslant n \leqslant 2\times 10^6\)</span></p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>对于 <span
class="math inline">\(100\%\)</span> 的数据，<span
class="math inline">\(1\leqslant n \leqslant 2\times
10^9\)</span>，<span class="math inline">\(10 \leqslant k \leqslant
100\)</span></p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>部分分还是给的挺足的，那么我们就先解决前 <span
class="math inline">\(50\%\)</span> 的暴力：</p>
<h2 id="五十分做法">五十分做法：</h2>
<p><span class="math inline">\(\ \ \ \ \ \ \log_k n!!+1=\sum\log_k
i(i=2;i\leqslant n;i=i+2)+1\)</span></p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>没错，这就没了。<del>是不是很简单？</del></p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>具体处理主要有以下三点：</p>
<ul>
<li><p>1、C++ 自带的求<a
href="https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0">对数</a>的函数有两个：<code>double log(double x)</code>
函数返回 <span class="math inline">\(\ln
x\)</span>，<code>double log10(double x)</code> 函数返回 <span
class="math inline">\(\lg x\)</span>。</p></li>
<li><p>2、想求 <span
class="math inline">\(\log_kn\)</span>，自然就需要<a
href="https://baike.baidu.com/item/%E6%8D%A2%E5%BA%95%E5%85%AC%E5%BC%8F">换底公式</a>，在这里，我采用以
<span class="math inline">\(e\)</span>
为底的对数进行中介：<code>ansd+=log(i)/log(k);</code>。</p></li>
<li><p>3、在统计答案时，由于前面用的都是浮点数，但是最后需要一个整数，一定要注意精度的问题：<code>ansi=ansd+eps+1;</code>。<code>eps</code>
是很重要的，一定要有，实例如下：</p></li>
</ul>
<p><img src="https://s1.ax1x.com/2020/07/20/U4qTyR.png"
alt="U4qTyR.png" /> <img src="https://s1.ax1x.com/2020/07/20/U4qol9.png"
alt="U4qol9.png" /></p>
<p>代码（码风不喜勿喷）： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 0.000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,ansi;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> ln_k,ansd;</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			f=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		c=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">		c=<span class="built_in">getchar</span>(); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	k=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="comment">//读入</span></span><br><span class="line">	ln_k=<span class="built_in">log</span>(k);</span><br><span class="line">	<span class="comment">//ln_k表示以e为底k的对数</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ansd+=<span class="built_in">log</span>(i)/ln_k;</span><br><span class="line">		<span class="comment">//ansd+=以k为底i的对数</span></span><br><span class="line">	&#125;</span><br><span class="line">	ansi=ansd+eps<span class="number">+1</span>;</span><br><span class="line">	<span class="comment">//统计答案，这个eps真的非常重要</span></span><br><span class="line">	<span class="built_in">qwrite</span>(ansi);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="comment">//输出答案</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <span class="math inline">\(\ \
\ \ \ \ \)</span>完美的五十分;</p>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4X7Os.png" alt="U4X7Os.png" />
<figcaption aria-hidden="true">U4X7Os.png</figcaption>
</figure>
<hr />
<h2 id="一百分做法">一百分做法：</h2>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>由于 <span
class="math inline">\(1\leqslant n \leqslant 2\times
10^9\)</span>，我们继续使用 <span class="math inline">\(O(n)\)</span>
的算法一定会如上 <span
class="math inline">\(TLE\)</span>，那么，我们就需要一个时间复杂度更小的算法。<span
class="math inline">\((O(\sqrt n)?\ \ O(\log n)?)\)</span></p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>怎么在低于 <span
class="math inline">\(O(n)\)</span> 的时间复杂度内求得 <span
class="math inline">\(log_kn!!+1\)</span>
呢？对于双阶乘的计算我们不是很熟悉，但是由于题目中规定 <span
class="math inline">\(n\)</span>
为偶数，根据定义，我们可以将双阶乘转化成我们比较熟悉的阶乘和乘方相乘的形式：<span
class="math inline">\(n!!=\dfrac{n}{2}!\times
2^{\dfrac{n}{2}}\)</span>，那么要求的答案：<span
class="math inline">\(log_kn!!=log_kn!+\dfrac{n}{2}\times
log_k2\)</span>。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>现在问题的关键就在于，怎么在低于 <span
class="math inline">\(O(n)\)</span> 的时间复杂度内求得 <span
class="math inline">\(log_kn!\)</span>
呢？阶乘我们就熟悉了，利用一个神奇的公式：<a
href="https://baike.baidu.com/item/%E6%96%AF%E7%89%B9%E6%9E%97%E5%85%AC%E5%BC%8F">斯特林公式</a>：<span
class="math inline">\(n!\approx \sqrt{2\pi n} \left( \dfrac{n} {e}
\right)^n\)</span> 即可。 &gt;<span class="math inline">\(\ \ \ \ \ \
\)</span>斯特林公式（Stirling's
approximation）是一条用来取n的阶乘的近似值的数学公式。一般来说，当n很大的时候，n阶乘的计算量十分大，所以斯特林公式十分好用，而且，即使在n很小的时候，斯特林公式的取值已经十分准确。——百度百科</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>由于斯特林公式只是一个近似公式，<span
class="math inline">\(n\)</span>
越大时误差越小，那么我们就只用它去处理暴力会时间超限的后 <span
class="math inline">\(50\%\)</span> 的数据点： <span
class="math inline">\(\log_k n!!+1 \approx \log_k \sqrt{\pi n} \left(
\dfrac{n} {2e} \right)^n +1+\dfrac{n}{2}\times log_k2=\dfrac{1}
{2}\log_k \pi n+n\times \log_k \dfrac{n} {2e}+1+\dfrac{n}{2}\times
log_k2\)</span></p>
<p>代码（码风不喜勿喷）： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 1000010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps 0.000001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,ansi;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> nn,ln_k,n_e,ansd,pi=<span class="number">3.141592653589793</span>,e=<span class="number">2.718281828459</span>;</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			f=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		c=<span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">		c=<span class="built_in">getchar</span>(); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	k=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="comment">//读入</span></span><br><span class="line">	ln_k=<span class="built_in">log</span>(k);</span><br><span class="line">	<span class="comment">//ln_k表示以e为底k的对数</span></span><br><span class="line">	<span class="keyword">if</span>(n&lt;=M)</span><br><span class="line">	<span class="comment">//前50%的数据点：</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ansd+=<span class="built_in">log</span>(i)/ln_k;</span><br><span class="line">			<span class="comment">//ansd+=以k为底i的对数</span></span><br><span class="line">		&#125;</span><br><span class="line">		ansi=ansd+eps<span class="number">+1</span>;</span><br><span class="line">		<span class="comment">//统计答案，这个eps真的非常重要</span></span><br><span class="line">		<span class="built_in">qwrite</span>(ansi);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="comment">//输出答案</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="comment">//后50%的测试点：</span></span><br><span class="line">	&#123;</span><br><span class="line">		nn=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">		n_e=nn/e;</span><br><span class="line">		<span class="comment">//n_e表示n/e的值</span></span><br><span class="line">		ansd=(<span class="built_in">log</span>(<span class="number">2</span>*pi*nn)*<span class="number">0.5</span>+<span class="built_in">log</span>(n_e)*nn)/ln_k;</span><br><span class="line">		<span class="comment">//根据斯特林公式计算nn!并利用换底公式求以k为底nn!的对数</span></span><br><span class="line">		ansi=ansd+eps<span class="number">+1</span>+<span class="built_in">log</span>(<span class="number">2</span>)/ln_k*nn;</span><br><span class="line">		<span class="comment">//统计答案</span></span><br><span class="line">		<span class="built_in">qwrite</span>(ansi);</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="comment">//输出答案</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>完美的一百分：</p>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4j9X9.png" alt="U4j9X9.png" />
<figcaption aria-hidden="true">U4j9X9.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534161 【开学酒局】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534161-%E3%80%90%E5%BC%80%E5%AD%A6%E9%85%92%E5%B1%80%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534161">开学酒局</a>。</p>
<p>关于题目：作为 Day2T1，一道不怎么用思考的<del>半</del>裸题。</p>
<p>应用算法：数位dp。</p>
<span id="more"></span>
<hr />
<p><em>首先说一句，虽然这道题的时间限制为 <span
class="math inline">\(200ms\)</span>，但是亲测暴力完全可过 <span
class="math inline">\(60\%\)</span> 的测试点。</em></p>
<p><em><strong>出题人并没有毒瘤卡常！<del>明明可以卡到
10ms，还是标程最大点时间的三倍以上。</del></strong></em></p>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4va8O.png" alt="U4va8O.png" />
<figcaption aria-hidden="true">U4va8O.png</figcaption>
</figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4vXzF.png" alt="U4vXzF.png" />
<figcaption aria-hidden="true">U4vXzF.png</figcaption>
</figure>
<p><em>下面进入正题：</em></p>
<ul>
<li>一、分析题意：</li>
</ul>
<p><span class="math inline">\(\qquad\!\!\)</span>对于一个满足条件的数字
<span class="math inline">\(c\)</span>，假设其数位总数为 <span
class="math inline">\(l\)</span>，从低到高第 <span
class="math inline">\(i\)</span> 个数位上的数字为 <span
class="math inline">\(c_i\)</span>，则应满足 <span
class="math inline">\(\forall
i\in[3,l],||c_i-c_{i-1}|-c_{i-2}|&lt;k\)</span>。</p>
<p><span class="math inline">\(\qquad\!\!\)</span>题目要求就是求 <span
class="math inline">\([l,r]\)</span> 区间内，<strong>满足条件的数字
<span class="math inline">\(c\)</span> 的总数量</strong>。</p>
<ul>
<li>二、dp过程：</li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>因为是数位dp，很自然能想到以下的状态、初始化和转移方程。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>状态</strong>：<span
class="math inline">\(f_{i,a,b}\)</span> 表示从小到大的第 <span
class="math inline">\(i\)</span> 个数位上的数字为 <span
class="math inline">\(a\)</span>，第 <span
class="math inline">\(i-1\)</span> 个数位上的数字为 <span
class="math inline">\(b\)</span>
的数字中，所有满足条件的数字的个数。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>初始化</strong>：由题面及数据范围
<span class="math inline">\(100\leqslant l \leqslant r \leqslant
2\times10^9\)</span>
可知，最小的能够为答案进行贡献的数字为三位数，由此可知，应将所有 <span
class="math inline">\(f_{2,a,b}\)</span> 初始化为 <span
class="math inline">\(1\)</span>，以便进行转移。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span><strong>转移方程</strong>：易知从较小的数位往较大的数位转移，加上判断条件，易得以下的转移方程：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line"><span class="comment">//从小到大的第三个数位到第十个数位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">0</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">		<span class="comment">//a 为第 i 个数位上的数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">			<span class="comment">//b 为第 i-1 个数位上的数</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">9</span>;c++)</span><br><span class="line">				<span class="comment">//c 为第 i-2 个数位上的数</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(a-b)-c)&lt;k)</span><br><span class="line">					<span class="comment">//如果满足条件</span></span><br><span class="line">					&#123;</span><br><span class="line">						f[i][a][b]+=f[i<span class="number">-1</span>][b][c];</span><br><span class="line">						<span class="comment">//累计，转移</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure> - 三、统计答案：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>由于直接统计 <span
class="math inline">\([l,r]\)</span>
中满足条件的数字的总数量比较麻烦，我们规定 <span
class="math inline">\(js(x)\)</span> 表示 <span
class="math inline">\([100,x)\)</span> 中满足条件的数字的总数量，则易知
<span class="math inline">\(ans=js(r+1)-js(l)\)</span>。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>下面，我们考虑如何计算得到
<span
class="math inline">\(js(x)\)</span>。为了便于理解，我们同时举一个例子
<span class="math inline">\(x=98219,k=5\)</span>。</p>
<p>$!!$1.<strong>将数字 <span class="math inline">\(x\)</span>
拆成各个数位</strong>： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">	c[++l]=x%<span class="number">10</span>;</span><br><span class="line">	x/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <span class="math inline">\(e.g.\
\ c_1=9,c_2=1,c_3=2,c_4=8,c_5=9,l=5\)</span>。</p>
<p>$!!<span
class="math inline">\(2.**统计其数量级以下的满足条件的数字的总数量**：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">3</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[i][a][b];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>\)</span>e.g.$统计了 <span
class="math inline">\([100,10000)\)</span>
中满足条件的数字的总数量。</p>
<p>$!!$3.<strong>统计该数量级下第 <span class="math inline">\(l\)</span>
位小于 <span class="math inline">\(x_l\)</span>
的满足条件的数字的总数量</strong>： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">1</span>;a&lt;c[l];a++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=f[l][a][b];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <span
class="math inline">\(e.g.\)</span>统计了 <span
class="math inline">\([10000,90000)\)</span>
中满足条件的数字的总数量。</p>
<p>$!!$4.<strong>统计该数量级下第 <span class="math inline">\(l\)</span>
位等于 <span class="math inline">\(x_l\)</span> 且第 <span
class="math inline">\(l-1\)</span> 位小于 <span
class="math inline">\(x_{l-1}\)</span>
的满足条件的数字的总数量</strong>： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">2</span>];b++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=f[<span class="number">3</span>][c[<span class="number">3</span>]][b];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">0</span>;a&lt;c[l<span class="number">-1</span>];a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[l]-a)-b)&lt;k)</span><br><span class="line">			&#123;</span><br><span class="line">				ans+=f[l<span class="number">-1</span>][a][b];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <span
class="math inline">\(\qquad\!\!\)</span>这里需要注意一点，因为这是一个<strong>相邻的三个数位存在限制条件</strong>的数位dp，所以需要特殊处理最高的两个数位和最低的两个数位，而当
<span class="math inline">\(l=3\)</span> 时，从低往高数的第二个数位
<span class="math inline">\(x_2\)</span> 和从高往低数的第二个数位 <span
class="math inline">\(x_{l-2}\)</span>
相同，这时就需要一个小小的特殊处理。</p>
<p><span class="math inline">\(e.g.\)</span> 统计了 <span
class="math inline">\([90000,98000)\)</span>
中满足条件的数字的总数量。</p>
<p>$!!<span class="math inline">\(5.**统计剩余答案**：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=l<span class="number">-2</span>;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>(i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">1</span>];b++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[<span class="number">3</span>]-c[<span class="number">2</span>])-b)&lt;k)</span><br><span class="line">				&#123;</span><br><span class="line">					ans++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">2</span>];b++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[<span class="number">4</span>]-c[<span class="number">3</span>])-b)&lt;k)</span><br><span class="line">				&#123;</span><br><span class="line">					ans+=f[<span class="number">3</span>][c[<span class="number">3</span>]][b];	</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[i];b++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[i<span class="number">+2</span>]-c[i<span class="number">+1</span>])-b)&lt;k)</span><br><span class="line">				&#123;</span><br><span class="line">					ans+=f[i<span class="number">+1</span>][c[i<span class="number">+1</span>]][b];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[i<span class="number">+2</span>]-c[i<span class="number">+1</span>])-c[i])&gt;=k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>\)</span>!!$这里需要注意两点：</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>（1）、因为这次统计是顺着 <span
class="math inline">\(x\)</span>
的数位从高往低循环的，所以如果<strong>前面的数位已经不符合条件</strong>了，后面就没有必要继续循环了：</p>
<p><span class="math inline">\(\qquad\!\!\)</span>（2）、如 4
中所说：“因为这是一个<strong>相邻的三个数位存在限制条件</strong>的数位dp，所以需要特殊处理最高的两个数位和最低的两个数位。”所以对于
<span class="math inline">\(i=1\)</span> 和 <span
class="math inline">\(i=2\)</span> 的情况需要特殊处理。</p>
<p><span
class="math inline">\(\qquad\!\!\)</span>其余的（<code>default:</code>
后的）就是正常的判断+统计答案。</p>
<p><span class="math inline">\(e.g.\)</span></p>
<p><span class="math inline">\(\qquad\!\! i=3\)</span>，统计了 <span
class="math inline">\([98000,98200)\)</span>
中满足条件的数字的总数量，不满足 <code>break</code> 的条件继续循环。</p>
<p><span class="math inline">\(\qquad\!\! i=2\)</span>，统计了 <span
class="math inline">\([98200,98210)\)</span>
中满足条件的数字的总数量，满足了 <code>break</code> 的条件结束循环。</p>
<p>$!!$6.<strong>至此，只要 <code>return ans</code> 即可返回 <span
class="math inline">\(js(x)\)</span> 的值。</strong></p>
<ul>
<li>四、代码（码风不喜勿喷）： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> l,r,k,f[<span class="number">20</span>][<span class="number">20</span>][<span class="number">20</span>],c[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">js</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//计算 [100,x) 中满足条件的数字的总数量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="built_in">sizeof</span>(c));</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)</span><br><span class="line">	&#123;</span><br><span class="line">		c[++l]=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将数字 x 拆成各个数位</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">3</span>;i&lt;l;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">1</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">			&#123;</span><br><span class="line">				ans+=f[i][a][b];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计其数量级以下的满足条件的数字的总数量</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">1</span>;a&lt;c[l];a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)	</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[l][a][b];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计该数量级下第l位的数字小于x的第l位的数字的满足条件的数字的总数量</span></span><br><span class="line">	<span class="keyword">if</span>(l==<span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">2</span>];b++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans+=f[<span class="number">3</span>][c[<span class="number">3</span>]][b];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">0</span>;a&lt;c[l<span class="number">-1</span>];a++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[l]-a)-b)&lt;k)</span><br><span class="line">				&#123;</span><br><span class="line">					ans+=f[l<span class="number">-1</span>][a][b];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计该数量级下第l位的数字等于x的第l位的数字且第l-1位的数字小于x的第l-1位的数字的满足条件的数字的总数量</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=l<span class="number">-2</span>;i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span>(i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">1</span>];b++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[<span class="number">3</span>]-c[<span class="number">2</span>])-b)&lt;k)</span><br><span class="line">					&#123;</span><br><span class="line">						ans++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[<span class="number">2</span>];b++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[<span class="number">4</span>]-c[<span class="number">3</span>])-b)&lt;k)</span><br><span class="line">					&#123;</span><br><span class="line">						ans+=f[<span class="number">3</span>][c[<span class="number">3</span>]][b];	</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;c[i];b++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[i<span class="number">+2</span>]-c[i<span class="number">+1</span>])-b)&lt;k)</span><br><span class="line">					&#123;</span><br><span class="line">					ans+=f[i<span class="number">+1</span>][c[i<span class="number">+1</span>]][b];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(c[i<span class="number">+2</span>]-c[i<span class="number">+1</span>])-c[i])&gt;=k)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计剩余答案</span></span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">	<span class="comment">//返回计算结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	l=<span class="built_in">qread</span>();</span><br><span class="line">	r=<span class="built_in">qread</span>();</span><br><span class="line">	k=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="comment">//读入</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">0</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[<span class="number">2</span>][a][b]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">	<span class="comment">//从小到大的第三个数位到第十个数位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(re <span class="type">int</span> a=<span class="number">0</span>;a&lt;=<span class="number">9</span>;a++)</span><br><span class="line">		<span class="comment">//a 为第 i 个数位上的数</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(re <span class="type">int</span> b=<span class="number">0</span>;b&lt;=<span class="number">9</span>;b++)</span><br><span class="line">			<span class="comment">//b 为第 i-1 个数位上的数</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(re <span class="type">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">9</span>;c++)</span><br><span class="line">				<span class="comment">//c 为第 i-2 个数位上的数</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">abs</span>(a-b)-c)&lt;k)</span><br><span class="line">					<span class="comment">//如果满足条件</span></span><br><span class="line">					&#123;</span><br><span class="line">						f[i][a][b]+=f[i<span class="number">-1</span>][b][c];</span><br><span class="line">						<span class="comment">//累计，转移</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(<span class="built_in">js</span>(r<span class="number">+1</span>)-<span class="built_in">js</span>(l));</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><span
class="math inline">\(\qquad\!\!\)</span>最后，再放一份验题人用<strong>记忆化搜索</strong>写的代码，比我的代码量少好多：<img
src="https://i.loli.net/2020/04/16/9OlFZMCiEfcXjJ1.png" alt="0" /></p>
<p><span
class="math inline">\(\qquad\!\!\)</span>（尊重验题人的代码习惯，这里就不对他的缩进进行改动了。）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ri register long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">11</span>][<span class="number">11</span>][<span class="number">11</span>][<span class="number">11</span>][<span class="number">2</span>][<span class="number">5</span>],l,r,k,len,s[<span class="number">11</span>];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">dfs</span><span class="params">(ri pos,ri p1,ri p2,ri p3,ri lim,ri _0)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(pos==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>&amp;&amp;!_0;</span><br><span class="line"> <span class="keyword">if</span>(~dp[pos][p1][p2][p3][lim][_0])<span class="keyword">return</span> dp[pos][p1][p2][p3][lim][_0];</span><br><span class="line"> ri up=(lim?s[pos]:<span class="number">9</span>),res=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(ri i=<span class="number">0</span>;i&lt;=up;++i)&#123;</span><br><span class="line">  <span class="keyword">if</span>(_0==<span class="number">3</span>)res+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,p2,p3,i,lim&amp;&amp;i==s[pos],_0-(i!=<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(_0==<span class="number">2</span>)res+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,p2,p3,i,lim&amp;&amp;i==s[pos],<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(_0==<span class="number">1</span>&amp;&amp;<span class="built_in">abs</span>(<span class="built_in">abs</span>(p2-p3)-i)&lt;k)res+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,p2,p3,i,lim&amp;&amp;i==s[pos],<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(_0==<span class="number">0</span>&amp;&amp;<span class="built_in">abs</span>(<span class="built_in">abs</span>(p2-p3)-i)&lt;k)res+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,p2,p3,i,lim&amp;&amp;i==s[pos],<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> dp[pos][p1][p2][p3][lim][_0]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;l,&amp;r,&amp;k);l--;</span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp); </span><br><span class="line"> <span class="keyword">while</span>(r)&#123;len++;s[len]=r%<span class="number">10</span>;r/=<span class="number">10</span>;&#125;</span><br><span class="line"> ri ans=<span class="built_in">dfs</span>(len,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"> len=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span>(l)&#123;len++;s[len]=l%<span class="number">10</span>;l/=<span class="number">10</span>;&#125;</span><br><span class="line"> <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"> ri o=<span class="built_in">dfs</span>(len,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans-o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4vADs.png" alt="U4vADs.png" />
<figcaption aria-hidden="true">U4vADs.png</figcaption>
</figure>
<figure>
<img src="https://s1.ax1x.com/2020/07/20/U4vm5V.png" alt="U4vm5V.png" />
<figcaption aria-hidden="true">U4vm5V.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>动态规划</tag>
        <tag>DP</tag>
        <tag>数位 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U534158 【单身排查】</title>
    <url>/%E9%A2%98%E8%A7%A3-U534158-%E3%80%90%E5%8D%95%E8%BA%AB%E6%8E%92%E6%9F%A5%E3%80%91/</url>
    <content><![CDATA[<p>题目链接：<a
href="https://www.luogu.com.cn/problem/U534158">单身排查</a></p>
<p>关于题目：作为 T1，一道很水很水的有关位运算的题目。</p>
<p>应用算法：无。</p>
<span id="more"></span>
<hr />
<p><span class="math inline">\(\ \ \ \ \ \ \)</span>一句话题意：一共
<span class="math inline">\(n\)</span>
个数，其中的存在某一个数字出现了奇数次，其它的数字均出现偶数次，请你求出这个数字。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>由于太水了，我就直接说了：C++ 的位运算中有一个东西叫<a
href="https://baike.baidu.com/item/%E5%BC%82%E6%88%96">异或</a><strong>（^）</strong>，相同的偶数个数字的异或和为
<span
class="math inline">\(0\)</span>，相同的奇数个数字的异或和为该数字。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>所以这道题就相当于求出所有数字的<strong>异或和</strong>。</p>
<p><span class="math inline">\(\ \ \ \ \ \
\)</span>代码（码风不喜勿喷）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="comment">//数据范围的原因，常规套路</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,x,ans;</span><br><span class="line"><span class="comment">//每个数组或变量的含义详见处理过程。</span></span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)y=<span class="number">-1</span>;</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">        c=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//快写</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		x=-x;</span><br><span class="line">		<span class="built_in">qwrite</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=<span class="built_in">qread</span>();</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x=<span class="built_in">qread</span>();</span><br><span class="line">		ans^=x;</span><br><span class="line">		<span class="comment">//异或</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">qwrite</span>(ans);</span><br><span class="line">	<span class="comment">//输出异或和</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://s1.ax1x.com/2020/06/13/txQc8J.png" alt="txQc8J.png" />
<figcaption aria-hidden="true">txQc8J.png</figcaption>
</figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>题解</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>数学</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>起手式</title>
    <url>/%E8%B5%B7%E6%89%8B%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>1、起手式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<hr />
<ul>
<li>2、卡常起手式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>,<span class="string">&quot;-ffast-math&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target(<span class="string">&quot;abm,avx,avx2,mmx,popcnt,sse,sse2,sse3,ssse3,sse4&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(r,s) r^s?r^=s^=r^=s:r=s</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<ul>
<li>3、图论起手式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=M;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[M];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<ul>
<li>4、树论起手式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=N;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> cnt,head[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">&#125;; </span><br><span class="line">edge e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">qread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			y=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">qwrite</span><span class="params">(re <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">		<span class="built_in">qwrite</span>(-x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">qwrite</span>(x/<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">mr</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[++cnt].to=v;</span><br><span class="line">	e[cnt].nxt=head[u];</span><br><span class="line">	head[u]=cnt;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">in <span class="type">void</span> <span class="title">dfs</span><span class="params">(re <span class="type">int</span> u,re <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(re <span class="type">int</span> i=head[u];i;i=e[i].nxt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v==fa)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(v,u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5、<a
href="http://lhrg.github.io/浅谈-C-万能头文件内部头文件/">头文件大全</a></li>
<li>6、随机数据生成器：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">in <span class="type">int</span> <span class="title">run</span><span class="params">(re <span class="type">int</span> l,re <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">rand</span>()%(r-l<span class="number">+1</span>)+l; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>)*<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>7、对拍：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in inline</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;nametest.exe&gt;name.in&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;namestd.exe&lt;name.in&gt;std.out&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;name.exe&lt;name.in&gt;my.out&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">system</span>(<span class="string">&quot;fc std.out my.out&quot;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;圣柠檬的数据卡掉了我！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OI</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>OI</tag>
        <tag>起手式</tag>
      </tags>
  </entry>
</search>
